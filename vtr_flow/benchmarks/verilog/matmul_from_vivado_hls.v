// ==============================================================
// File generated on Sun Apr 28 11:35:25 -0500 2019
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
// SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
// IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================
module matrix_multiply_abkb_ram (addr0, ce0, d0, we0, q0, addr1, ce1, d1, we1,  clk);

parameter DWIDTH = 32;
parameter AWIDTH = 4;
parameter MEM_SIZE = 9;

input [AWIDTH-1:0] addr0;
input  ce0;
input [DWIDTH-1:0] d0;
input  we0;
output  reg[DWIDTH-1:0] q0;
input [AWIDTH-1:0] addr1;
input  ce1;
input [DWIDTH-1:0] d1;
input  we1;
input  clk;

reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];




always @(posedge clk)  
begin 
    if (ce0) 
    begin
        if (we0) 
        begin 
            ram[addr0] <= d0; 
        end 
        q0 <= ram[addr0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) 
    begin
        if (we1) 
        begin 
            ram[addr1] <= d1; 
        end 
    end
end


endmodule

module matrix_multiply_abkb(
    reset,
    clk,
    address0,
    ce0,
    we0,
    d0,
    q0,
    address1,
    ce1,
    we1,
    d1);

parameter DataWidth = 32'd32;
parameter AddressRange = 32'd9;
parameter AddressWidth = 32'd4;
input  reset;
input  clk;
input [AddressWidth - 1:0] address0;
input  ce0;
input  we0;
input [DataWidth - 1:0] d0;
output [DataWidth - 1:0] q0;
input [AddressWidth - 1:0] address1;
input  ce1;
input  we1;
input [DataWidth - 1:0] d1;



matrix_multiply_abkb_ram matrix_multiply_abkb_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .we0( we0 ),
    .d0( d0 ),
    .q0( q0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .we1( we1 ),
    .d1( d1 ));

endmodule

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================


module matrix_multiply_alt2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state15 = 3'd4;

input    ap_clk;
input    ap_rst;
input    ap_start;
output    ap_done;
output    ap_idle;
output    ap_ready;
output   [3:0] A_address0;
output    A_ce0;
input   [31:0] A_q0;
output   [3:0] B_address0;
output    B_ce0;
input   [31:0] B_q0;
output   [3:0] C_address0;
output    C_ce0;
output    C_we0;
output   [31:0] C_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;

 reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] indvar_flatten1_reg_116;
reg   [1:0] Col_assign_2_reg_127;
reg   [3:0] indvar_flatten_reg_138;
reg   [1:0] Row_assign_reg_149;
reg   [1:0] Col_assign_reg_160;
wire   [0:0] exitcond_flatten1_fu_182_p2;
reg   [0:0] exitcond_flatten1_reg_404;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten1_reg_404_pp0_iter1_reg;
reg   [0:0] exitcond_flatten1_reg_404_pp0_iter2_reg;
reg   [0:0] exitcond_flatten1_reg_404_pp0_iter3_reg;
reg   [0:0] exitcond_flatten1_reg_404_pp0_iter4_reg;
wire   [4:0] indvar_flatten_next1_fu_188_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_mid2_fu_226_p3;
reg   [0:0] tmp_mid2_reg_413;
reg   [0:0] tmp_mid2_reg_413_pp0_iter1_reg;
reg   [0:0] tmp_mid2_reg_413_pp0_iter2_reg;
reg   [0:0] tmp_mid2_reg_413_pp0_iter3_reg;
reg   [0:0] tmp_mid2_reg_413_pp0_iter4_reg;
reg   [0:0] tmp_mid2_reg_413_pp0_iter5_reg;
reg   [0:0] tmp_mid2_reg_413_pp0_iter6_reg;
reg   [0:0] tmp_mid2_reg_413_pp0_iter7_reg;
reg   [0:0] tmp_mid2_reg_413_pp0_iter8_reg;
reg   [0:0] tmp_mid2_reg_413_pp0_iter9_reg;
reg   [0:0] tmp_mid2_reg_413_pp0_iter10_reg;
reg   [0:0] tmp_mid2_reg_413_pp0_iter11_reg;
wire   [0:0] tmp_mid2_13_fu_246_p3;
reg   [0:0] tmp_mid2_13_reg_417;
reg   [0:0] tmp_mid2_13_reg_417_pp0_iter1_reg;
reg   [0:0] tmp_mid2_13_reg_417_pp0_iter2_reg;
reg   [0:0] tmp_mid2_13_reg_417_pp0_iter3_reg;
reg   [0:0] tmp_mid2_13_reg_417_pp0_iter4_reg;
reg   [0:0] tmp_mid2_13_reg_417_pp0_iter5_reg;
reg   [0:0] tmp_mid2_13_reg_417_pp0_iter6_reg;
reg   [0:0] tmp_mid2_13_reg_417_pp0_iter7_reg;
reg   [0:0] tmp_mid2_13_reg_417_pp0_iter8_reg;
reg   [0:0] tmp_mid2_13_reg_417_pp0_iter9_reg;
reg   [0:0] tmp_mid2_13_reg_417_pp0_iter10_reg;
reg   [0:0] tmp_mid2_13_reg_417_pp0_iter11_reg;
wire   [1:0] tmp_i_i_mid2_v_fu_254_p3;
reg   [1:0] tmp_i_i_mid2_v_reg_421;
wire   [1:0] Col_assign_mid2_fu_292_p3;
reg   [1:0] Col_assign_mid2_reg_428;
wire   [1:0] tmp_11_mid2_fu_300_p3;
reg   [1:0] tmp_11_mid2_reg_433;
wire   [1:0] c_fu_308_p2;
wire   [3:0] indvar_flatten_next_fu_320_p3;
wire   [4:0] tmp_22_fu_393_p2;
reg   [4:0] tmp_22_reg_460;
reg   [4:0] tmp_22_reg_460_pp0_iter2_reg;
reg   [4:0] tmp_22_reg_460_pp0_iter3_reg;
reg   [4:0] tmp_22_reg_460_pp0_iter4_reg;
reg   [3:0] C_addr_reg_475;
reg   [3:0] C_addr_reg_475_pp0_iter6_reg;
reg   [3:0] C_addr_reg_475_pp0_iter7_reg;
reg   [3:0] C_addr_reg_475_pp0_iter8_reg;
reg   [3:0] C_addr_reg_475_pp0_iter9_reg;
reg   [3:0] C_addr_reg_475_pp0_iter10_reg;
reg   [3:0] C_addr_reg_475_pp0_iter11_reg;
reg   [3:0] sum_mult_addr_reg_480;
reg   [3:0] sum_mult_addr_reg_480_pp0_iter6_reg;
reg   [3:0] sum_mult_addr_reg_480_pp0_iter7_reg;
reg   [3:0] sum_mult_addr_reg_480_pp0_iter8_reg;
reg   [3:0] sum_mult_addr_reg_480_pp0_iter9_reg;
reg   [3:0] sum_mult_addr_reg_480_pp0_iter10_reg;
reg   [3:0] sum_mult_addr_reg_480_pp0_iter11_reg;
wire   [31:0] grp_fu_175_p2;
reg   [31:0] mult_reg_486;
reg   [31:0] mult_reg_486_pp0_iter6_reg;
wire   [31:0] sum_mult_q0;
reg   [31:0] sum_mult_load_reg_491;
reg    ap_enable_reg_pp0_iter6;
wire   [31:0] grp_fu_171_p2;
reg   [31:0] tmp_13_reg_496;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
wire   [3:0] sum_mult_address0;
reg    sum_mult_ce0;
reg    sum_mult_we0;
reg    sum_mult_ce1;
reg    sum_mult_we1;
reg   [1:0] ap_phi_mux_Col_assign_2_phi_fu_131_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_Row_assign_phi_fu_153_p4;
wire   [63:0] tmp_28_cast_fu_374_p1;
wire  signed [63:0] tmp_29_cast_fu_388_p1;
wire   [63:0] tmp_30_cast_fu_399_p1;
wire   [0:0] exitcond_flatten_fu_200_p2;
wire   [1:0] k_fu_194_p2;
wire   [0:0] tmp_mid1_fu_214_p2;
wire   [0:0] tmp3_fu_220_p2;
wire   [0:0] tmp_mid1_12_fu_234_p2;
wire   [0:0] tmp_2_fu_240_p2;
wire   [0:0] exitcond_fu_268_p2;
wire   [0:0] not_exitcond_flatten_fu_262_p2;
wire   [1:0] Row_assign_mid_fu_206_p3;
wire   [0:0] exitcond_mid_fu_274_p2;
wire   [0:0] tmp_18_fu_286_p2;
wire   [1:0] r_fu_280_p2;
wire   [3:0] indvar_flatten_op_fu_314_p2;
wire   [3:0] tmp_s_fu_331_p3;
wire   [4:0] p_shl1_cast_fu_338_p1;
wire   [4:0] tmp_i_i_mid2_cast_fu_328_p1;
wire   [3:0] tmp_fu_351_p3;
wire   [4:0] p_shl_cast_fu_358_p1;
wire   [4:0] tmp_11_mid2_cast_fu_348_p1;
wire   [4:0] tmp_19_fu_362_p2;
wire   [4:0] tmp_20_fu_368_p2;
wire   [4:0] tmp_i_i4_cast_fu_379_p1;
wire   [4:0] tmp_17_fu_342_p2;
wire   [4:0] tmp_21_fu_382_p2;
wire    ap_CS_fsm_state15;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
end

matrix_multiply_abkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
sum_mult_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sum_mult_address0),
    .ce0(sum_mult_ce0),
    .we0(sum_mult_we0),
    .d0(grp_fu_175_p2),
    .q0(sum_mult_q0),
    .address1(sum_mult_addr_reg_480_pp0_iter11_reg),
    .ce1(sum_mult_ce1),
    .we1(sum_mult_we1),
    .d1(tmp_13_reg_496)
);

matrix_multiply_tcud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrix_multiply_tcud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_mult_load_reg_491),
    .din1(mult_reg_486_pp0_iter6_reg),
    .ce(1'b1),
    .dout(grp_fu_171_p2)
);

matrix_multiply_tdEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrix_multiply_tdEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_q0),
    .din1(B_q0),
    .ce(1'b1),
    .dout(grp_fu_175_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter12 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_404 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        Col_assign_2_reg_127 <= tmp_i_i_mid2_v_reg_421;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        Col_assign_2_reg_127 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Col_assign_reg_160 <= c_fu_308_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        Col_assign_reg_160 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_404 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        Row_assign_reg_149 <= tmp_11_mid2_reg_433;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        Row_assign_reg_149 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten1_reg_116 <= indvar_flatten_next1_fu_188_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten1_reg_116 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_138 <= indvar_flatten_next_fu_320_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_138 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_404_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        C_addr_reg_475 <= tmp_30_cast_fu_399_p1;
        mult_reg_486 <= grp_fu_175_p2;
        sum_mult_addr_reg_480 <= tmp_30_cast_fu_399_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        C_addr_reg_475_pp0_iter10_reg <= C_addr_reg_475_pp0_iter9_reg;
        C_addr_reg_475_pp0_iter11_reg <= C_addr_reg_475_pp0_iter10_reg;
        C_addr_reg_475_pp0_iter6_reg <= C_addr_reg_475;
        C_addr_reg_475_pp0_iter7_reg <= C_addr_reg_475_pp0_iter6_reg;
        C_addr_reg_475_pp0_iter8_reg <= C_addr_reg_475_pp0_iter7_reg;
        C_addr_reg_475_pp0_iter9_reg <= C_addr_reg_475_pp0_iter8_reg;
        exitcond_flatten1_reg_404_pp0_iter2_reg <= exitcond_flatten1_reg_404_pp0_iter1_reg;
        exitcond_flatten1_reg_404_pp0_iter3_reg <= exitcond_flatten1_reg_404_pp0_iter2_reg;
        exitcond_flatten1_reg_404_pp0_iter4_reg <= exitcond_flatten1_reg_404_pp0_iter3_reg;
        mult_reg_486_pp0_iter6_reg <= mult_reg_486;
        sum_mult_addr_reg_480_pp0_iter10_reg <= sum_mult_addr_reg_480_pp0_iter9_reg;
        sum_mult_addr_reg_480_pp0_iter11_reg <= sum_mult_addr_reg_480_pp0_iter10_reg;
        sum_mult_addr_reg_480_pp0_iter6_reg <= sum_mult_addr_reg_480;
        sum_mult_addr_reg_480_pp0_iter7_reg <= sum_mult_addr_reg_480_pp0_iter6_reg;
        sum_mult_addr_reg_480_pp0_iter8_reg <= sum_mult_addr_reg_480_pp0_iter7_reg;
        sum_mult_addr_reg_480_pp0_iter9_reg <= sum_mult_addr_reg_480_pp0_iter8_reg;
        tmp_22_reg_460_pp0_iter2_reg <= tmp_22_reg_460;
        tmp_22_reg_460_pp0_iter3_reg <= tmp_22_reg_460_pp0_iter2_reg;
        tmp_22_reg_460_pp0_iter4_reg <= tmp_22_reg_460_pp0_iter3_reg;
        tmp_mid2_13_reg_417_pp0_iter10_reg <= tmp_mid2_13_reg_417_pp0_iter9_reg;
        tmp_mid2_13_reg_417_pp0_iter11_reg <= tmp_mid2_13_reg_417_pp0_iter10_reg;
        tmp_mid2_13_reg_417_pp0_iter2_reg <= tmp_mid2_13_reg_417_pp0_iter1_reg;
        tmp_mid2_13_reg_417_pp0_iter3_reg <= tmp_mid2_13_reg_417_pp0_iter2_reg;
        tmp_mid2_13_reg_417_pp0_iter4_reg <= tmp_mid2_13_reg_417_pp0_iter3_reg;
        tmp_mid2_13_reg_417_pp0_iter5_reg <= tmp_mid2_13_reg_417_pp0_iter4_reg;
        tmp_mid2_13_reg_417_pp0_iter6_reg <= tmp_mid2_13_reg_417_pp0_iter5_reg;
        tmp_mid2_13_reg_417_pp0_iter7_reg <= tmp_mid2_13_reg_417_pp0_iter6_reg;
        tmp_mid2_13_reg_417_pp0_iter8_reg <= tmp_mid2_13_reg_417_pp0_iter7_reg;
        tmp_mid2_13_reg_417_pp0_iter9_reg <= tmp_mid2_13_reg_417_pp0_iter8_reg;
        tmp_mid2_reg_413_pp0_iter10_reg <= tmp_mid2_reg_413_pp0_iter9_reg;
        tmp_mid2_reg_413_pp0_iter11_reg <= tmp_mid2_reg_413_pp0_iter10_reg;
        tmp_mid2_reg_413_pp0_iter2_reg <= tmp_mid2_reg_413_pp0_iter1_reg;
        tmp_mid2_reg_413_pp0_iter3_reg <= tmp_mid2_reg_413_pp0_iter2_reg;
        tmp_mid2_reg_413_pp0_iter4_reg <= tmp_mid2_reg_413_pp0_iter3_reg;
        tmp_mid2_reg_413_pp0_iter5_reg <= tmp_mid2_reg_413_pp0_iter4_reg;
        tmp_mid2_reg_413_pp0_iter6_reg <= tmp_mid2_reg_413_pp0_iter5_reg;
        tmp_mid2_reg_413_pp0_iter7_reg <= tmp_mid2_reg_413_pp0_iter6_reg;
        tmp_mid2_reg_413_pp0_iter8_reg <= tmp_mid2_reg_413_pp0_iter7_reg;
        tmp_mid2_reg_413_pp0_iter9_reg <= tmp_mid2_reg_413_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_182_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Col_assign_mid2_reg_428 <= Col_assign_mid2_fu_292_p3;
        tmp_mid2_13_reg_417 <= tmp_mid2_13_fu_246_p3;
        tmp_mid2_reg_413 <= tmp_mid2_fu_226_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten1_reg_404 <= exitcond_flatten1_fu_182_p2;
        exitcond_flatten1_reg_404_pp0_iter1_reg <= exitcond_flatten1_reg_404;
        tmp_mid2_13_reg_417_pp0_iter1_reg <= tmp_mid2_13_reg_417;
        tmp_mid2_reg_413_pp0_iter1_reg <= tmp_mid2_reg_413;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_mid2_reg_413_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        sum_mult_load_reg_491 <= sum_mult_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_11_mid2_reg_433 <= tmp_11_mid2_fu_300_p3;
        tmp_i_i_mid2_v_reg_421 <= tmp_i_i_mid2_v_fu_254_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_mid2_reg_413_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_13_reg_496 <= grp_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_404 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_22_reg_460 <= tmp_22_fu_393_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_mid2_reg_413_pp0_iter11_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1) & (tmp_mid2_13_reg_417_pp0_iter11_reg == 1'd1))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten1_fu_182_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_404 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_Col_assign_2_phi_fu_131_p4 = tmp_i_i_mid2_v_reg_421;
    end else begin
        ap_phi_mux_Col_assign_2_phi_fu_131_p4 = Col_assign_2_reg_127;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_404 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_Row_assign_phi_fu_153_p4 = tmp_11_mid2_reg_433;
    end else begin
        ap_phi_mux_Row_assign_phi_fu_153_p4 = Row_assign_reg_149;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (tmp_mid2_reg_413_pp0_iter4_reg == 1'd1)) | ((tmp_mid2_reg_413_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
        sum_mult_ce0 = 1'b1;
    end else begin
        sum_mult_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        sum_mult_ce1 = 1'b1;
    end else begin
        sum_mult_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (tmp_mid2_reg_413_pp0_iter4_reg == 1'd1))) begin
        sum_mult_we0 = 1'b1;
    end else begin
        sum_mult_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_mid2_13_reg_417_pp0_iter11_reg == 1'd0) & (tmp_mid2_reg_413_pp0_iter11_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        sum_mult_we1 = 1'b1;
    end else begin
        sum_mult_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten1_fu_182_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter11 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter12 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_flatten1_fu_182_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter11 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter12 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_28_cast_fu_374_p1;

assign B_address0 = tmp_29_cast_fu_388_p1;

assign C_address0 = C_addr_reg_475_pp0_iter11_reg;

assign C_d0 = tmp_13_reg_496;

assign Col_assign_mid2_fu_292_p3 = ((tmp_18_fu_286_p2[0:0] === 1'b1) ? 2'd0 : Col_assign_reg_160);

assign Row_assign_mid_fu_206_p3 = ((exitcond_flatten_fu_200_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_Row_assign_phi_fu_153_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c_fu_308_p2 = (Col_assign_mid2_fu_292_p3 + 2'd1);

assign exitcond_flatten1_fu_182_p2 = ((indvar_flatten1_reg_116 == 5'd27) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_200_p2 = ((indvar_flatten_reg_138 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_fu_268_p2 = ((Col_assign_reg_160 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_274_p2 = (not_exitcond_flatten_fu_262_p2 & exitcond_fu_268_p2);

assign indvar_flatten_next1_fu_188_p2 = (indvar_flatten1_reg_116 + 5'd1);

assign indvar_flatten_next_fu_320_p3 = ((exitcond_flatten_fu_200_p2[0:0] === 1'b1) ? 4'd1 : indvar_flatten_op_fu_314_p2);

assign indvar_flatten_op_fu_314_p2 = (indvar_flatten_reg_138 + 4'd1);

assign k_fu_194_p2 = (ap_phi_mux_Col_assign_2_phi_fu_131_p4 + 2'd1);

assign not_exitcond_flatten_fu_262_p2 = (exitcond_flatten_fu_200_p2 ^ 1'd1);

assign p_shl1_cast_fu_338_p1 = tmp_s_fu_331_p3;

assign p_shl_cast_fu_358_p1 = tmp_fu_351_p3;

assign r_fu_280_p2 = (Row_assign_mid_fu_206_p3 + 2'd1);

assign sum_mult_address0 = tmp_30_cast_fu_399_p1;

assign tmp3_fu_220_p2 = ((ap_phi_mux_Col_assign_2_phi_fu_131_p4 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_11_mid2_cast_fu_348_p1 = tmp_11_mid2_reg_433;

assign tmp_11_mid2_fu_300_p3 = ((exitcond_mid_fu_274_p2[0:0] === 1'b1) ? r_fu_280_p2 : Row_assign_mid_fu_206_p3);

assign tmp_17_fu_342_p2 = (p_shl1_cast_fu_338_p1 - tmp_i_i_mid2_cast_fu_328_p1);

assign tmp_18_fu_286_p2 = (exitcond_mid_fu_274_p2 | exitcond_flatten_fu_200_p2);

assign tmp_19_fu_362_p2 = (p_shl_cast_fu_358_p1 - tmp_11_mid2_cast_fu_348_p1);

assign tmp_20_fu_368_p2 = (tmp_i_i_mid2_cast_fu_328_p1 + tmp_19_fu_362_p2);

assign tmp_21_fu_382_p2 = (tmp_i_i4_cast_fu_379_p1 + tmp_17_fu_342_p2);

assign tmp_22_fu_393_p2 = (tmp_i_i4_cast_fu_379_p1 + tmp_19_fu_362_p2);

assign tmp_28_cast_fu_374_p1 = tmp_20_fu_368_p2;

assign tmp_29_cast_fu_388_p1 = $signed(tmp_21_fu_382_p2);

assign tmp_2_fu_240_p2 = ((ap_phi_mux_Col_assign_2_phi_fu_131_p4 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_30_cast_fu_399_p1 = tmp_22_reg_460_pp0_iter4_reg;

assign tmp_fu_351_p3 = {{tmp_11_mid2_reg_433}, {2'd0}};

assign tmp_i_i4_cast_fu_379_p1 = Col_assign_mid2_reg_428;

assign tmp_i_i_mid2_cast_fu_328_p1 = tmp_i_i_mid2_v_reg_421;

assign tmp_i_i_mid2_v_fu_254_p3 = ((exitcond_flatten_fu_200_p2[0:0] === 1'b1) ? k_fu_194_p2 : ap_phi_mux_Col_assign_2_phi_fu_131_p4);

assign tmp_mid1_12_fu_234_p2 = ((k_fu_194_p2 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_mid1_fu_214_p2 = ((k_fu_194_p2 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_mid2_13_fu_246_p3 = ((exitcond_flatten_fu_200_p2[0:0] === 1'b1) ? tmp_mid1_12_fu_234_p2 : tmp_2_fu_240_p2);

assign tmp_mid2_fu_226_p3 = ((exitcond_flatten_fu_200_p2[0:0] === 1'b1) ? tmp_mid1_fu_214_p2 : tmp3_fu_220_p2);

assign tmp_s_fu_331_p3 = {{tmp_i_i_mid2_v_reg_421}, {2'd0}};

endmodule //matrix_multiply_alt2
// ==============================================================
// File generated on Sun Apr 28 11:35:25 -0500 2019
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
// SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
// IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================


module matrix_multiply_tcud
#(parameter
    ID         = 1,
    NUM_STAGE  = 5,
    din0_WIDTH = 32,
    din1_WIDTH = 32,
    dout_WIDTH = 32
)(
    input   wire                  clk,
    input   wire                  reset,
    input   wire                  ce,
    input   wire [din0_WIDTH-1:0] din0,
    input   wire [din1_WIDTH-1:0] din1,
    output  wire [dout_WIDTH-1:0] dout
);
//------------------------Local signal-------------------
wire                  aclk;
wire                  aclken;
wire                  a_tvalid;
wire [31:0]           a_tdata;
wire                  b_tvalid;
wire [31:0]           b_tdata;
wire                  r_tvalid;
wire [31:0]           r_tdata;
reg  [din0_WIDTH-1:0] din0_buf1;
reg  [din1_WIDTH-1:0] din1_buf1;
reg                   ce_r;
wire [dout_WIDTH-1:0] dout_i;
reg  [dout_WIDTH-1:0] dout_r;
//------------------------Instantiation------------------
matrix_multiply_top_ap_fadd_3_full_dsp_32 matrix_multiply_top_ap_fadd_3_full_dsp_32_u (
    .aclk                 ( aclk ),
    .aclken               ( aclken ),
    .s_axis_a_tvalid      ( a_tvalid ),
    .s_axis_a_tdata       ( a_tdata ),
    .s_axis_b_tvalid      ( b_tvalid ),
    .s_axis_b_tdata       ( b_tdata ),
    .m_axis_result_tvalid ( r_tvalid ),
    .m_axis_result_tdata  ( r_tdata )
);
//------------------------Body---------------------------
assign aclk     = clk;
assign aclken   = ce_r;
assign a_tvalid = 1'b1;
assign a_tdata  = din0_buf1;
assign b_tvalid = 1'b1;
assign b_tdata  = din1_buf1;
assign dout_i   = r_tdata;

always @(posedge clk) begin
    if (ce) begin
        din0_buf1 <= din0;
        din1_buf1 <= din1;
    end
end

always @ (posedge clk) begin
    ce_r <= ce;
end

always @ (posedge clk) begin
    if (ce_r) begin
        dout_r <= dout_i;
    end
end

assign dout = ce_r?dout_i:dout_r;
endmodule
// ==============================================================
// File generated on Sun Apr 28 11:35:25 -0500 2019
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
// SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
// IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================


module matrix_multiply_tdEe
#(parameter
    ID         = 2,
    NUM_STAGE  = 4,
    din0_WIDTH = 32,
    din1_WIDTH = 32,
    dout_WIDTH = 32
)(
    input   wire                  clk,
    input   wire                  reset,
    input   wire                  ce,
    input   wire [din0_WIDTH-1:0] din0,
    input   wire [din1_WIDTH-1:0] din1,
    output  wire [dout_WIDTH-1:0] dout
);
//------------------------Local signal-------------------
wire                  aclk;
wire                  aclken;
wire                  a_tvalid;
wire [31:0]           a_tdata;
wire                  b_tvalid;
wire [31:0]           b_tdata;
wire                  r_tvalid;
wire [31:0]           r_tdata;
reg  [din0_WIDTH-1:0] din0_buf1;
reg  [din1_WIDTH-1:0] din1_buf1;
reg                   ce_r;
wire [dout_WIDTH-1:0] dout_i;
reg  [dout_WIDTH-1:0] dout_r;
//------------------------Instantiation------------------
matrix_multiply_top_ap_fmul_2_max_dsp_32 matrix_multiply_top_ap_fmul_2_max_dsp_32_u (
    .aclk                 ( aclk ),
    .aclken               ( aclken ),
    .s_axis_a_tvalid      ( a_tvalid ),
    .s_axis_a_tdata       ( a_tdata ),
    .s_axis_b_tvalid      ( b_tvalid ),
    .s_axis_b_tdata       ( b_tdata ),
    .m_axis_result_tvalid ( r_tvalid ),
    .m_axis_result_tdata  ( r_tdata )
);
//------------------------Body---------------------------
assign aclk     = clk;
assign aclken   = ce_r;
assign a_tvalid = 1'b1;
assign a_tdata  = din0_buf1;
assign b_tvalid = 1'b1;
assign b_tdata  = din1_buf1;
assign dout_i   = r_tdata;

always @(posedge clk) begin
    if (ce) begin
        din0_buf1 <= din0;
        din1_buf1 <= din1;
    end
end

always @ (posedge clk) begin
    ce_r <= ce;
end

always @ (posedge clk) begin
    if (ce_r) begin
        dout_r <= dout_i;
    end
end

assign dout = ce_r?dout_i:dout_r;
endmodule
// ==============================================================
// File generated on Sun Apr 28 11:35:25 -0500 2019
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
// SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
// IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================
module matrix_multiply_teOg_ram (addr0, ce0, d0, we0, q0,  clk);

parameter DWIDTH = 32;
parameter AWIDTH = 4;
parameter MEM_SIZE = 9;

input [AWIDTH-1:0] addr0;
input  ce0;
input [DWIDTH-1:0] d0;
input  we0;
output  reg[DWIDTH-1:0] q0;
input  clk;

reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];




always @(posedge clk)  
begin 
    if (ce0) 
    begin
        if (we0) 
        begin 
            ram[addr0] <= d0; 
        end 
        q0 <= ram[addr0];
    end
end


endmodule

module matrix_multiply_teOg(
    reset,
    clk,
    address0,
    ce0,
    we0,
    d0,
    q0);

parameter DataWidth = 32'd32;
parameter AddressRange = 32'd9;
parameter AddressWidth = 32'd4;
input  reset;
input  clk;
input [AddressWidth - 1:0] address0;
input  ce0;
input  we0;
input [DataWidth - 1:0] d0;
output [DataWidth - 1:0] q0;



matrix_multiply_teOg_ram matrix_multiply_teOg_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .we0( we0 ),
    .d0( d0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================




module matrix_multiply_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input    ap_clk;
input    ap_rst;
input    ap_start;
output    ap_done;
output    ap_idle;
output    ap_ready;
output   [3:0] A_address0;
output    A_ce0;
input   [31:0] A_q0;
output   [3:0] B_address0;
output    B_ce0;
input   [31:0] B_q0;
output   [3:0] C_address0;
output    C_ce0;
output    C_we0;
output   [31:0] C_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;

 reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] r_1_fu_217_p2;
reg   [1:0] r_1_reg_394;
wire    ap_CS_fsm_state2;
wire   [4:0] tmp_4_fu_239_p2;
reg   [4:0] tmp_4_reg_399;
wire   [0:0] tmp_fu_211_p2;
wire   [1:0] c_1_fu_251_p2;
reg   [1:0] c_1_reg_407;
wire    ap_CS_fsm_state3;
wire  signed [63:0] tmp_18_cast_fu_266_p1;
reg  signed [63:0] tmp_18_cast_reg_412;
wire   [0:0] tmp_3_fu_245_p2;
wire   [1:0] r_2_fu_277_p2;
reg   [1:0] r_2_reg_425;
wire    ap_CS_fsm_state5;
wire   [4:0] tmp_10_fu_299_p2;
reg   [4:0] tmp_10_reg_430;
wire   [0:0] tmp_2_fu_271_p2;
wire   [1:0] c_2_fu_311_p2;
reg   [1:0] c_2_reg_438;
wire    ap_CS_fsm_state6;
wire  signed [63:0] tmp_21_cast_fu_326_p1;
reg  signed [63:0] tmp_21_cast_reg_443;
wire   [0:0] tmp_9_fu_305_p2;
wire   [1:0] r_3_fu_337_p2;
reg   [1:0] r_3_reg_456;
wire    ap_CS_fsm_state9;
wire   [4:0] tmp_14_fu_359_p2;
reg   [4:0] tmp_14_reg_461;
wire   [0:0] tmp_8_fu_331_p2;
wire   [1:0] c_3_fu_371_p2;
reg   [1:0] c_3_reg_469;
wire    ap_CS_fsm_state10;
wire  signed [63:0] tmp_22_cast_fu_386_p1;
reg  signed [63:0] tmp_22_cast_reg_474;
wire   [0:0] tmp_7_fu_365_p2;
reg   [3:0] a_i_address0;
reg    a_i_ce0;
reg    a_i_we0;
wire   [31:0] a_i_q0;
reg   [3:0] b_i_address0;
reg    b_i_ce0;
reg    b_i_we0;
wire   [31:0] b_i_q0;
reg   [3:0] C_assign_address0;
reg    C_assign_ce0;
reg    C_assign_we0;
wire   [31:0] C_assign_q0;
wire    grp_matrix_multiply_alt2_fu_204_ap_start;
wire    grp_matrix_multiply_alt2_fu_204_ap_done;
wire    grp_matrix_multiply_alt2_fu_204_ap_idle;
wire    grp_matrix_multiply_alt2_fu_204_ap_ready;
wire   [3:0] grp_matrix_multiply_alt2_fu_204_A_address0;
wire    grp_matrix_multiply_alt2_fu_204_A_ce0;
wire   [3:0] grp_matrix_multiply_alt2_fu_204_B_address0;
wire    grp_matrix_multiply_alt2_fu_204_B_ce0;
wire   [3:0] grp_matrix_multiply_alt2_fu_204_C_address0;
wire    grp_matrix_multiply_alt2_fu_204_C_ce0;
wire    grp_matrix_multiply_alt2_fu_204_C_we0;
wire   [31:0] grp_matrix_multiply_alt2_fu_204_C_d0;
reg   [1:0] r_reg_138;
reg   [1:0] c_reg_149;
wire    ap_CS_fsm_state4;
reg   [1:0] r1_reg_160;
reg   [1:0] c2_reg_171;
wire    ap_CS_fsm_state7;
reg   [1:0] r3_reg_182;
wire    ap_CS_fsm_state8;
reg   [1:0] c4_reg_193;
wire    ap_CS_fsm_state11;
reg    grp_matrix_multiply_alt2_fu_204_ap_start_reg;
wire   [3:0] tmp_1_fu_227_p3;
wire   [4:0] p_shl_cast_fu_235_p1;
wire   [4:0] tmp_1_cast_fu_223_p1;
wire   [4:0] tmp_6_cast_fu_257_p1;
wire   [4:0] tmp_11_fu_261_p2;
wire   [3:0] tmp_6_fu_287_p3;
wire   [4:0] p_shl1_cast_fu_295_p1;
wire   [4:0] tmp_4_cast_fu_283_p1;
wire   [4:0] tmp_5_cast_fu_317_p1;
wire   [4:0] tmp_15_fu_321_p2;
wire   [3:0] tmp_13_fu_347_p3;
wire   [4:0] p_shl2_cast_fu_355_p1;
wire   [4:0] tmp_cast_fu_343_p1;
wire   [4:0] tmp_10_cast_fu_377_p1;
wire   [4:0] tmp_16_fu_381_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_matrix_multiply_alt2_fu_204_ap_start_reg = 1'b0;
end

matrix_multiply_teOg #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
a_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(a_i_address0),
    .ce0(a_i_ce0),
    .we0(a_i_we0),
    .d0(A_q0),
    .q0(a_i_q0)
);

matrix_multiply_teOg #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
b_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_i_address0),
    .ce0(b_i_ce0),
    .we0(b_i_we0),
    .d0(B_q0),
    .q0(b_i_q0)
);

matrix_multiply_teOg #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
C_assign_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_assign_address0),
    .ce0(C_assign_ce0),
    .we0(C_assign_we0),
    .d0(grp_matrix_multiply_alt2_fu_204_C_d0),
    .q0(C_assign_q0)
);

matrix_multiply_alt2 grp_matrix_multiply_alt2_fu_204(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matrix_multiply_alt2_fu_204_ap_start),
    .ap_done(grp_matrix_multiply_alt2_fu_204_ap_done),
    .ap_idle(grp_matrix_multiply_alt2_fu_204_ap_idle),
    .ap_ready(grp_matrix_multiply_alt2_fu_204_ap_ready),
    .A_address0(grp_matrix_multiply_alt2_fu_204_A_address0),
    .A_ce0(grp_matrix_multiply_alt2_fu_204_A_ce0),
    .A_q0(a_i_q0),
    .B_address0(grp_matrix_multiply_alt2_fu_204_B_address0),
    .B_ce0(grp_matrix_multiply_alt2_fu_204_B_ce0),
    .B_q0(b_i_q0),
    .C_address0(grp_matrix_multiply_alt2_fu_204_C_address0),
    .C_ce0(grp_matrix_multiply_alt2_fu_204_C_ce0),
    .C_we0(grp_matrix_multiply_alt2_fu_204_C_we0),
    .C_d0(grp_matrix_multiply_alt2_fu_204_C_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matrix_multiply_alt2_fu_204_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_2_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_matrix_multiply_alt2_fu_204_ap_start_reg <= 1'b1;
        end else if ((grp_matrix_multiply_alt2_fu_204_ap_ready == 1'b1)) begin
            grp_matrix_multiply_alt2_fu_204_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c2_reg_171 <= c_2_reg_438;
    end else if (((tmp_2_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        c2_reg_171 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c4_reg_193 <= c_3_reg_469;
    end else if (((tmp_8_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        c4_reg_193 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_149 <= c_1_reg_407;
    end else if (((tmp_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_reg_149 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        r1_reg_160 <= 2'd0;
    end else if (((tmp_9_fu_305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        r1_reg_160 <= r_2_reg_425;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_7_fu_365_p2 == 1'd1))) begin
        r3_reg_182 <= r_3_reg_456;
    end else if (((1'b1 == ap_CS_fsm_state8) & (grp_matrix_multiply_alt2_fu_204_ap_done == 1'b1))) begin
        r3_reg_182 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_reg_138 <= r_1_reg_394;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_reg_138 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_1_reg_407 <= c_1_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_2_reg_438 <= c_2_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        c_3_reg_469 <= c_3_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_1_reg_394 <= r_1_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        r_2_reg_425 <= r_2_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_3_reg_456 <= r_3_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_10_reg_430 <= tmp_10_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_14_reg_461 <= tmp_14_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_18_cast_reg_412 <= tmp_18_cast_fu_266_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_fu_305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_21_cast_reg_443 <= tmp_21_cast_fu_326_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_22_cast_reg_474 <= tmp_22_cast_fu_386_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_4_reg_399 <= tmp_4_fu_239_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_assign_address0 = tmp_22_cast_fu_386_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_assign_address0 = grp_matrix_multiply_alt2_fu_204_C_address0;
    end else begin
        C_assign_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_assign_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_assign_ce0 = grp_matrix_multiply_alt2_fu_204_C_ce0;
    end else begin
        C_assign_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        C_assign_we0 = grp_matrix_multiply_alt2_fu_204_C_we0;
    end else begin
        C_assign_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_i_address0 = tmp_18_cast_reg_412;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        a_i_address0 = grp_matrix_multiply_alt2_fu_204_A_address0;
    end else begin
        a_i_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_i_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        a_i_ce0 = grp_matrix_multiply_alt2_fu_204_A_ce0;
    end else begin
        a_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_i_we0 = 1'b1;
    end else begin
        a_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_8_fu_331_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_8_fu_331_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b_i_address0 = tmp_21_cast_reg_443;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        b_i_address0 = grp_matrix_multiply_alt2_fu_204_B_address0;
    end else begin
        b_i_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b_i_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        b_i_ce0 = grp_matrix_multiply_alt2_fu_204_B_ce0;
    end else begin
        b_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b_i_we0 = 1'b1;
    end else begin
        b_i_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_3_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_2_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((tmp_9_fu_305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_matrix_multiply_alt2_fu_204_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_8_fu_331_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (tmp_7_fu_365_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_18_cast_fu_266_p1;

assign B_address0 = tmp_21_cast_fu_326_p1;

assign C_address0 = tmp_22_cast_reg_474;

assign C_d0 = C_assign_q0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_1_fu_251_p2 = (c_reg_149 + 2'd1);

assign c_2_fu_311_p2 = (c2_reg_171 + 2'd1);

assign c_3_fu_371_p2 = (c4_reg_193 + 2'd1);

assign grp_matrix_multiply_alt2_fu_204_ap_start = grp_matrix_multiply_alt2_fu_204_ap_start_reg;

assign p_shl1_cast_fu_295_p1 = tmp_6_fu_287_p3;

assign p_shl2_cast_fu_355_p1 = tmp_13_fu_347_p3;

assign p_shl_cast_fu_235_p1 = tmp_1_fu_227_p3;

assign r_1_fu_217_p2 = (r_reg_138 + 2'd1);

assign r_2_fu_277_p2 = (r1_reg_160 + 2'd1);

assign r_3_fu_337_p2 = (r3_reg_182 + 2'd1);

assign tmp_10_cast_fu_377_p1 = c4_reg_193;

assign tmp_10_fu_299_p2 = (p_shl1_cast_fu_295_p1 - tmp_4_cast_fu_283_p1);

assign tmp_11_fu_261_p2 = (tmp_4_reg_399 + tmp_6_cast_fu_257_p1);

assign tmp_13_fu_347_p3 = {{r3_reg_182}, {2'd0}};

assign tmp_14_fu_359_p2 = (p_shl2_cast_fu_355_p1 - tmp_cast_fu_343_p1);

assign tmp_15_fu_321_p2 = (tmp_10_reg_430 + tmp_5_cast_fu_317_p1);

assign tmp_16_fu_381_p2 = (tmp_14_reg_461 + tmp_10_cast_fu_377_p1);

assign tmp_18_cast_fu_266_p1 = $signed(tmp_11_fu_261_p2);

assign tmp_1_cast_fu_223_p1 = r_reg_138;

assign tmp_1_fu_227_p3 = {{r_reg_138}, {2'd0}};

assign tmp_21_cast_fu_326_p1 = $signed(tmp_15_fu_321_p2);

assign tmp_22_cast_fu_386_p1 = $signed(tmp_16_fu_381_p2);

assign tmp_2_fu_271_p2 = ((r1_reg_160 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_3_fu_245_p2 = ((c_reg_149 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_4_cast_fu_283_p1 = r1_reg_160;

assign tmp_4_fu_239_p2 = (p_shl_cast_fu_235_p1 - tmp_1_cast_fu_223_p1);

assign tmp_5_cast_fu_317_p1 = c2_reg_171;

assign tmp_6_cast_fu_257_p1 = c_reg_149;

assign tmp_6_fu_287_p3 = {{r1_reg_160}, {2'd0}};

assign tmp_7_fu_365_p2 = ((c4_reg_193 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_8_fu_331_p2 = ((r3_reg_182 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_9_fu_305_p2 = ((c2_reg_171 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_cast_fu_343_p1 = r3_reg_182;

assign tmp_fu_211_p2 = ((r_reg_138 == 2'd3) ? 1'b1 : 1'b0);

endmodule //matrix_multiply_top
