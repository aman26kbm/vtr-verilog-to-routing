<!--
    This is the architecture file for a Stratix-10-like Architecture discussed in [1].
    Delays for routing and logic blocks come from COFFE runs for a 20 nm technology node.
    Delays for DSP slice and matmul also come from COFFE runs on 20nm.

    BRAM (M20k) delays and area come from extrapolation of delays from Stratix IV (M32k) 
    and Stratix III (M144k) and then scaling down to 20nm. See details in the BRAM section.

    Tile grid area, CLB area come from COFFE (20 nm).
    Area for DSP slice and matmul also come from COFFE runs on 20nm.
    No area values area provided for the IOs.

    This architecture has 10 ALMs per cluster, where each ALM is a 6-LUT fracturable into
    two 5-LUTs. The ALM has 8 inputs and 4 optionally registered outputs.The two 5-LUTs should
    share at least two inputs. Each two ALM outputs are logically equivalent, which means any
    output signal that can reach ALM.out[0] can reach ALM.out[1] and the same thing for
    ALM.out[2] and ALM.out[3]. The ALMs in this architecture have an arithmetic mode
    where each 5-LUT is fractured into two 4-LUTs, resulting in a total of four 4-LUTs and two
    bits of addition per ALM. This architecture has a single carry chain that spans the 10 ALMs
    in the LAB.

    The LAB has 60 inputs and 40 outputs. Two outputs of each ALM are fed to the right and
    left LAB using direct links and are also fed back to the LAB as feedback connections sharing
    the 60 input ports with the signals coming from the routing channels.

    The architecture also has a 20Kb memory that has true and simple dual port modes. In simple
    dual port mode the memory can be configured in the following modes: 512x40, 1024x20 and 2048x10,
    while in true dual port mode it can be configured as: 1024x20 and 2028x10.

    In addition, the architecture has a 27x27 DSP block that can be fractured into two 18x19 DSPs.

    [1] M. Eldafrawy, A. Boutros, S. Yazdanshenas, and V. Betz, "FPGA Logic Block Architectures for
        Efficient Deep Learning Inference," in Transactions on Reconfigurable Technology and Systems
        (TRETS), 2020

-->
<architecture>
  <!-- 
         ODIN II specific config begins 
         Describes the types of user-specified netlist blocks (in blif, this corresponds to 
         ".model [type_of_block]") that this architecture supports.

         Note: Basic LUTs, I/Os, and flip-flops are not included here as there are 
         already special structures in blif (.names, .input, .output, and .latch) 
         that describe them.
    -->
  <models>
    <model name="single_port_ram">
      <input_ports>
        <port name="we" clock="clk"/>
        <!-- control -->
        <port name="addr" clock="clk"/>
        <!-- address lines -->
        <port name="data" clock="clk"/>
        <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="clk" is_clock="1"/>
        <!-- memories are often clocked -->
      </input_ports>
      <output_ports>
        <port name="out" clock="clk"/>
        <!-- output can be broken down into smaller bit widths minimum size 1 -->
      </output_ports>
    </model>
    <model name="dual_port_ram">
      <input_ports>
        <port name="we1" clock="clk"/>
        <!-- write enable -->
        <port name="we2" clock="clk"/>
        <!-- write enable -->
        <port name="addr1" clock="clk"/>
        <!-- address lines -->
        <port name="addr2" clock="clk"/>
        <!-- address lines -->
        <port name="data1" clock="clk"/>
        <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="data2" clock="clk"/>
        <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
        <port name="clk" is_clock="1"/>
        <!-- memories are often clocked -->
      </input_ports>
      <output_ports>
        <port name="out1" clock="clk"/>
        <!-- output can be broken down into smaller bit widths minimum size 1 -->
        <port name="out2" clock="clk"/>
        <!-- output can be broken down into smaller bit widths minimum size 1 -->
      </output_ports>
    </model>
    <!-- Used inside DSPs and individual PE mode of matmul. 
         Fixed point multiplication.
         ODIN infers these when * sign appears in RTL. -->
    <model name="multiply">
      <input_ports>
        <port name="a" combinational_sink_ports="out"/>
        <port name="b" combinational_sink_ports="out"/>
      </input_ports>
      <output_ports>
        <port name="out"/>
      </output_ports>
    </model>
    <model name="multiply_fp">
      <input_ports>
        <port name="a" combinational_sink_ports="out"/>
        <port name="b" combinational_sink_ports="out"/>
      </input_ports>
      <output_ports>
        <port name="out"/>
      </output_ports>
    </model>   
    <!-- Only used inside CLBs for 1-bit adder.
         ODIN infers these when + sign appears in RTL.
         Can't use this inside DSP slice or individual PE mode of matmul
         because ODIN gets confused and starts to connect multi
         bit adders and single bit adders in different PBs -->
    <model name="adder">
      <input_ports>
        <port name="a" combinational_sink_ports="cout sumout"/>
        <port name="b" combinational_sink_ports="cout sumout"/>
        <port name="cin" combinational_sink_ports="cout sumout"/>
      </input_ports>
      <output_ports>
        <port name="cout"/>
        <port name="sumout"/>
      </output_ports>
    </model>
    <!-- Multi bit adder inside DSP slices -->
    <model name="adder_int">
      <input_ports>
        <port name="a" combinational_sink_ports="out"/>
        <port name="b" combinational_sink_ports="out"/>
      </input_ports>
      <output_ports>
        <port name="out"/>
      </output_ports>
    </model>
    <model name="adder_fp">
      <input_ports>
        <port name="a" combinational_sink_ports="out"/>
        <port name="b" combinational_sink_ports="out"/>
      </input_ports>
      <output_ports>
        <port name="out"/>
      </output_ports>
    </model>
    <model name="mult_add_sum_int">
      <input_ports>
        <port name="ax" combinational_sink_ports="resulta"/>
        <port name="ay" combinational_sink_ports="resulta"/>
        <port name="bx" combinational_sink_ports="resulta"/>
        <port name="by" combinational_sink_ports="resulta"/>
      </input_ports>
      <output_ports>
        <port name="resulta"/>
      </output_ports>
    </model>
    <model name="mac_fp">
      <input_ports>
        <port name="a" combinational_sink_ports="out"/>
        <port name="b" combinational_sink_ports="out"/>
      </input_ports>
      <output_ports>
        <port name="out"/>
      </output_ports>
    </model>
    <model name="mac_int">
      <input_ports>
        <port name="a" combinational_sink_ports="out"/>
        <port name="b" combinational_sink_ports="out"/>
      </input_ports>
      <output_ports>
        <port name="out"/>
      </output_ports>
    </model>
    <model name="matmul_fp16">
      <input_ports>
        <port name="clk" is_clock="1"/>  
        <port name="reset" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available"/>
        <port name="pe_reset" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available"/>
        <port name="start_mat_mul" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="address_mat_a" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="address_mat_b" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="address_mat_c" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="address_stride_a" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="address_stride_b" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="address_stride_c" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="a_data" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="b_data" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="a_data_in" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="b_data_in" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="c_data_in" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="validity_mask_a_rows" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="validity_mask_a_cols_b_rows" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="validity_mask_b_cols" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="final_mat_mul_size" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="a_loc" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="b_loc" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="slice_dtype" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="slice_mode" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
      </input_ports>
      <output_ports>
        <port name="done_mat_mul" clock="clk"/>
        <port name="a_data_out" clock="clk"/>
        <port name="b_data_out" clock="clk"/>
        <port name="c_data_out" clock="clk"/>
        <port name="c_data_out_dir_int" clock="clk"/>
        <port name="a_addr" clock="clk"/>
        <port name="b_addr" clock="clk"/>
        <port name="c_addr" clock="clk"/>
        <port name="c_data_available" clock="clk"/>
      </output_ports>
    </model>
    <model name="matmul_int8">
      <input_ports>
        <port name="clk" is_clock="1"/>  
        <port name="reset" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available"/>
        <port name="pe_reset" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available"/>
        <port name="start_mat_mul" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="address_mat_a" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="address_mat_b" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="address_mat_c" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="address_stride_a" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="address_stride_b" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="address_stride_c" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="a_data" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="b_data" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="a_data_in" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="b_data_in" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="c_data_in" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="validity_mask_a_rows" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="validity_mask_a_cols_b_rows" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="validity_mask_b_cols" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="final_mat_mul_size" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="a_loc" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="b_loc" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="slice_dtype" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
        <port name="slice_mode" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out c_data_out_dir_int a_addr b_addr c_addr c_data_available" />
      </input_ports>
      <output_ports>
        <port name="done_mat_mul" clock="clk"/>
        <port name="a_data_out" clock="clk"/>
        <port name="b_data_out" clock="clk"/>
        <port name="c_data_out" clock="clk"/>
        <port name="c_data_out_dir_int" clock="clk"/>
        <port name="a_addr" clock="clk"/>
        <port name="b_addr" clock="clk"/>
        <port name="c_addr" clock="clk"/>
        <port name="c_data_available" clock="clk"/>
      </output_ports>
    </model>

  </models>
  <tiles>
    <tile name="io" area="0">
      <sub_tile name="io" capacity="8">
        <equivalent_sites>
          <site pb_type="io" pin_mapping="direct"/>
        </equivalent_sites>
        <input name="outpad" num_pins="1"/>
        <output name="inpad" num_pins="1"/>
        <clock name="clock" num_pins="1"/>
        <fc in_type="frac" in_val="0.15" out_type="frac" out_val="0.10"/>
        <pinlocations pattern="custom">
          <loc side="left">io.outpad io.inpad io.clock</loc>
          <loc side="top">io.outpad io.inpad io.clock</loc>
          <loc side="right">io.outpad io.inpad io.clock</loc>
          <loc side="bottom">io.outpad io.inpad io.clock</loc>
        </pinlocations>
      </sub_tile>
    </tile>
    <!-- TODO: Add area from COFFE-->
    <tile name="clb" height="1" width="1" area="0">
      <sub_tile name="clb">
        <equivalent_sites>
          <site pb_type="clb" pin_mapping="direct"/>
        </equivalent_sites>
        <input name="I1" num_pins="15" equivalent="full"/>
        <input name="I2" num_pins="15" equivalent="full"/>
        <input name="I3" num_pins="15" equivalent="full"/>
        <input name="I4" num_pins="15" equivalent="full"/>
        <input name="cin" num_pins="1"/>
        <output name="O" num_pins="40" equivalent="none"/>
        <output name="cout" num_pins="1"/>
        <clock name="clk" num_pins="1"/>
        <fc in_type="frac" in_val="0.15" out_type="frac" out_val="0.10">
          <fc_override port_name="cin" fc_type="frac" fc_val="0"/>
          <fc_override port_name="cout" fc_type="frac" fc_val="0"/>
        </fc>
        <pinlocations pattern="spread"/>
      </sub_tile>
    </tile>
    <!-- TODO: Add area from COFFE-->
    <tile name="dsp" height="2" width="1" area="0">
      <sub_tile name="dsp">
        <equivalent_sites>
          <site pb_type="dsp" pin_mapping="direct"/>
        </equivalent_sites>
        <input name="datain" num_pins="74"/>
        <output name="dataout" num_pins="74"/>
        <fc in_type="frac" in_val="0.15" out_type="frac" out_val="0.10"/>
        <pinlocations pattern="spread"/>
      </sub_tile>
    </tile>
    <!-- TODO: Add area from COFFE-->
    <tile name="memory" height="4" width="1" area="0">
      <sub_tile name="memory">
        <equivalent_sites>
          <site pb_type="memory" pin_mapping="direct"/>
        </equivalent_sites>
        <input name="addr1" num_pins="11"/>
        <input name="addr2" num_pins="11"/>
        <input name="data" num_pins="40"/>
        <input name="we1" num_pins="1"/>
        <input name="we2" num_pins="1"/>
        <output name="out" num_pins="40"/>
        <clock name="clk" num_pins="1"/>
        <fc in_type="frac" in_val="0.15" out_type="frac" out_val="0.10"/>
        <pinlocations pattern="spread"/>
      </sub_tile>
    </tile>
    <!-- TODO: Need to update the height, width, area of the matmul -->
    <tile name="matmul_top" height="4" width="4" area="365120">
      <sub_tile name="matmul_top">
        <equivalent_sites>
          <site pb_type="matmul_top" pin_mapping="direct"/>
        </equivalent_sites>
        <input name="reset" num_pins="1" is_non_clock_global="true"/>
        <input name="pe_reset" num_pins="1" is_non_clock_global="true"/>
        <input name="start_mat_mul" num_pins="1" is_non_clock_global="true"/>
        <input name="matmul_I1" num_pins="136" equivalent="full"/>
        <input name="matmul_I2" num_pins="138" equivalent="full"/>
        <input name="a_data_in" num_pins="64"/>
        <input name="b_data_in" num_pins="64"/>
        <input name="c_data_in" num_pins="64"/>
        <!--
        <input name="address_mat_a" num_pins="16"/>                 matmul_I1[135:120]
        <input name="address_mat_b" num_pins="16"/>                 matmul_I1[119:104]
        <input name="address_mat_c" num_pins="16"/>                 matmul_I1[103:88]
        <input name="address_stride_a" num_pins="16"/>              matmul_I1[87:72]
        <input name="address_stride_b" num_pins="16"/>              matmul_I1[71:56]
        <input name="address_stride_c" num_pins="16"/>              matmul_I1[55:40]
        <input name="validity_mask_a_rows" num_pins="8"/>           matmul_I1[39:32]
        <input name="validity_mask_a_cols_b_rows" num_pins="8"/>    matmul_I1[31:24]
        <input name="validity_mask_b_cols" num_pins="8"/>           matmul_I1[23:16]
        <input name="a_loc" num_pins="8"/>                          matmul_I1[15:8]
        <input name="b_loc" num_pins="8"/>                          matmul_I1[7:0]

        <input name="a_data" num_pins="64"/>                         matmul_I2[137:74]
        <input name="b_data" num_pins="64"/>                         matmul_I2[73:10]
        <input name="slice_dtype" num_pins="1"/>                     matmul_I2[9]
        <input name="slice_mode" num_pins="1"/>                      matmul_I2[8]
        <input name="final_mat_mul_size" num_pins="8"/>              matmul_I2[7:0]
        -->
        <output name="a_data_out" num_pins="64"/>
        <output name="b_data_out" num_pins="64"/>
        <output name="c_data_out" num_pins="64"/>
        <output name="c_data_out_dir_int" num_pins="64"/>
        <output name="done_mat_mul" num_pins="1"/>
        <output name="a_addr" num_pins="16"/>
        <output name="b_addr" num_pins="16"/>
        <output name="c_addr" num_pins="16"/>
        <output name="c_data_available" num_pins="1"/>
        <clock name="clk" num_pins="1"/>
        <fc in_type="frac" in_val="0.15" out_type="frac" out_val="0.10">
          <fc_override fc_type="frac" fc_val="0" port_name="a_data_in[63:0]"/>
          <fc_override fc_type="frac" fc_val="0" port_name="a_data_out[63:0]"/>
          <fc_override fc_type="frac" fc_val="0" port_name="b_data_in[63:0]"/>
          <fc_override fc_type="frac" fc_val="0" port_name="b_data_out[63:0]"/>
          <fc_override fc_type="frac" fc_val="0" port_name="c_data_in[63:0]"/>
          <fc_override fc_type="frac" fc_val="0" port_name="c_data_out_dir_int[63:0]"/>
        </fc>
        <!-- There are 776 IOs on the matmul_top. Dividing by 4, we get 194 pins on each side. -->
        <!-- The things we care about are a_data_in on left, a_data_out on right, b_data_in & c_data_in on top and b_data_out & c_data_out_dir_int on bottom -->
        <pinlocations pattern="spread"/>
        <!--
        <pinlocations pattern="custom">
          <loc side="left">  matmul_top.a_data_in[63:0]   matmul_top.a_addr[15:0]  matmul_top.pe_reset matmul_top.address_mat_a[15:0]   matmul_top.a_data[63:0]   matmul_top.slice_dtype matmul_top.slice_mode  matmul_top.validity_mask_a_cols_b_rows[7:0] matmul_top.address_stride_c[15:0] matmul_top.clk matmul_top.a_loc[7:0] </loc> 
          <loc side="top">   matmul_top.b_data_in[63:0]   matmul_top.c_data_in[63:0] matmul_top.b_data[63:0] matmul_top.start_mat_mul matmul_top.done_mat_mul </loc> 
          <loc side="right"> matmul_top.a_data_out[63:0]  matmul_top.c_addr[15:0]   matmul_top.c_data_available matmul_top.reset  matmul_top.b_addr[15:0]  matmul_top.address_mat_b[15:0]      matmul_top.address_mat_c[15:0]  matmul_top.c_data_out[63:0]</loc> 
          <loc side="bottom">matmul_top.b_data_out[63:0]  matmul_top.c_data_out_dir_int[63:0]  matmul_top.final_mat_mul_size[7:0] matmul_top.address_stride_a[15:0] matmul_top.address_stride_b[15:0]  matmul_top.validity_mask_a_rows[7:0]  matmul_top.validity_mask_b_cols[7:0] matmul_top.b_loc[7:0] </loc> 
        </pinlocations>
        -->
      </sub_tile>
    </tile>
  </tiles>
  <!-- ODIN II specific config ends -->
  <layout>
    <!-- Physical descriptions begin -->
    <auto_layout aspect_ratio="1.0">
      <!--Perimeter of 'io' blocks with 'EMPTY' blocks at corners-->
      <perimeter type="io" priority="100"/>
      <corners type="EMPTY" priority="101"/>
      <!--Fill with 'clb'-->
      <fill type="clb" priority="10"/>
      <!--Column of 'mult_27' with 'EMPTY' blocks wherever a 'mult_27' does not fit. Vertical offset by 1 for perimeter.-->
      <col type="dsp" startx="6" starty="1" repeatx="8" priority="20"/>
      <col type="EMPTY" startx="6" repeatx="8" starty="1" priority="19"/>
      <!--Column of 'memory' with 'EMPTY' blocks wherever a 'memory' does not fit. Vertical offset by 1 for perimeter.-->
      <col type="memory" startx="2" starty="1" repeatx="8" priority="20"/>
      <col type="EMPTY" startx="2" repeatx="8" starty="1" priority="19"/>
      <!-- Matmul columns. TODO: Need to fix the locations of matmuls -->
      <!--
      <col type="matmul_top" startx="9" starty="1" repeatx="11" priority="30"/>
      -->
    </auto_layout>
  </layout>
  <device>
    <sizing R_minW_nmos="13090" R_minW_pmos="19086.83"/>
    <!-- TODO: Get from COFFE -->
    <area grid_logic_tile_area="23678.5"/>
    <chan_width_distr>
      <x distr="uniform" peak="1.000000"/>
      <y distr="uniform" peak="1.000000"/>
    </chan_width_distr>
    <switch_block type="wilton" fs="3"/>
    <connection_block input_switch_name="ipin_cblock"/>
  </device>
  <switchlist>
    <switch type="mux" name="0" R="0.0" Cin="0.0" Cout="0.0" Tdel="230.9e-12" mux_trans_size="2.173" buf_size="36.6"/>
    <switch type="mux" name="ipin_cblock" R="0.0" Cout="0.0" Cin="0.0" Tdel="145e-12" mux_trans_size="1.508" buf_size="11.525"/>
    <!-- TODO: Need to verify that this switch is the right one to use for direct interconnect and if the switch's parameters are correct -->
    <switch type="mux" name="short_switch" R="0.0" Cin="0.0" Cout="0.0" Tdel="1e-12" mux_trans_size="0.0" buf_size="0.0"/>
  </switchlist>
  <segmentlist>
    <segment freq="1.000000" length="4" type="unidir" Rmetal="0.0" Cmetal="0.0">
      <mux name="0"/>
      <sb type="pattern">1 1 1 1 1</sb>
      <cb type="pattern">1 1 1 1</cb>
    </segment>
  </segmentlist>
  <directlist>
    <direct name="adder_carry" from_pin="clb.cout" to_pin="clb.cin" x_offset="0" y_offset="-1" z_offset="0"/>
    <!-- Direct connect to left and right LAB -->
    <direct name="direct_right_1" from_pin="clb.O[4:0]" to_pin="clb.I1[9:5]" x_offset="1" y_offset="0" z_offset="0"/>
    <direct name="direct_right_2" from_pin="clb.O[24:20]" to_pin="clb.I2[9:5]" x_offset="1" y_offset="0" z_offset="0"/>
    <direct name="direct_right_3" from_pin="clb.O[9:5]" to_pin="clb.I3[9:5]" x_offset="1" y_offset="0" z_offset="0"/>
    <direct name="direct_right_4" from_pin="clb.O[29:25]" to_pin="clb.I4[9:5]" x_offset="1" y_offset="0" z_offset="0"/>
    <direct name="direct_left_1" from_pin="clb.O[14:10]" to_pin="clb.I1[14:10]" x_offset="-1" y_offset="0" z_offset="0"/>
    <direct name="direct_left_2" from_pin="clb.O[34:30]" to_pin="clb.I2[14:10]" x_offset="-1" y_offset="0" z_offset="0"/>
    <direct name="direct_left_3" from_pin="clb.O[19:15]" to_pin="clb.I3[14:10]" x_offset="-1" y_offset="0" z_offset="0"/>
    <direct name="direct_left_4" from_pin="clb.O[39:35]" to_pin="clb.I4[14:10]" x_offset="-1" y_offset="0" z_offset="0"/>
    <!-- Direct connect to left, right, top, bottom matmul slices -->
    <!-- TODO: Need to fix the offsets depending on location of matmuls-->
    <direct name="systolic_matmul_direct_interconnect_a" from_pin="matmul_top.a_data_out[63:0]" to_pin="matmul_top.a_data_in[63:0]" x_offset="11" y_offset="0" z_offset="0" switch_name="short_switch"/>
    <direct name="systolic_matmul_direct_interconnect_b" from_pin="matmul_top.b_data_out[63:0]" to_pin="matmul_top.b_data_in[63:0]" x_offset="0" y_offset="-3" z_offset="0" switch_name="short_switch"/>
    <direct name="systolic_matmul_direct_interconnect_c" from_pin="matmul_top.c_data_out_dir_int[63:0]" to_pin="matmul_top.c_data_in[63:0]" x_offset="0" y_offset="-3" z_offset="0" switch_name="short_switch"/>
  </directlist>
  <complexblocklist>
    <!-- Define I/O pads begin -->
    <!-- Capacity is a unique property of I/Os, it is the maximum number of I/Os that can be placed at the same (X,Y) location on the FPGA -->
    <!-- Not sure of the area of an I/O (varies widely), and it's not relevant to the design of the FPGA core, so we're setting it to 0. -->
    <pb_type name="io">
      <input name="outpad" num_pins="1"/>
      <output name="inpad" num_pins="1"/>
      <clock name="clock" num_pins="1"/>
      <!-- IOs can operate as either inputs or outputs.
	     Delays below come from Ian Kuon. They are small, so they should be interpreted as
	     the delays to and from registers in the I/O (and generally I/Os are registered 
	     today and that is when you timing analyze them.
	     -->
      <mode name="inpad">
        <pb_type name="inpad" blif_model=".input" num_pb="1">
          <output name="inpad" num_pins="1"/>
        </pb_type>
        <interconnect>
          <direct name="inpad" input="inpad.inpad" output="io.inpad">
            <delay_constant max="4.243e-11" in_port="inpad.inpad" out_port="io.inpad"/>
          </direct>
        </interconnect>
      </mode>
      <mode name="outpad">
        <pb_type name="outpad" blif_model=".output" num_pb="1">
          <input name="outpad" num_pins="1"/>
        </pb_type>
        <interconnect>
          <direct name="outpad" input="io.outpad" output="outpad.outpad">
            <delay_constant max="1.394e-11" in_port="io.outpad" out_port="outpad.outpad"/>
          </direct>
        </interconnect>
      </mode>
      <!-- Every input pin is driven by 15% of the tracks in a channel, every output pin is driven by 10% of the tracks in a channel -->
      <!-- IOs go on the periphery of the FPGA, for consistency, 
          make it physically equivalent on all sides so that only one definition of I/Os is needed.
          If I do not make a physically equivalent definition, then I need to define 4 different I/Os, one for each side of the FPGA
        -->
      <!-- Place I/Os on the sides of the FPGA -->
      <power method="ignore"/>
    </pb_type>
    <!-- Define I/O pads ends -->
    <!-- Define general purpose logic block (CLB) begin -->
    <pb_type name="clb">
      <input name="I1" num_pins="15" equivalent="full"/>
      <input name="I2" num_pins="15" equivalent="full"/>
      <input name="I3" num_pins="15" equivalent="full"/>
      <input name="I4" num_pins="15" equivalent="full"/>
      <input name="cin" num_pins="1"/>
      <output name="O" num_pins="40" equivalent="none"/>
      <output name="cout" num_pins="1"/>
      <clock name="clk" num_pins="1"/>
      <pb_type name="lab" num_pb="1">
        <input name="I1" num_pins="15"/>
        <input name="I2" num_pins="15"/>
        <input name="I3" num_pins="15"/>
        <input name="I4" num_pins="15"/>
        <input name="cin" num_pins="1"/>
        <output name="O" num_pins="40"/>
        <output name="cout" num_pins="1"/>
        <clock name="clk" num_pins="1"/>
        <!-- Describe fracturable logic element.  
                 Each fracturable logic element has a 6-LUT that can alternatively operate as two 5-LUTs with shared inputs. 
                 The outputs of the fracturable logic element can be optionally registered
            -->
        <pb_type name="fle" num_pb="10">
          <input name="in" num_pins="8"/>
          <input name="cin" num_pins="1"/>
          <output name="out" num_pins="4"/>
          <output name="cout" num_pins="1"/>
          <clock name="clk" num_pins="1"/>
          <!-- 
                    The ALM inputs are as follows:
                            A -> fle[0]
                            B -> fle[1]
                            C -> fle[2]
                            D -> fle[3]
                            E -> fle[4]
                            F -> fle[5]
                            G -> fle[6]
                            H -> fle[7]
              -->
          <mode name="n2_lut5">
            <pb_type name="ble5" num_pb="2">
              <input name="in" num_pins="5"/>
              <input name="cin" num_pins="1"/>
              <output name="out" num_pins="2"/>
              <output name="cout" num_pins="1"/>
              <clock name="clk" num_pins="1"/>
              <mode name="blut5">
                <pb_type name="flut5" num_pb="1">
                  <input name="in" num_pins="5"/>
                  <output name="out" num_pins="2"/>
                  <clock name="clk" num_pins="1"/>
                  <!-- Regular LUT mode -->
                  <pb_type name="lut5" blif_model=".names" num_pb="1" class="lut">
                    <input name="in" num_pins="5" port_class="lut_in"/>
                    <output name="out" num_pins="1" port_class="lut_out"/>
                    <!-- LUT timing using delay matrix -->
                    <!-- These are the physical delay inputs on a Stratix 10 LUT but because VPR cannot do LUT rebalancing,
                             we instead take the average of these numbers to get more stable results
                             note that those are the same delays for inputs A - E as the ones used for the 6-LUT, however, we have 
                             subtracted the delay of the last mux stage to get the delay of inputs A - E till the 5-LUT output
                             210.96e-12
                             206.85e-12
                             143.46e-12
                             136.94e-12
                             68.12e-12
                          -->
                    <delay_matrix type="max" in_port="lut5.in" out_port="lut5.out">
                            153.27e-12
                            153.27e-12
                            153.27e-12
                            153.27e-12
                            153.27e-12
                        </delay_matrix>
                  </pb_type>
                  <pb_type name="ff" blif_model=".latch" num_pb="2" class="flipflop">
                    <input name="D" num_pins="1" port_class="D"/>
                    <output name="Q" num_pins="1" port_class="Q"/>
                    <clock name="clk" num_pins="1" port_class="clock"/>
                    <T_setup value="18.91e-12" port="ff.D" clock="clk"/>
                    <T_clock_to_Q max="60.32e-12" port="ff.Q" clock="clk"/>
                  </pb_type>
                  <interconnect>
                    <direct name="lut5_in" input="flut5.in" output="lut5.in"/>
                    <direct name="reg_in" input="flut5.in[0]" output="ff[0].D"/>
                    <direct name="lut5_ff" input="lut5.out" output="ff[1].D">
                      <delay_constant max="18.96e-12" in_port="lut5.out" out_port="ff[1].D"/>
                      <pack_pattern name="ble5" in_port="lut5.out" out_port="ff[1].D"/>
                    </direct>
                    <complete name="clock" input="flut5.clk" output="ff.clk"/>
                    <complete name="out_mux" input="ff.Q lut5.out" output="flut5.out">
                      <delay_constant max="39.85e-12" in_port="lut5.out" out_port="flut5.out"/>
                      <delay_constant max="39.85e-12" in_port="ff.Q" out_port="flut5.out"/>
                    </complete>
                  </interconnect>
                </pb_type>
                <interconnect>
                  <direct name="direct1" input="ble5.in" output="flut5.in"/>
                  <direct name="direct2" input="ble5.clk" output="flut5.clk"/>
                  <direct name="direct3" input="flut5.out" output="ble5.out"/>
                </interconnect>
              </mode>
              <mode name="arithmetic">
                <pb_type name="arithmetic" num_pb="1">
                  <input name="in" num_pins="4"/>
                  <input name="cin" num_pins="1"/>
                  <output name="out" num_pins="2"/>
                  <output name="cout" num_pins="1"/>
                  <clock name="clk" num_pins="1"/>
                  <!-- Special dual-LUT mode that drives adder only -->
                  <pb_type name="lut4" blif_model=".names" num_pb="2" class="lut">
                    <input name="in" num_pins="4" port_class="lut_in"/>
                    <output name="out" num_pins="1" port_class="lut_out"/>
                    <!-- LUT timing using delay matrix -->
                    <!-- These are the physical delay inputs on a Stratix 10 LUT but because VPR cannot do LUT rebalancing,
                           we instead take the average of these numbers to get more stable results
                           note that those are the same delays for inputs A - E as the ones used for the 6-LUT, however, we have 
                           subtracted the delay of the last mux stage to get the delay of inputs A - E till the 5-LUT output
                             168.12e-12
                             164.02e-12
                             100.63e-12
                             94.11e-12
                          -->
                    <delay_matrix type="max" in_port="lut4.in" out_port="lut4.out">
                            131.72e-12
                            131.72e-12
                            131.72e-12
                            131.72e-12
                        </delay_matrix>
                  </pb_type>
                  <pb_type name="adder" blif_model=".subckt adder" num_pb="1">
                    <input name="a" num_pins="1"/>
                    <input name="b" num_pins="1"/>
                    <input name="cin" num_pins="1"/>
                    <output name="cout" num_pins="1"/>
                    <output name="sumout" num_pins="1"/>
                    <delay_constant max="68.74e-12" in_port="adder.a" out_port="adder.sumout"/>
                    <delay_constant max="68.74e-12" in_port="adder.b" out_port="adder.sumout"/>
                    <delay_constant max="35.46e-12" in_port="adder.cin" out_port="adder.sumout"/>
                    <delay_constant max="49.32e-12" in_port="adder.a" out_port="adder.cout"/>
                    <delay_constant max="49.32e-12" in_port="adder.b" out_port="adder.cout"/>
                    <delay_constant max="25.56e-12" in_port="adder.cin" out_port="adder.cout"/>
                  </pb_type>
                  <pb_type name="ff" blif_model=".latch" num_pb="1" class="flipflop">
                    <input name="D" num_pins="1" port_class="D"/>
                    <output name="Q" num_pins="1" port_class="Q"/>
                    <clock name="clk" num_pins="1" port_class="clock"/>
                    <T_setup value="18.91e-12" port="ff.D" clock="clk"/>
                    <T_clock_to_Q max="60.32e-12" port="ff.Q" clock="clk"/>
                  </pb_type>
                  <interconnect>
                    <direct name="clock" input="arithmetic.clk" output="ff.clk"/>
                    <direct name="lut4_in1" input="arithmetic.in" output="lut4[0].in"/>
                    <direct name="lut4_in2" input="arithmetic.in" output="lut4[1].in"/>
                    <direct name="lut_to_add1" input="lut4[0:0].out" output="adder.a"/>
                    <direct name="lut_to_add2" input="lut4[1:1].out" output="adder.b"/>
                    <direct name="add_to_ff" input="adder.sumout" output="ff.D">
                      <delay_constant max="18.96e-12" in_port="adder.sumout" out_port="ff.D"/>
                      <!--pack_pattern name="chain" in_port="adder.sumout" out_port="ff.D"/-->
                    </direct>
                    <direct name="carry_in" input="arithmetic.cin" output="adder.cin">
                      <pack_pattern name="chain" in_port="arithmetic.cin" out_port="adder.cin"/>
                    </direct>
                    <direct name="carry_out" input="adder.cout" output="arithmetic.cout">
                      <pack_pattern name="chain" in_port="adder.cout" out_port="arithmetic.cout"/>
                    </direct>
                    <complete name="sumout" input="ff.Q adder.sumout" output="arithmetic.out">
                      <delay_constant max="39.85e-12" in_port="adder.sumout" out_port="arithmetic.out"/>
                      <delay_constant max="39.85e-12" in_port="ff.Q" out_port="arithmetic.out"/>
                    </complete>
                  </interconnect>
                </pb_type>
                <interconnect>
                  <direct name="direct1" input="ble5.in[3:0]" output="arithmetic.in"/>
                  <direct name="carry_in" input="ble5.cin" output="arithmetic.cin">
                    <pack_pattern name="chain" in_port="ble5.cin" out_port="arithmetic.cin"/>
                  </direct>
                  <direct name="carry_out" input="arithmetic.cout" output="ble5.cout">
                    <pack_pattern name="chain" in_port="arithmetic.cout" out_port="ble5.cout"/>
                  </direct>
                  <direct name="direct2" input="ble5.clk" output="arithmetic.clk"/>
                  <direct name="direct3" input="arithmetic.out" output="ble5.out"/>
                </interconnect>
              </mode>
            </pb_type>
            <interconnect>
              <!-- Shared inputs between the two 5-LUTs -->
              <complete name="lut5_reg1" input="fle.in[0]" output="ble5[0].in[0] ble5[1].in[1]"/>
              <complete name="lut5_reg2" input="fle.in[1]" output="ble5[0].in[1] ble5[1].in[0]"/>
              <!-- Rest of the 5-LUT inputs -->
              <direct name="lut5_inputs_1" input="fle.in[4:2]" output="ble5[0].in[4:2]"/>
              <direct name="lut5_inputs_22" input="fle.in[7:5]" output="ble5[1].in[4:2]"/>
              <direct name="lut5_outputs_1" input="ble5[0].out" output="fle.out[1:0]"/>
              <direct name="lut5_outputs_2" input="ble5[1].out" output="fle.out[3:2]"/>
              <direct name="carry_in" input="fle.cin" output="ble5[0].cin">
                <pack_pattern name="chain" in_port="fle.cin" out_port="ble5[0].cin"/>
              </direct>
              <direct name="carry_out" input="ble5[1].cout" output="fle.cout">
                <pack_pattern name="chain" in_port="ble5[1].cout" out_port="fle.cout"/>
              </direct>
              <direct name="carry_link" input="ble5[0].cout" output="ble5[1].cin">
                <pack_pattern name="chain" in_port="ble5[0].cout" out_port="ble5[1].cout"/>
              </direct>
              <complete name="clock" input="fle.clk" output="ble5[1:0].clk"/>
            </interconnect>
          </mode>
          <!-- n2_lut5 -->
          <mode name="n1_lut6">
            <pb_type name="ble6" num_pb="1">
              <input name="in" num_pins="6"/>
              <output name="out" num_pins="4"/>
              <clock name="clk" num_pins="1"/>
              <pb_type name="lut6" blif_model=".names" num_pb="1" class="lut">
                <input name="in" num_pins="6" port_class="lut_in"/>
                <output name="out" num_pins="1" port_class="lut_out"/>
                <!-- LUT timing using delay matrix -->
                <!-- These are the physical delay inputs on a Stratix 10 LUT but because VPR cannot do LUT rebalancing,
                           we instead take the average of these numbers to get more stable results
                           257.8e-12
                           253.69e-12
                           190.3e-12
                           183.78e-12
                           114.96e-12
                           77.18e-12
                      -->
                <delay_matrix type="max" in_port="lut6.in" out_port="lut6.out">
                        179.6e-12
                        179.6e-12
                        179.6e-12
                        179.6e-12
                        179.6e-12
                        179.6e-12
                    </delay_matrix>
              </pb_type>
              <pb_type name="ff" blif_model=".latch" num_pb="2" class="flipflop">
                <input name="D" num_pins="1" port_class="D"/>
                <output name="Q" num_pins="1" port_class="Q"/>
                <clock name="clk" num_pins="1" port_class="clock"/>
                <T_setup value="18.91e-12" port="ff.D" clock="clk"/>
                <T_clock_to_Q max="60.32e-12" port="ff.Q" clock="clk"/>
              </pb_type>
              <interconnect>
                <direct name="lut6_inputs" input="ble6.in" output="lut6.in"/>
                <direct name="lut6_ff" input="lut6.out" output="ff[1].D">
                  <delay_constant max="18.96e-12" in_port="lut6.out" out_port="ff[1].D"/>
                  <pack_pattern name="ble6" in_port="lut6.out" out_port="ff[1].D"/>
                </direct>
                <complete name="clock" input="ble6.clk" output="ff.clk"/>
                <direct name="input_to_ff" input="ble6.in[0]" output="ff[0].D"/>
                <mux name="mux1" input="ff[0].Q lut6.out" output="ble6.out[0]">
                  <delay_constant max="39.85e-12" in_port="lut6.out" out_port="ble6.out[0]"/>
                  <delay_constant max="39.85e-12" in_port="ff[0].Q" out_port="ble6.out[0]"/>
                </mux>
                <!-- This mux is the same as mux1 but connected to output 2 -->
                <mux name="mux2" input="ff[0].Q lut6.out" output="ble6.out[1]">
                  <delay_constant max="39.85e-12" in_port="lut6.out" out_port="ble6.out[1]"/>
                  <delay_constant max="39.85e-12" in_port="ff[0].Q" out_port="ble6.out[1]"/>
                </mux>
                <mux name="mux3" input="ff[1].Q lut6.out" output="ble6.out[2]">
                  <delay_constant max="39.85e-12" in_port="lut6.out" out_port="ble6.out[2]"/>
                  <delay_constant max="39.85e-12" in_port="ff[1].Q" out_port="ble6.out[2]"/>
                </mux>
                <!-- This mux is the same as mux2 but connected to output 3 -->
                <mux name="mux4" input="ff[1].Q lut6.out" output="ble6.out[3]">
                  <delay_constant max="39.85e-12" in_port="lut6.out" out_port="ble6.out[3]"/>
                  <delay_constant max="39.85e-12" in_port="ff[1].Q" out_port="ble6.out[3]"/>
                </mux>
              </interconnect>
            </pb_type>
            <interconnect>
              <!-- ble6 takes inputs A, B, C, D, E, & F; where F is fle[7] -->
              <direct name="lut6_inputs1" input="fle.in[4:0]" output="ble6.in[4:0]"/>
              <direct name="lut6_inputs2" input="fle.in[7]" output="ble6.in[5]"/>
              <direct name="direct2" input="ble6.out" output="fle.out"/>
              <direct name="direct4" input="fle.clk" output="ble6.clk"/>
            </interconnect>
          </mode>
          <!-- n1_lut6 -->
        </pb_type>
        <interconnect>
          <!-- 50% sparsely populated local routing -->
          <complete name="lutA" input="lab.I4 lab.I3" output="fle[9:0].in[0:0]">
            <delay_constant max="72.41e-12" in_port="lab.I4" out_port="fle.in[0:0]"/>
            <delay_constant max="72.41e-12" in_port="lab.I3" out_port="fle.in[0:0]"/>
          </complete>
          <complete name="lutB" input="lab.I3 lab.I2" output="fle[9:0].in[1:1]">
            <delay_constant max="72.41e-12" in_port="lab.I3" out_port="fle.in[1:1]"/>
            <delay_constant max="72.41e-12" in_port="lab.I2" out_port="fle.in[1:1]"/>
          </complete>
          <complete name="lutC" input="lab.I2 lab.I1" output="fle[9:0].in[2:2]">
            <delay_constant max="72.41e-12" in_port="lab.I2" out_port="fle.in[2:2]"/>
            <delay_constant max="72.41e-12" in_port="lab.I1" out_port="fle.in[2:2]"/>
          </complete>
          <complete name="lutD" input="lab.I4 lab.I2" output="fle[9:0].in[3:3]">
            <delay_constant max="72.41e-12" in_port="lab.I4" out_port="fle.in[3:3]"/>
            <delay_constant max="72.41e-12" in_port="lab.I2" out_port="fle.in[3:3]"/>
          </complete>
          <complete name="lutE" input="lab.I3 lab.I1" output="fle[9:0].in[4:4]">
            <delay_constant max="72.41e-12" in_port="lab.I3" out_port="fle.in[4:4]"/>
            <delay_constant max="72.41e-12" in_port="lab.I1" out_port="fle.in[4:4]"/>
          </complete>
          <complete name="lutF" input="lab.I4 lab.I1" output="fle[9:0].in[5:5]">
            <delay_constant max="72.41e-12" in_port="lab.I4" out_port="fle.in[5:5]"/>
            <delay_constant max="72.41e-12" in_port="lab.I1" out_port="fle.in[5:5]"/>
          </complete>
          <complete name="lutG" input="lab.I4 lab.I3" output="fle[9:0].in[6:6]">
            <delay_constant max="72.41e-12" in_port="lab.I4" out_port="fle.in[6:6]"/>
            <delay_constant max="72.41e-12" in_port="lab.I3" out_port="fle.in[6:6]"/>
          </complete>
          <complete name="lutH" input="lab.I3 lab.I2" output="fle[9:0].in[7:7]">
            <delay_constant max="72.41e-12" in_port="lab.I3" out_port="fle.in[7:7]"/>
            <delay_constant max="72.41e-12" in_port="lab.I2" out_port="fle.in[7:7]"/>
          </complete>
          <complete name="clks" input="lab.clk" output="fle[9:0].clk"/>
          <!-- This way of specifying direct connection to clb outputs is important because this architecture uses automatic spreading of opins.  
                     By grouping to output pins in this fashion, if a logic block is completely filled by 6-LUTs, 
                     then the outputs those 6-LUTs take get evenly distributed across all four sides of the CLB instead of clumped on two sides (which is what happens with a more
                     naive specification).
              -->
          <direct name="labouts1" input="fle[9:0].out[0]" output="lab.O[9:0]"/>
          <direct name="labouts2" input="fle[9:0].out[1]" output="lab.O[19:10]"/>
          <direct name="labouts3" input="fle[9:0].out[2]" output="lab.O[29:20]"/>
          <direct name="labouts4" input="fle[9:0].out[3]" output="lab.O[39:30]"/>
          <!-- Carry chain links -->
          <direct name="carry_in" input="lab.cin" output="fle[0:0].cin">
            <!-- Put all inter-block carry chain delay on this one edge -->
            <delay_constant max="18.47e-12" in_port="lab.cin" out_port="fle[0:0].cin"/>
            <pack_pattern name="chain" in_port="lab.cin" out_port="fle[0:0].cin"/>
          </direct>
          <direct name="carry_out" input="fle[9:9].cout" output="lab.cout">
            <pack_pattern name="chain" in_port="fle[9:9].cout" out_port="lab.cout"/>
          </direct>
          <direct name="carry_link" input="fle[8:0].cout" output="fle[9:1].cin">
            <pack_pattern name="chain" in_port="fle[8:0].cout" out_port="fle[9:1].cin"/>
          </direct>
        </interconnect>
      </pb_type>
      <interconnect>
        <direct name="carry_in" input="clb.cin" output="lab.cin"/>
        <direct name="carry_out" input="lab.cout" output="clb.cout"/>
        <direct name="clock" input="clb.clk" output="lab.clk"/>
        <complete name="Input_feedback_I1" input="clb.I1 lab.O[4:0]" output="lab.I1"/>
        <complete name="Input_feedback_I2" input="clb.I2 lab.O[24:20]" output="lab.I2"/>
        <complete name="Input_feedback_I3" input="clb.I3 lab.O[9:5]" output="lab.I3"/>
        <complete name="Input_feedback_I4" input="clb.I4 lab.O[29:25]" output="lab.I4"/>
        <!--
        <direct name="Input_I1" input="clb.I1" output="lab.I1"/>
        <direct name="Input_I2" input="clb.I2" output="lab.I2"/>
        <direct name="Input_I3" input="clb.I3" output="lab.I3"/>
        <direct name="Input_I4" input="clb.I4" output="lab.I4"/>
        -->
        <direct name="output" input="lab.O" output="clb.O"/>
      </interconnect>
    </pb_type>
    <!-- Define general purpose logic block (CLB) ends -->

    <!-- Define DSP slice begin -->
    <!-- TODO: Need to update after all precisions are added to the design. -->
    <pb_type name="dsp">
      <input name="datain" num_pins="74"/>
      <output name="dataout" num_pins="74"/>
      <!--TODO: Add full list of IOs-->

      <pb_type name="dsp_pb" num_pb="1">
        <input name="datain" num_pins="74"/>
        <output name="dataout" num_pins="74"/>

        <!-- fixed-point multiplier mode (2 18x19 multipliers) resulta = ax*ay, resultb = bx*by -->
        <mode name="two_mult_18x19">
          <pb_type name="two_mult_18x19" num_pb="2">
            <input name="a" num_pins="18"/>
            <input name="b" num_pins="19"/>
            <output name="out" num_pins="37"/>
            <pb_type name="mult_18x19" blif_model=".subckt multiply" num_pb="1">
              <input name="a" num_pins="18"/>
              <input name="b" num_pins="19"/>
              <output name="out" num_pins="37"/>
              <!-- Using the numbers from Arria 10 which is a 22nm technology, an 18x19 multiplier 
                      can operate at 548 MHz which maps to a delay of 1.825e-9 -->
              <delay_constant max="1.825e-9" in_port="mult_18x19.a" out_port="mult_18x19.out"/>
              <delay_constant max="1.825e-9" in_port="mult_18x19.b" out_port="mult_18x19.out"/>
            </pb_type>
            <interconnect>
              <direct name="a2a" input="two_mult_18x19.a" output="mult_18x19.a">
                 </direct>
              <direct name="b2b" input="two_mult_18x19.b" output="mult_18x19.b">
                 </direct>
              <direct name="out2out" input="mult_18x19.out" output="two_mult_18x19.out">
                 </direct>
            </interconnect>
            <power method="pin-toggle">
              <port name="a" energy_per_toggle="1.09e-12"/>
              <port name="b" energy_per_toggle="1.09e-12"/>
              <static_power power_per_instance="0.0"/>
            </power>
          </pb_type>
          <interconnect>
            <direct name="datain2a1" input="dsp_pb.datain[17:0]" output="two_mult_18x19[0].a">
              <delay_constant max="134e-12" in_port="dsp_pb.datain[17:0]" out_port="two_mult_18x19[0].a"/>
            </direct>
            <direct name="datain2b1" input="dsp_pb.datain[36:18]" output="two_mult_18x19[0].b">
              <delay_constant max="134e-12" in_port="dsp_pb.datain[36:18]" out_port="two_mult_18x19[0].b"/>
            </direct>
            <direct name="datain2a2" input="dsp_pb.datain[54:37]" output="two_mult_18x19[1].a">
              <delay_constant max="134e-12" in_port="dsp_pb.datain[54:37]" out_port="two_mult_18x19[1].a"/>
            </direct>
            <direct name="datain2b2" input="dsp_pb.datain[73:55]" output="two_mult_18x19[1].b">
              <delay_constant max="134e-12" in_port="dsp_pb.datain[73:55]" out_port="two_mult_18x19[1].b"/>
            </direct>
            <direct name="out2dataout" input="two_mult_18x19[1:0].out" output="dsp_pb.dataout">
              <delay_constant max="1.09e-9" in_port="two_mult_18x19[1:0].out" out_port="dsp_pb.dataout"/>
            </direct>
          </interconnect>
        </mode>

        <!-- fixed-point multiplier mode (1 27x27 multiplier) resulta = ax*ay -->
        <mode name="one_mult_27x27">
          <pb_type name="one_mult_27x27" num_pb="1">
            <input name="a" num_pins="27"/>
            <input name="b" num_pins="27"/>
            <output name="out" num_pins="54"/>
            <pb_type name="mult_27x27" blif_model=".subckt multiply" num_pb="1">
              <input name="a" num_pins="27"/>
              <input name="b" num_pins="27"/>
              <output name="out" num_pins="54"/>
              <!-- Using the numbers from Arria 10 which is a 22nm technology, an 27x27 multiplier 
                      can operate at 541 MHz which maps to a delay of 1.848e-9 -->
              <delay_constant max="1.848e-9" in_port="mult_27x27.a" out_port="mult_27x27.out"/>
              <delay_constant max="1.848e-9" in_port="mult_27x27.b" out_port="mult_27x27.out"/>
            </pb_type>
            <interconnect>
              <direct name="a2a" input="one_mult_27x27.a" output="mult_27x27.a">
                 </direct>
              <direct name="b2b" input="one_mult_27x27.b" output="mult_27x27.b">
                 </direct>
              <direct name="out2out" input="mult_27x27.out" output="one_mult_27x27.out">
                 </direct>
            </interconnect>
            <power method="pin-toggle">
              <port name="a" energy_per_toggle="2.13e-12"/>
              <port name="b" energy_per_toggle="2.13e-12"/>
              <static_power power_per_instance="0.0"/>
            </power>
          </pb_type>
          <interconnect>
            <direct name="datain2a" input="dsp_pb.datain[26:0]" output="one_mult_27x27.a">
              <delay_constant max="134e-12" in_port="dsp_pb.datain[26:0]" out_port="one_mult_27x27.a"/>
            </direct>
            <direct name="datain2b" input="dsp_pb.datain[53:27]" output="one_mult_27x27.b">
              <delay_constant max="134e-12" in_port="dsp_pb.datain[53:27]" out_port="one_mult_27x27.b"/>
            </direct>
            <direct name="out2dataout" input="one_mult_27x27.out" output="dsp_pb.dataout[53:0]">
              <delay_constant max="1.93e-9" in_port="one_mult_27x27.out" out_port="dsp_pb.dataout[53:0]"/>
            </direct>
          </interconnect>
        </mode>

        <!-- fixed-point multiplier-add-sum mode resulta = (bx * by) +/- (ax * ay)  -->
        <mode name="mult_add_sum_mode">
          <pb_type name="mult_add_sum" num_pb="1" blif_model=".subckt mult_add_sum_int">
            <input name="ax" num_pins="18"/>
            <input name="ay" num_pins="19"/>
            <input name="bx" num_pins="18"/>
            <input name="by" num_pins="19"/>
            <output name="resulta" num_pins="38"/>
            <!--TODO: Add mode signals like SUB -->
            <delay_constant max="1.848e-9" in_port="mult_add_sum.ax" out_port="mult_add_sum.resulta"/>
            <delay_constant max="1.848e-9" in_port="mult_add_sum.ay" out_port="mult_add_sum.resulta"/>
            <delay_constant max="1.848e-9" in_port="mult_add_sum.bx" out_port="mult_add_sum.resulta"/>
            <delay_constant max="1.848e-9" in_port="mult_add_sum.by" out_port="mult_add_sum.resulta"/>
          </pb_type>
          <interconnect>
            <direct name="datain2ax" input="dsp_pb.datain[17:0]" output="mult_add_sum.ax">
            </direct>
            <direct name="datain2ay" input="dsp_pb.datain[36:18]" output="mult_add_sum.ay">
            </direct>
            <direct name="datain2bx" input="dsp_pb.datain[54:37]" output="mult_add_sum.bx">
            </direct>
            <direct name="datain2by" input="dsp_pb.datain[73:55]" output="mult_add_sum.by">
            </direct>
            <direct name="dataout2result" input="mult_add_sum.resulta" output="dsp_pb.dataout[37:0]">
            </direct>
          </interconnect>
        </mode>

        <!-- floating point multiplier mode (result = a * b)-->
        <mode name="mult_fp32_mode">
          <pb_type name="mult_fp32" blif_model=".subckt multiply_fp" num_pb="1">
            <input name="a" num_pins="32"/>
            <input name="b" num_pins="32"/>
            <output name="out" num_pins="32"/>
            <delay_constant max="0.94e-9" in_port="mult_fp32.a" out_port="mult_fp32.out"/>
            <delay_constant max="0.94e-9" in_port="mult_fp32.b" out_port="mult_fp32.out"/>
          </pb_type>
          <interconnect>
            <direct name="a2a" input="dsp_pb.datain[31:0]" output="mult_fp32.a">
              <delay_constant max="0.1e-9" in_port="dsp_pb.datain[31:0]" out_port="mult_fp32.a"/>
            </direct>
            <direct name="b2b" input="dsp_pb.datain[63:32]" output="mult_fp32.b">
              <delay_constant max="0.1e-9" in_port="dsp_pb.datain[63:32]" out_port="mult_fp32.b"/>
            </direct>
            <direct name="out2out" input="mult_fp32.out" output="dsp_pb.dataout[31:0]">
              <delay_constant max="0.1e-9" in_port="mult_fp32.out" out_port="dsp_pb.dataout[31:0]"/>
            </direct>
          </interconnect>
        </mode>

        <!-- floating point adder mode (result = a +/- b)-->
        <mode name="adder_fp32_mode"> 
          <pb_type name="adder_pb" blif_model=".subckt adder_fp" num_pb="1">
            <input name="a" num_pins="32"/>
            <input name="b" num_pins="32"/>
            <output name="out" num_pins="32"/>
            <!--TODO: Add mode signals like SUB-->
            <!-- Carry link delays included in cin->cout delay -->
            <delay_constant max="0.33e-9" in_port="adder_pb.a" out_port="adder_pb.out"/>
            <delay_constant max="0.33e-9" in_port="adder_pb.b" out_port="adder_pb.out"/>
          </pb_type>
          <interconnect>
            <direct name="atoa" input="dsp_pb.datain[31:0]" output="adder_pb.a">
              <delay_constant max="0.1e-9" in_port="dsp_pb.datain[31:0]" out_port="adder_pb.a"/>
            </direct>
            <direct name="btob" input="dsp_pb.datain[63:32]" output="adder_pb.b">
              <delay_constant max="0.1e-9" in_port="dsp_pb.datain[63:32]" out_port="adder_pb.b"/>
            </direct>
            <direct name="sumouttosumout" input="adder_pb.out" output="dsp_pb.dataout[31:0]">
              <delay_constant max="0.1e-9" in_port="adder_pb.out" out_port="dsp_pb.dataout[31:0]"/>
            </direct>
          </interconnect>
        </mode>

        <!-- floating point mac mode (result = a*b +/- accumulated value-->
        <mode name="mac_fp32_mode">
          <pb_type name="mac_fp32" blif_model=".subckt mac_fp" num_pb="1">
            <input name="a" num_pins="32"/>
            <input name="b" num_pins="32"/>
            <output name="out" num_pins="32"/>
            <!-- Carry link delays included in cin->cout delay -->
            <delay_constant max="0.33e-9" in_port="mac_fp32.a" out_port="mac_fp32.out"/>
            <delay_constant max="0.33e-9" in_port="mac_fp32.b" out_port="mac_fp32.out"/>
          </pb_type>
          <interconnect>
            <direct name="atoa" input="dsp_pb.datain[31:0]" output="mac_fp32.a">
              <delay_constant max="0.1e-9" in_port="dsp_pb.datain[31:0]" out_port="mac_fp32.a"/>
            </direct>
            <direct name="btob" input="dsp_pb.datain[63:32]" output="mac_fp32.b">
              <delay_constant max="0.1e-9" in_port="dsp_pb.datain[63:32]" out_port="mac_fp32.b"/>
            </direct>
            <direct name="sumouttosumout" input="mac_fp32.out" output="dsp_pb.dataout[31:0]">
              <delay_constant max="0.1e-9" in_port="mac_fp32.out" out_port="dsp_pb.dataout[31:0]"/>
            </direct>
          </interconnect>
        </mode>


      </pb_type>

      <interconnect>
        <!--TODO: Need to update delays from COFFE-->
        <!--50% sparse crossbar means 50% of the lines can reach an actual input of the matmul
        We do this by splitting inputs into two buckets and having two full crossbars-->
        <complete name="first_half" input="dsp.datain[36:0]" output="dsp_pb.datain[36:0]">
            <delay_constant max="134e-12" in_port="dsp.datain[36:0]" out_port="dsp_pb.datain[36:0]"/>
        </complete>
        <complete name="second_half" input="dsp.datain[73:37]" output="dsp_pb.datain[73:37]">
            <delay_constant max="134e-12" in_port="dsp.datain[73:37]" out_port="dsp_pb.datain[73:37]"/>
        </complete>
        <direct name="outputs" input="dsp_pb.dataout" output="dsp.dataout"></direct>
      </interconnect>  

      <power method="sum-of-children"/>
    </pb_type>
    <!-- Define fracturable multiplier end -->

    <!-- Define matrix multiplier begin -->
    <pb_type name="matmul_top">
      <input name="reset" num_pins="1" is_non_clock_global="true"/>
      <input name="pe_reset" num_pins="1" is_non_clock_global="true"/>
      <input name="start_mat_mul" num_pins="1" is_non_clock_global="true"/>
      <input name="matmul_I1" num_pins="136" equivalent="full"/>
      <input name="matmul_I2" num_pins="138" equivalent="full"/>
      <input name="a_data_in" num_pins="64"/>
      <input name="b_data_in" num_pins="64"/>
      <input name="c_data_in" num_pins="64"/>
      <output name="a_data_out" num_pins="64"/>
      <output name="b_data_out" num_pins="64"/>
      <output name="c_data_out" num_pins="64"/>
      <output name="c_data_out_dir_int" num_pins="64"/>
      <output name="done_mat_mul" num_pins="1"/>
      <output name="a_addr" num_pins="16"/>
      <output name="b_addr" num_pins="16"/>
      <output name="c_addr" num_pins="16"/>
      <output name="c_data_available" num_pins="1"/>
      <clock name="clk" num_pins="1"/>

    <pb_type name="matmul" num_pb="1">

      <input name="reset" num_pins="1"/>
      <input name="pe_reset" num_pins="1"/>
      <input name="start_mat_mul" num_pins="1"/>
      <input name="a_data_in" num_pins="64"/>
      <input name="b_data_in" num_pins="64"/>
      <input name="address_mat_a" num_pins="16"/>
      <input name="address_mat_b" num_pins="16"/>
      <input name="address_mat_c" num_pins="16"/>
      <input name="address_stride_a" num_pins="16"/>
      <input name="address_stride_b" num_pins="16"/>
      <input name="address_stride_c" num_pins="16"/>
      <input name="a_data" num_pins="64"/>
      <input name="b_data" num_pins="64"/>
      <input name="c_data_in" num_pins="64"/>
      <input name="validity_mask_a_rows" num_pins="8"/>
      <input name="validity_mask_a_cols_b_rows" num_pins="8"/>
      <input name="validity_mask_b_cols" num_pins="8"/>
      <input name="final_mat_mul_size" num_pins="8"/>
      <input name="a_loc" num_pins="8"/>
      <input name="b_loc" num_pins="8"/>
      <input name="slice_dtype" num_pins="1"/>
      <input name="slice_mode" num_pins="1"/>
      <output name="a_data_out" num_pins="64"/>
      <output name="b_data_out" num_pins="64"/>
      <output name="c_data_out" num_pins="64"/>
      <output name="c_data_out_dir_int" num_pins="64"/>
      <output name="done_mat_mul" num_pins="1"/>
      <output name="a_addr" num_pins="16"/>
      <output name="b_addr" num_pins="16"/>
      <output name="c_addr" num_pins="16"/>
      <output name="c_data_available" num_pins="1"/>
      <clock name="clk" num_pins="1"/>

      <pb_type name="matmul_pb" num_pb="1">
        <input name="reset" num_pins="1"/>
        <input name="pe_reset" num_pins="1"/>
        <input name="start_mat_mul" num_pins="1"/>
        <input name="address_mat_a" num_pins="16"/>
        <input name="address_mat_b" num_pins="16"/>
        <input name="address_mat_c" num_pins="16"/>
        <input name="address_stride_a" num_pins="16"/>
        <input name="address_stride_b" num_pins="16"/>
        <input name="address_stride_c" num_pins="16"/>
        <input name="a_data" num_pins="64"/>
        <input name="b_data" num_pins="64"/>
        <input name="a_data_in" num_pins="64"/>
        <input name="b_data_in" num_pins="64"/>
        <input name="c_data_in" num_pins="64"/>
        <input name="validity_mask_a_rows" num_pins="8"/>
        <input name="validity_mask_a_cols_b_rows" num_pins="8"/>
        <input name="validity_mask_b_cols" num_pins="8"/>
        <input name="final_mat_mul_size" num_pins="8"/>
        <input name="a_loc" num_pins="8"/>
        <input name="b_loc" num_pins="8"/>
        <input name="slice_dtype" num_pins="1"/>
        <input name="slice_mode" num_pins="1"/>
        <output name="done_mat_mul" num_pins="1"/>
        <output name="a_data_out" num_pins="64"/>
        <output name="b_data_out" num_pins="64"/>
        <output name="c_data_out" num_pins="64"/>
        <output name="c_data_out_dir_int" num_pins="64"/>
        <output name="a_addr" num_pins="16"/>
        <output name="b_addr" num_pins="16"/>
        <output name="c_addr" num_pins="16"/>
        <output name="c_data_available" num_pins="1"/>
        <clock name="clk" num_pins="1"/>

        <mode name="matmul_fp16_mode">
          <pb_type name="matmul_4x4_pb" blif_model=".subckt matmul_fp16" num_pb="1">
            <input name="reset" num_pins="1"/>
            <input name="pe_reset" num_pins="1"/>
            <input name="start_mat_mul" num_pins="1"/>
            <input name="address_mat_a" num_pins="16"/>
            <input name="address_mat_b" num_pins="16"/>
            <input name="address_mat_c" num_pins="16"/>
            <input name="address_stride_a" num_pins="16"/>
            <input name="address_stride_b" num_pins="16"/>
            <input name="address_stride_c" num_pins="16"/>
            <input name="a_data" num_pins="64"/>
            <input name="b_data" num_pins="64"/>
            <input name="a_data_in" num_pins="64"/>
            <input name="b_data_in" num_pins="64"/>
            <input name="c_data_in" num_pins="64"/>
            <input name="validity_mask_a_rows" num_pins="8"/>
            <input name="validity_mask_a_cols_b_rows" num_pins="8"/>
            <input name="validity_mask_b_cols" num_pins="8"/>
            <input name="final_mat_mul_size" num_pins="8"/>
            <input name="a_loc" num_pins="8"/>
            <input name="b_loc" num_pins="8"/>
            <input name="slice_dtype" num_pins="1"/>
            <input name="slice_mode" num_pins="1"/>
            <output name="done_mat_mul" num_pins="1"/>
            <output name="a_data_out" num_pins="64"/>
            <output name="b_data_out" num_pins="64"/>
            <output name="c_data_out" num_pins="64"/>
            <output name="c_data_out_dir_int" num_pins="64"/>
            <output name="a_addr" num_pins="16"/>
            <output name="b_addr" num_pins="16"/>
            <output name="c_addr" num_pins="16"/>
            <output name="c_data_available" num_pins="1"/>
            <clock name="clk" num_pins="1"/>

            <!--TODO: Correct value of delays for the fp16 mode need to be used-->
            <!-- In the GPDK 45nm library, the setup time is 0.02ns, the clock-to-q time is 0.05ns-->
            <T_setup value="66e-12" port="matmul_4x4_pb.reset" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.pe_reset" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.start_mat_mul" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.address_mat_a" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.address_mat_b" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.address_mat_c" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.address_stride_a" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.address_stride_b" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.address_stride_c" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.a_data" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.b_data" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.a_data_in" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.b_data_in" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.c_data_in" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.validity_mask_a_rows" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.validity_mask_a_cols_b_rows" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.validity_mask_b_cols" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.final_mat_mul_size" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.a_loc" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.b_loc" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.slice_dtype" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.slice_mode" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.done_mat_mul" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.a_data_out" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.b_data_out" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.c_data_out" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.c_data_out_dir_int" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.a_addr" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.b_addr" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.c_addr" clock="clk"/>
            <T_setup value="66e-12" port="matmul_4x4_pb.c_data_available" clock="clk"/>

            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.reset" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.pe_reset" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.start_mat_mul" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.address_mat_a" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.address_mat_b" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.address_mat_c" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.address_stride_a" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.address_stride_b" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.address_stride_c" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.a_data" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.b_data" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.a_data_in" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.b_data_in" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.c_data_in" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.validity_mask_a_rows" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.validity_mask_a_cols_b_rows" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.validity_mask_b_cols" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.final_mat_mul_size" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.a_loc" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.b_loc" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.slice_dtype" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.slice_mode" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.done_mat_mul" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.a_data_out" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.b_data_out" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.c_data_out" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.c_data_out_dir_int" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.a_addr" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.b_addr" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.c_addr" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_4x4_pb.c_data_available" clock="clk"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.reset" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.reset" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.reset" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.reset" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.reset" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.reset" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.reset" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.reset" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.reset" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.pe_reset" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.pe_reset" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.pe_reset" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.pe_reset" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.pe_reset" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.pe_reset" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.pe_reset" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.pe_reset" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.pe_reset" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.start_mat_mul" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.start_mat_mul" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.start_mat_mul" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.start_mat_mul" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.start_mat_mul" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.start_mat_mul" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.start_mat_mul" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.start_mat_mul" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.start_mat_mul" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_a" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_a" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_a" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_a" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_a" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_a" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_a" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_a" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_a" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_b" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_b" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_b" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_b" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_b" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_b" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_b" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_b" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_b" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_c" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_c" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_c" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_c" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_c" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_c" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_c" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_c" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_mat_c" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_a" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_a" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_a" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_a" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_a" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_a" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_a" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_a" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_a" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_b" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_b" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_b" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_b" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_b" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_b" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_b" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_b" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_b" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_c" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_c" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_c" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_c" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_c" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_c" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_c" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_c" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.address_stride_c" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data_in" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data_in" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data_in" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data_in" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data_in" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data_in" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data_in" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data_in" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_data_in" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data_in" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data_in" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data_in" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data_in" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data_in" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data_in" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data_in" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data_in" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_data_in" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.c_data_in" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.c_data_in" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.c_data_in" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.c_data_in" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.c_data_in" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.c_data_in" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.c_data_in" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.c_data_in" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.c_data_in" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_rows" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_rows" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_rows" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_rows" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_rows" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_rows" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_rows" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_rows" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_rows" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_cols_b_rows" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_cols_b_rows" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_cols_b_rows" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_cols_b_rows" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_cols_b_rows" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_cols_b_rows" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_cols_b_rows" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_cols_b_rows" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_a_cols_b_rows" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_b_cols" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_b_cols" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_b_cols" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_b_cols" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_b_cols" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_b_cols" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_b_cols" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_b_cols" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.validity_mask_b_cols" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.final_mat_mul_size" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.final_mat_mul_size" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.final_mat_mul_size" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.final_mat_mul_size" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.final_mat_mul_size" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.final_mat_mul_size" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.final_mat_mul_size" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.final_mat_mul_size" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.final_mat_mul_size" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_loc" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_loc" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_loc" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_loc" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_loc" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_loc" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_loc" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_loc" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.a_loc" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_loc" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_loc" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_loc" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_loc" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_loc" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_loc" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_loc" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_loc" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.b_loc" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_dtype" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_dtype" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_dtype" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_dtype" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_dtype" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_dtype" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_dtype" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_dtype" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_dtype" out_port="matmul_4x4_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_mode" out_port="matmul_4x4_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_mode" out_port="matmul_4x4_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_mode" out_port="matmul_4x4_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_mode" out_port="matmul_4x4_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_mode" out_port="matmul_4x4_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_mode" out_port="matmul_4x4_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_mode" out_port="matmul_4x4_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_mode" out_port="matmul_4x4_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_4x4_pb.slice_mode" out_port="matmul_4x4_pb.c_data_available"/>

          </pb_type>
          <interconnect>
            <direct name="reset" input="matmul_pb.reset" output="matmul_4x4_pb.reset"/>
            <direct name="pe_reset" input="matmul_pb.pe_reset" output="matmul_4x4_pb.pe_reset"/>
            <direct name="start_mat_mul" input="matmul_pb.start_mat_mul" output="matmul_4x4_pb.start_mat_mul"/>
            <direct name="address_mat_a" input="matmul_pb.address_mat_a" output="matmul_4x4_pb.address_mat_a"/>
            <direct name="address_mat_b" input="matmul_pb.address_mat_b" output="matmul_4x4_pb.address_mat_b"/>
            <direct name="address_mat_c" input="matmul_pb.address_mat_c" output="matmul_4x4_pb.address_mat_c"/>
            <direct name="address_stride_a" input="matmul_pb.address_stride_a" output="matmul_4x4_pb.address_stride_a"/>
            <direct name="address_stride_b" input="matmul_pb.address_stride_b" output="matmul_4x4_pb.address_stride_b"/>
            <direct name="address_stride_c" input="matmul_pb.address_stride_c" output="matmul_4x4_pb.address_stride_c"/>
            <direct name="a_data" input="matmul_pb.a_data" output="matmul_4x4_pb.a_data"/>
            <direct name="b_data" input="matmul_pb.b_data" output="matmul_4x4_pb.b_data"/>
            <direct name="a_data_in" input="matmul_pb.a_data_in" output="matmul_4x4_pb.a_data_in"/>
            <direct name="b_data_in" input="matmul_pb.b_data_in" output="matmul_4x4_pb.b_data_in"/>
            <direct name="c_data_in" input="matmul_pb.c_data_in" output="matmul_4x4_pb.c_data_in"/>
            <direct name="validity_mask_a_rows" input="matmul_pb.validity_mask_a_rows" output="matmul_4x4_pb.validity_mask_a_rows"/>
            <direct name="validity_mask_a_cols_b_rows" input="matmul_pb.validity_mask_a_cols_b_rows" output="matmul_4x4_pb.validity_mask_a_cols_b_rows"/>
            <direct name="validity_mask_b_cols" input="matmul_pb.validity_mask_b_cols" output="matmul_4x4_pb.validity_mask_b_cols"/>
            <direct name="final_mat_mul_size" input="matmul_pb.final_mat_mul_size" output="matmul_4x4_pb.final_mat_mul_size"/>
            <direct name="a_loc" input="matmul_pb.a_loc" output="matmul_4x4_pb.a_loc"/>
            <direct name="b_loc" input="matmul_pb.b_loc" output="matmul_4x4_pb.b_loc"/>
            <direct name="slice_dtype" input="matmul_pb.slice_dtype" output="matmul_4x4_pb.slice_dtype"/>
            <direct name="slice_mode" input="matmul_pb.slice_mode" output="matmul_4x4_pb.slice_mode"/>
            <direct name="done_mat_mul" input="matmul_4x4_pb.done_mat_mul" output="matmul_pb.done_mat_mul"/>
            <direct name="a_data_out" input="matmul_4x4_pb.a_data_out" output="matmul_pb.a_data_out"/>
            <direct name="b_data_out" input="matmul_4x4_pb.b_data_out" output="matmul_pb.b_data_out"/>
            <direct name="c_data_out" input="matmul_4x4_pb.c_data_out" output="matmul_pb.c_data_out"/>
            <direct name="c_data_out_dir_int" input="matmul_4x4_pb.c_data_out_dir_int" output="matmul_pb.c_data_out_dir_int"/>
            <direct name="a_addr" input="matmul_4x4_pb.a_addr" output="matmul_pb.a_addr"/>
            <direct name="b_addr" input="matmul_4x4_pb.b_addr" output="matmul_pb.b_addr"/>
            <direct name="c_addr" input="matmul_4x4_pb.c_addr" output="matmul_pb.c_addr"/>
            <direct name="c_data_available" input="matmul_4x4_pb.c_data_available" output="matmul_pb.c_data_available"/>
            <direct name="clk" input="matmul_pb.clk" output="matmul_4x4_pb.clk"/>
          </interconnect>
        </mode>

        <mode name="matmul_int8_mode">
          <pb_type name="matmul_8x8_pb" blif_model=".subckt matmul_int8" num_pb="1">
            <input name="reset" num_pins="1"/>
            <input name="pe_reset" num_pins="1"/>
            <input name="start_mat_mul" num_pins="1"/>
            <input name="address_mat_a" num_pins="16"/>
            <input name="address_mat_b" num_pins="16"/>
            <input name="address_mat_c" num_pins="16"/>
            <input name="address_stride_a" num_pins="16"/>
            <input name="address_stride_b" num_pins="16"/>
            <input name="address_stride_c" num_pins="16"/>
            <input name="a_data" num_pins="64"/>
            <input name="b_data" num_pins="64"/>
            <input name="a_data_in" num_pins="64"/>
            <input name="b_data_in" num_pins="64"/>
            <input name="c_data_in" num_pins="64"/>
            <input name="validity_mask_a_rows" num_pins="8"/>
            <input name="validity_mask_a_cols_b_rows" num_pins="8"/>
            <input name="validity_mask_b_cols" num_pins="8"/>
            <input name="final_mat_mul_size" num_pins="8"/>
            <input name="a_loc" num_pins="8"/>
            <input name="b_loc" num_pins="8"/>
            <input name="slice_dtype" num_pins="1"/>
            <input name="slice_mode" num_pins="1"/>
            <output name="done_mat_mul" num_pins="1"/>
            <output name="a_data_out" num_pins="64"/>
            <output name="b_data_out" num_pins="64"/>
            <output name="c_data_out" num_pins="64"/>
            <output name="c_data_out_dir_int" num_pins="64"/>
            <output name="a_addr" num_pins="16"/>
            <output name="b_addr" num_pins="16"/>
            <output name="c_addr" num_pins="16"/>
            <output name="c_data_available" num_pins="1"/>
            <clock name="clk" num_pins="1"/>

            <!--TODO: Correct value of delays for the int8 mode need to be used-->
            <!-- In the GPDK 45nm library, the setup time is 0.02ns, the clock-to-q time is 0.05ns-->
            <T_setup value="66e-12" port="matmul_8x8_pb.reset" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.pe_reset" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.start_mat_mul" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.address_mat_a" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.address_mat_b" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.address_mat_c" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.address_stride_a" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.address_stride_b" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.address_stride_c" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.a_data" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.b_data" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.a_data_in" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.b_data_in" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.c_data_in" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.validity_mask_a_rows" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.validity_mask_a_cols_b_rows" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.validity_mask_b_cols" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.final_mat_mul_size" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.a_loc" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.b_loc" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.slice_dtype" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.slice_mode" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.done_mat_mul" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.a_data_out" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.b_data_out" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.c_data_out" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.c_data_out_dir_int" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.a_addr" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.b_addr" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.c_addr" clock="clk"/>
            <T_setup value="66e-12" port="matmul_8x8_pb.c_data_available" clock="clk"/>

            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.reset" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.pe_reset" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.start_mat_mul" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.address_mat_a" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.address_mat_b" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.address_mat_c" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.address_stride_a" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.address_stride_b" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.address_stride_c" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.a_data" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.b_data" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.a_data_in" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.b_data_in" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.c_data_in" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.validity_mask_a_rows" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.validity_mask_a_cols_b_rows" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.validity_mask_b_cols" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.final_mat_mul_size" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.a_loc" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.b_loc" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.slice_dtype" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.slice_mode" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.done_mat_mul" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.a_data_out" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.b_data_out" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.c_data_out" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.c_data_out_dir_int" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.a_addr" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.b_addr" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.c_addr" clock="clk"/>
            <T_clock_to_Q max="124e-12" min="124e-12" port="matmul_8x8_pb.c_data_available" clock="clk"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.reset" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.reset" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.reset" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.reset" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.reset" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.reset" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.reset" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.reset" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.reset" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.pe_reset" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.pe_reset" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.pe_reset" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.pe_reset" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.pe_reset" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.pe_reset" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.pe_reset" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.pe_reset" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.pe_reset" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.start_mat_mul" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.start_mat_mul" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.start_mat_mul" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.start_mat_mul" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.start_mat_mul" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.start_mat_mul" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.start_mat_mul" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.start_mat_mul" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.start_mat_mul" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_a" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_a" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_a" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_a" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_a" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_a" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_a" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_a" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_a" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_b" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_b" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_b" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_b" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_b" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_b" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_b" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_b" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_b" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_c" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_c" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_c" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_c" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_c" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_c" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_c" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_c" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_mat_c" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_a" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_a" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_a" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_a" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_a" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_a" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_a" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_a" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_a" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_b" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_b" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_b" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_b" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_b" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_b" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_b" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_b" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_b" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_c" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_c" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_c" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_c" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_c" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_c" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_c" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_c" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.address_stride_c" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data_in" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data_in" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data_in" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data_in" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data_in" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data_in" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data_in" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data_in" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_data_in" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data_in" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data_in" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data_in" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data_in" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data_in" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data_in" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data_in" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data_in" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_data_in" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.c_data_in" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.c_data_in" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.c_data_in" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.c_data_in" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.c_data_in" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.c_data_in" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.c_data_in" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.c_data_in" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.c_data_in" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_rows" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_rows" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_rows" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_rows" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_rows" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_rows" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_rows" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_rows" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_rows" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_cols_b_rows" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_cols_b_rows" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_cols_b_rows" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_cols_b_rows" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_cols_b_rows" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_cols_b_rows" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_cols_b_rows" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_cols_b_rows" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_a_cols_b_rows" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_b_cols" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_b_cols" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_b_cols" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_b_cols" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_b_cols" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_b_cols" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_b_cols" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_b_cols" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.validity_mask_b_cols" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.final_mat_mul_size" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.final_mat_mul_size" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.final_mat_mul_size" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.final_mat_mul_size" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.final_mat_mul_size" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.final_mat_mul_size" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.final_mat_mul_size" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.final_mat_mul_size" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.final_mat_mul_size" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_loc" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_loc" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_loc" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_loc" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_loc" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_loc" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_loc" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_loc" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.a_loc" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_loc" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_loc" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_loc" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_loc" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_loc" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_loc" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_loc" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_loc" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.b_loc" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_dtype" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_dtype" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_dtype" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_dtype" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_dtype" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_dtype" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_dtype" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_dtype" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_dtype" out_port="matmul_8x8_pb.c_data_available"/>

            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_mode" out_port="matmul_8x8_pb.done_mat_mul"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_mode" out_port="matmul_8x8_pb.a_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_mode" out_port="matmul_8x8_pb.b_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_mode" out_port="matmul_8x8_pb.c_data_out"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_mode" out_port="matmul_8x8_pb.c_data_out_dir_int"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_mode" out_port="matmul_8x8_pb.a_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_mode" out_port="matmul_8x8_pb.b_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_mode" out_port="matmul_8x8_pb.c_addr"/>
            <delay_constant max="1.45e-9" in_port="matmul_8x8_pb.slice_mode" out_port="matmul_8x8_pb.c_data_available"/>

          </pb_type>
          <interconnect>
            <direct name="reset" input="matmul_pb.reset" output="matmul_8x8_pb.reset"/>
            <direct name="pe_reset" input="matmul_pb.pe_reset" output="matmul_8x8_pb.pe_reset"/>
            <direct name="start_mat_mul" input="matmul_pb.start_mat_mul" output="matmul_8x8_pb.start_mat_mul"/>
            <direct name="address_mat_a" input="matmul_pb.address_mat_a" output="matmul_8x8_pb.address_mat_a"/>
            <direct name="address_mat_b" input="matmul_pb.address_mat_b" output="matmul_8x8_pb.address_mat_b"/>
            <direct name="address_mat_c" input="matmul_pb.address_mat_c" output="matmul_8x8_pb.address_mat_c"/>
            <direct name="address_stride_a" input="matmul_pb.address_stride_a" output="matmul_8x8_pb.address_stride_a"/>
            <direct name="address_stride_b" input="matmul_pb.address_stride_b" output="matmul_8x8_pb.address_stride_b"/>
            <direct name="address_stride_c" input="matmul_pb.address_stride_c" output="matmul_8x8_pb.address_stride_c"/>
            <direct name="a_data" input="matmul_pb.a_data" output="matmul_8x8_pb.a_data"/>
            <direct name="b_data" input="matmul_pb.b_data" output="matmul_8x8_pb.b_data"/>
            <direct name="a_data_in" input="matmul_pb.a_data_in" output="matmul_8x8_pb.a_data_in"/>
            <direct name="b_data_in" input="matmul_pb.b_data_in" output="matmul_8x8_pb.b_data_in"/>
            <direct name="c_data_in" input="matmul_pb.c_data_in" output="matmul_8x8_pb.c_data_in"/>
            <direct name="validity_mask_a_rows" input="matmul_pb.validity_mask_a_rows" output="matmul_8x8_pb.validity_mask_a_rows"/>
            <direct name="validity_mask_a_cols_b_rows" input="matmul_pb.validity_mask_a_cols_b_rows" output="matmul_8x8_pb.validity_mask_a_cols_b_rows"/>
            <direct name="validity_mask_b_cols" input="matmul_pb.validity_mask_b_cols" output="matmul_8x8_pb.validity_mask_b_cols"/>
            <direct name="final_mat_mul_size" input="matmul_pb.final_mat_mul_size" output="matmul_8x8_pb.final_mat_mul_size"/>
            <direct name="a_loc" input="matmul_pb.a_loc" output="matmul_8x8_pb.a_loc"/>
            <direct name="b_loc" input="matmul_pb.b_loc" output="matmul_8x8_pb.b_loc"/>
            <direct name="slice_dtype" input="matmul_pb.slice_dtype" output="matmul_8x8_pb.slice_dtype"/>
            <direct name="slice_mode" input="matmul_pb.slice_mode" output="matmul_8x8_pb.slice_mode"/>
            <direct name="done_mat_mul" input="matmul_8x8_pb.done_mat_mul" output="matmul_pb.done_mat_mul"/>
            <direct name="a_data_out" input="matmul_8x8_pb.a_data_out" output="matmul_pb.a_data_out"/>
            <direct name="b_data_out" input="matmul_8x8_pb.b_data_out" output="matmul_pb.b_data_out"/>
            <direct name="c_data_out" input="matmul_8x8_pb.c_data_out" output="matmul_pb.c_data_out"/>
            <direct name="c_data_out_dir_int" input="matmul_8x8_pb.c_data_out_dir_int" output="matmul_pb.c_data_out_dir_int"/>
            <direct name="a_addr" input="matmul_8x8_pb.a_addr" output="matmul_pb.a_addr"/>
            <direct name="b_addr" input="matmul_8x8_pb.b_addr" output="matmul_pb.b_addr"/>
            <direct name="c_addr" input="matmul_8x8_pb.c_addr" output="matmul_pb.c_addr"/>
            <direct name="c_data_available" input="matmul_8x8_pb.c_data_available" output="matmul_pb.c_data_available"/>
            <direct name="clk" input="matmul_pb.clk" output="matmul_8x8_pb.clk"/>
          </interconnect>
        </mode>

        <!-- TODO:  Fix the delays based on what we get from COFFE -->
        <mode name="indiv_pe_mode">
          <pb_type name="indiv_pe_pb" num_pb="7">
            <input name="reset" num_pins="1"/>
            <input name="direct_inputs_a" num_pins="16"/>
            <input name="direct_inputs_b" num_pins="16"/>
            <input name="direct_inputs_mode" num_pins="3"/>
            <input name="direct_inputs_dtype" num_pins="1"/>
            <output name="direct_out" num_pins="16"/>
            <clock name="clk" num_pins="1"/>

            <!-- There are total 12 modes under the individual pe mode. They arise from cross combinations of:
                 1. int8, fp16
                 2. sequential, combinatorial (or, with flop stages for IOs and without flop stages for IOs)
                 3. add, mult, mac
                 The sequential vs combinatorial modes are selectable by mode signal on each of the PBs below.
                 TODO: Add the seq_vs_comb mode signal in each PB below. 
            -->
            <mode name="indiv_pe_int8_add_mode">
              <pb_type name="indiv_pe_int8_add" blif_model=".subckt adder_int" num_pb="1">
                <input name="a" num_pins="16"/>
                <input name="b" num_pins="16"/>
                <output name="out" num_pins="16"/>
                <delay_constant max="68.74e-12" in_port="indiv_pe_int8_add.a" out_port="indiv_pe_int8_add.out"/>
                <delay_constant max="68.74e-12" in_port="indiv_pe_int8_add.b" out_port="indiv_pe_int8_add.out"/>

              </pb_type>
              <interconnect>
                <direct name="a" input="indiv_pe_pb.direct_inputs_a" output="indiv_pe_int8_add.a"/>
                <direct name="b" input="indiv_pe_pb.direct_inputs_b" output="indiv_pe_int8_add.b"/>
                <direct name="out" input="indiv_pe_int8_add.out" output="indiv_pe_pb.direct_out"/>
              </interconnect>
            </mode>

            <mode name="indiv_pe_int8_mult_mode">
              <pb_type name="indiv_pe_int8_mult" blif_model=".subckt multiply" num_pb="1">
                <input name="a" num_pins="8"/>
                <input name="b" num_pins="8"/>
                <output name="out" num_pins="16"/>
                <delay_constant max="68.74e-12" in_port="indiv_pe_int8_mult.a" out_port="indiv_pe_int8_mult.out"/>
                <delay_constant max="68.74e-12" in_port="indiv_pe_int8_mult.b" out_port="indiv_pe_int8_mult.out"/>

              </pb_type>
              <interconnect>
                <direct name="a" input="indiv_pe_pb.direct_inputs_a[7:0]" output="indiv_pe_int8_mult.a"/>
                <direct name="b" input="indiv_pe_pb.direct_inputs_b[7:0]" output="indiv_pe_int8_mult.b"/>
                <direct name="out" input="indiv_pe_int8_mult.out" output="indiv_pe_pb.direct_out"/>
              </interconnect>
            </mode>

            <mode name="indiv_pe_int8_mac_mode">
              <pb_type name="indiv_pe_int8_mac" blif_model=".subckt mac_int" num_pb="1">
                <input name="a" num_pins="8"/>
                <input name="b" num_pins="8"/>
                <output name="out" num_pins="16"/>
                <delay_constant max="68.74e-12" in_port="indiv_pe_int8_mac.a" out_port="indiv_pe_int8_mac.out"/>
                <delay_constant max="68.74e-12" in_port="indiv_pe_int8_mac.b" out_port="indiv_pe_int8_mac.out"/>

              </pb_type>
              <interconnect>
                <direct name="a" input="indiv_pe_pb.direct_inputs_a[7:0]" output="indiv_pe_int8_mac.a"/>
                <direct name="b" input="indiv_pe_pb.direct_inputs_b[7:0]" output="indiv_pe_int8_mac.b"/>
                <direct name="out" input="indiv_pe_int8_mac.out" output="indiv_pe_pb.direct_out"/>
              </interconnect>
            </mode>

            <mode name="indiv_pe_fp16_add_mode">
              <pb_type name="indiv_pe_fp16_add" blif_model=".subckt adder_fp" num_pb="1">
                <input name="a" num_pins="16"/>
                <input name="b" num_pins="16"/>
                <output name="out" num_pins="16"/>
                <delay_constant max="68.74e-12" in_port="indiv_pe_fp16_add.a" out_port="indiv_pe_fp16_add.out"/>
                <delay_constant max="68.74e-12" in_port="indiv_pe_fp16_add.b" out_port="indiv_pe_fp16_add.out"/>
              </pb_type>
              <interconnect>
                <direct name="a" input="indiv_pe_pb.direct_inputs_a" output="indiv_pe_fp16_add.a"/>
                <direct name="b" input="indiv_pe_pb.direct_inputs_b" output="indiv_pe_fp16_add.b"/>
                <direct name="out" input="indiv_pe_fp16_add.out" output="indiv_pe_pb.direct_out"/>
              </interconnect>
            </mode>

            <mode name="indiv_pe_fp16_mult_mode">
                <pb_type name="indiv_pe_fp16_mult" blif_model=".subckt multiply_fp" num_pb="1">
                  <input name="a" num_pins="16"/>
                  <input name="b" num_pins="16"/>
                  <output name="out" num_pins="16"/>
                  <delay_constant max="68.74e-12" in_port="indiv_pe_fp16_mult.a" out_port="indiv_pe_fp16_mult.out"/>
                  <delay_constant max="68.74e-12" in_port="indiv_pe_fp16_mult.b" out_port="indiv_pe_fp16_mult.out"/>
                </pb_type>
                <interconnect>
                  <direct name="a" input="indiv_pe_pb.direct_inputs_a" output="indiv_pe_fp16_mult.a"/>
                  <direct name="b" input="indiv_pe_pb.direct_inputs_b" output="indiv_pe_fp16_mult.b"/>
                  <direct name="out" input="indiv_pe_fp16_mult.out" output="indiv_pe_pb.direct_out"/>
                </interconnect>
            </mode>

            <mode name="indiv_pe_fp16_mac_mode">
                <pb_type name="indiv_pe_fp16_mac" blif_model=".subckt mac_fp" num_pb="1">
                  <input name="a" num_pins="16"/>
                  <input name="b" num_pins="16"/>
                  <output name="out" num_pins="16"/>
                  <delay_constant max="68.74e-12" in_port="indiv_pe_fp16_mac.a" out_port="indiv_pe_fp16_mac.out"/>
                  <delay_constant max="68.74e-12" in_port="indiv_pe_fp16_mac.b" out_port="indiv_pe_fp16_mac.out"/>
                </pb_type>
                <interconnect>
                  <direct name="a" input="indiv_pe_pb.direct_inputs_a" output="indiv_pe_fp16_mac.a"/>
                  <direct name="b" input="indiv_pe_pb.direct_inputs_b" output="indiv_pe_fp16_mac.b"/>
                  <direct name="out" input="indiv_pe_fp16_mac.out" output="indiv_pe_pb.direct_out"/>
                </interconnect>
            </mode>
          </pb_type>

          <interconnect>
            <complete name="reset" input="matmul_pb.reset" output="indiv_pe_pb[6:0].reset"/>

            <direct name="direct_inputs_a1" input="matmul_pb.b_loc" output="indiv_pe_pb[0:0].direct_inputs_a[7:0]"/>
            <direct name="direct_inputs_a2" input="matmul_pb.a_loc" output="indiv_pe_pb[0:0].direct_inputs_a[15:8]"/>
            <direct name="direct_inputs_a3" input="matmul_pb.final_mat_mul_size" output="indiv_pe_pb[1:1].direct_inputs_a[7:0]"/>
            <direct name="direct_inputs_a4" input="matmul_pb.validity_mask_b_cols" output="indiv_pe_pb[1:1].direct_inputs_a[15:8]"/>
            <direct name="direct_inputs_a5" input="matmul_pb.validity_mask_a_cols_b_rows" output="indiv_pe_pb[2:2].direct_inputs_a[7:0]"/>
            <direct name="direct_inputs_a6" input="matmul_pb.validity_mask_a_rows" output="indiv_pe_pb[2:2].direct_inputs_a[15:8]"/>
            <direct name="direct_inputs_a7" input="matmul_pb.b_data[15:0]" output="indiv_pe_pb[3:3].direct_inputs_a[15:0]"/>
            <direct name="direct_inputs_a8" input="matmul_pb.b_data[31:16]" output="indiv_pe_pb[4:4].direct_inputs_a[15:0]"/>
            <direct name="direct_inputs_a9" input="matmul_pb.b_data[47:32]" output="indiv_pe_pb[5:5].direct_inputs_a[15:0]"/>
            <direct name="direct_inputs_a0" input="matmul_pb.b_data[63:48]" output="indiv_pe_pb[6:6].direct_inputs_a[15:0]"/>

            <direct name="direct_inputs_b0" input="matmul_pb.a_data[15:0]"  output="indiv_pe_pb[0:0].direct_inputs_b[15:0]"/>
            <direct name="direct_inputs_b1" input="matmul_pb.a_data[31:16]" output="indiv_pe_pb[1:1].direct_inputs_b[15:0]"/>
            <direct name="direct_inputs_b2" input="matmul_pb.a_data[47:32]" output="indiv_pe_pb[2:2].direct_inputs_b[15:0]"/>
            <direct name="direct_inputs_b3" input="matmul_pb.a_data[63:48]" output="indiv_pe_pb[3:3].direct_inputs_b[15:0]"/>
            <direct name="direct_inputs_b4" input="matmul_pb.address_stride_c[15:0]" output="indiv_pe_pb[4:4].direct_inputs_b[15:0]"/>
            <direct name="direct_inputs_b5" input="matmul_pb.address_stride_b[15:0]" output="indiv_pe_pb[5:5].direct_inputs_b[15:0]"/>
            <direct name="direct_inputs_b6" input="matmul_pb.address_stride_a[15:0]" output="indiv_pe_pb[6:6].direct_inputs_b[15:0]"/>

            <direct name="direct_inputs_mode1" input="matmul_pb.address_mat_c[2:0]"   output="indiv_pe_pb[0:0].direct_inputs_mode[2:0]"/>
            <direct name="direct_inputs_mode2" input="matmul_pb.address_mat_c[5:3]"   output="indiv_pe_pb[1:1].direct_inputs_mode[2:0]"/>
            <direct name="direct_inputs_mode3" input="matmul_pb.address_mat_c[8:6]"   output="indiv_pe_pb[2:2].direct_inputs_mode[2:0]"/>
            <direct name="direct_inputs_mode4" input="matmul_pb.address_mat_c[11:9]"  output="indiv_pe_pb[3:3].direct_inputs_mode[2:0]"/>
            <direct name="direct_inputs_mode5" input="matmul_pb.address_mat_c[14:12]" output="indiv_pe_pb[4:4].direct_inputs_mode[2:0]"/>
            <direct name="direct_inputs_mode6" input="matmul_pb.address_mat_c[15]"    output="indiv_pe_pb[5:5].direct_inputs_mode[0]"/>
            <direct name="direct_inputs_mode7" input="matmul_pb.address_mat_b[1:0]" output="indiv_pe_pb[5:5].direct_inputs_mode[2:1]"/>
            <direct name="direct_inputs_mode8" input="matmul_pb.address_mat_b[4:2]" output="indiv_pe_pb[6:6].direct_inputs_mode[2:0]"/>

            <direct name="direct_inputs_dtype" input="matmul_pb.address_mat_b[11:5]" output="indiv_pe_pb[6:0].direct_inputs_dtype"/>

            <direct name="direct_out1" input="indiv_pe_pb[3:0].direct_out[15:0]" output="matmul_pb.c_data_out"/>
            <direct name="direct_out2" input="indiv_pe_pb[4].direct_out[15:0]" output="matmul_pb.a_addr"/>
            <direct name="direct_out3" input="indiv_pe_pb[5].direct_out[15:0]" output="matmul_pb.b_addr"/>
            <direct name="direct_out4" input="indiv_pe_pb[6].direct_out[15:0]" output="matmul_pb.c_addr"/>

            <complete name="clk" input="matmul_pb.clk" output="indiv_pe_pb[6:0].clk"/>
          </interconnect>
        </mode>

      </pb_type> <!-- End of top-level PB inside matmul -->

      <interconnect>
        <!--50% sparse crossbar means 50% of the lines can reach an actual input of the matmul
            We do this by splitting inputs into two buckets and having two full crossbars-->
        <complete name="first_half"  
          input="matmul.address_mat_a 
                 matmul.address_mat_b 
                 matmul.address_mat_c 
                 matmul.address_stride_a 
                 matmul.address_stride_b 
                 matmul.address_stride_c 
                 matmul.validity_mask_a_rows
                 matmul.validity_mask_a_cols_b_rows
                 matmul.validity_mask_b_cols
                 matmul.a_loc
                 matmul.b_loc"
         output="matmul_pb.address_mat_a 
                 matmul_pb.address_mat_b 
                 matmul_pb.address_mat_c 
                 matmul_pb.address_stride_a 
                 matmul_pb.address_stride_b 
                 matmul_pb.address_stride_c 
                 matmul_pb.validity_mask_a_rows
                 matmul_pb.validity_mask_a_cols_b_rows
                 matmul_pb.validity_mask_b_cols
                 matmul_pb.a_loc
                 matmul_pb.b_loc">
            <!-- TODO: Need to update delays-->
            <delay_constant max="134e-12" in_port="matmul.address_mat_a" out_port="matmul_pb.address_mat_a"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_a" out_port="matmul_pb.address_mat_b"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_a" out_port="matmul_pb.address_mat_c"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_a" out_port="matmul_pb.address_stride_a"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_a" out_port="matmul_pb.address_stride_b"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_a" out_port="matmul_pb.address_stride_c"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_a" out_port="matmul_pb.validity_mask_a_rows"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_a" out_port="matmul_pb.validity_mask_a_cols_b_rows"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_a" out_port="matmul_pb.validity_mask_b_cols"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_a" out_port="matmul_pb.a_loc"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_a" out_port="matmul_pb.b_loc"/>

            <delay_constant max="134e-12" in_port="matmul.address_mat_b" out_port="matmul_pb.address_mat_a"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_b" out_port="matmul_pb.address_mat_b"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_b" out_port="matmul_pb.address_mat_c"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_b" out_port="matmul_pb.address_stride_a"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_b" out_port="matmul_pb.address_stride_b"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_b" out_port="matmul_pb.address_stride_c"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_b" out_port="matmul_pb.validity_mask_a_rows"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_b" out_port="matmul_pb.validity_mask_a_cols_b_rows"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_b" out_port="matmul_pb.validity_mask_b_cols"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_b" out_port="matmul_pb.a_loc"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_b" out_port="matmul_pb.b_loc"/>

            <delay_constant max="134e-12" in_port="matmul.address_mat_c" out_port="matmul_pb.address_mat_a"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_c" out_port="matmul_pb.address_mat_b"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_c" out_port="matmul_pb.address_mat_c"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_c" out_port="matmul_pb.address_stride_a"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_c" out_port="matmul_pb.address_stride_b"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_c" out_port="matmul_pb.address_stride_c"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_c" out_port="matmul_pb.validity_mask_a_rows"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_c" out_port="matmul_pb.validity_mask_a_cols_b_rows"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_c" out_port="matmul_pb.validity_mask_b_cols"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_c" out_port="matmul_pb.a_loc"/>
            <delay_constant max="134e-12" in_port="matmul.address_mat_c" out_port="matmul_pb.b_loc"/>

            <delay_constant max="134e-12" in_port="matmul.address_stride_a" out_port="matmul_pb.address_mat_a"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_a" out_port="matmul_pb.address_mat_b"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_a" out_port="matmul_pb.address_mat_c"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_a" out_port="matmul_pb.address_stride_a"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_a" out_port="matmul_pb.address_stride_b"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_a" out_port="matmul_pb.address_stride_c"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_a" out_port="matmul_pb.validity_mask_a_rows"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_a" out_port="matmul_pb.validity_mask_a_cols_b_rows"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_a" out_port="matmul_pb.validity_mask_b_cols"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_a" out_port="matmul_pb.a_loc"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_a" out_port="matmul_pb.b_loc"/>

            <delay_constant max="134e-12" in_port="matmul.address_stride_b" out_port="matmul_pb.address_mat_a"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_b" out_port="matmul_pb.address_mat_b"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_b" out_port="matmul_pb.address_mat_c"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_b" out_port="matmul_pb.address_stride_a"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_b" out_port="matmul_pb.address_stride_b"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_b" out_port="matmul_pb.address_stride_c"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_b" out_port="matmul_pb.validity_mask_a_rows"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_b" out_port="matmul_pb.validity_mask_a_cols_b_rows"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_b" out_port="matmul_pb.validity_mask_b_cols"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_b" out_port="matmul_pb.a_loc"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_b" out_port="matmul_pb.b_loc"/>

            <delay_constant max="134e-12" in_port="matmul.address_stride_c" out_port="matmul_pb.address_mat_a"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_c" out_port="matmul_pb.address_mat_b"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_c" out_port="matmul_pb.address_mat_c"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_c" out_port="matmul_pb.address_stride_a"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_c" out_port="matmul_pb.address_stride_b"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_c" out_port="matmul_pb.address_stride_c"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_c" out_port="matmul_pb.validity_mask_a_rows"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_c" out_port="matmul_pb.validity_mask_a_cols_b_rows"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_c" out_port="matmul_pb.validity_mask_b_cols"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_c" out_port="matmul_pb.a_loc"/>
            <delay_constant max="134e-12" in_port="matmul.address_stride_c" out_port="matmul_pb.b_loc"/>

            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_rows" out_port="matmul_pb.address_mat_a"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_rows" out_port="matmul_pb.address_mat_b"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_rows" out_port="matmul_pb.address_mat_c"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_rows" out_port="matmul_pb.address_stride_a"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_rows" out_port="matmul_pb.address_stride_b"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_rows" out_port="matmul_pb.address_stride_c"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_rows" out_port="matmul_pb.validity_mask_a_rows"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_rows" out_port="matmul_pb.validity_mask_a_cols_b_rows"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_rows" out_port="matmul_pb.validity_mask_b_cols"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_rows" out_port="matmul_pb.a_loc"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_rows" out_port="matmul_pb.b_loc"/>

            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_cols_b_rows" out_port="matmul_pb.address_mat_a"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_cols_b_rows" out_port="matmul_pb.address_mat_b"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_cols_b_rows" out_port="matmul_pb.address_mat_c"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_cols_b_rows" out_port="matmul_pb.address_stride_a"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_cols_b_rows" out_port="matmul_pb.address_stride_b"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_cols_b_rows" out_port="matmul_pb.address_stride_c"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_cols_b_rows" out_port="matmul_pb.validity_mask_a_rows"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_cols_b_rows" out_port="matmul_pb.validity_mask_a_cols_b_rows"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_cols_b_rows" out_port="matmul_pb.validity_mask_b_cols"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_cols_b_rows" out_port="matmul_pb.a_loc"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_a_cols_b_rows" out_port="matmul_pb.b_loc"/>

            <delay_constant max="134e-12" in_port="matmul.validity_mask_b_cols" out_port="matmul_pb.address_mat_a"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_b_cols" out_port="matmul_pb.address_mat_b"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_b_cols" out_port="matmul_pb.address_mat_c"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_b_cols" out_port="matmul_pb.address_stride_a"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_b_cols" out_port="matmul_pb.address_stride_b"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_b_cols" out_port="matmul_pb.address_stride_c"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_b_cols" out_port="matmul_pb.validity_mask_a_rows"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_b_cols" out_port="matmul_pb.validity_mask_a_cols_b_rows"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_b_cols" out_port="matmul_pb.validity_mask_b_cols"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_b_cols" out_port="matmul_pb.a_loc"/>
            <delay_constant max="134e-12" in_port="matmul.validity_mask_b_cols" out_port="matmul_pb.b_loc"/>

            <delay_constant max="134e-12" in_port="matmul.a_loc" out_port="matmul_pb.address_mat_a"/>
            <delay_constant max="134e-12" in_port="matmul.a_loc" out_port="matmul_pb.address_mat_b"/>
            <delay_constant max="134e-12" in_port="matmul.a_loc" out_port="matmul_pb.address_mat_c"/>
            <delay_constant max="134e-12" in_port="matmul.a_loc" out_port="matmul_pb.address_stride_a"/>
            <delay_constant max="134e-12" in_port="matmul.a_loc" out_port="matmul_pb.address_stride_b"/>
            <delay_constant max="134e-12" in_port="matmul.a_loc" out_port="matmul_pb.address_stride_c"/>
            <delay_constant max="134e-12" in_port="matmul.a_loc" out_port="matmul_pb.validity_mask_a_rows"/>
            <delay_constant max="134e-12" in_port="matmul.a_loc" out_port="matmul_pb.validity_mask_a_cols_b_rows"/>
            <delay_constant max="134e-12" in_port="matmul.a_loc" out_port="matmul_pb.validity_mask_b_cols"/>
            <delay_constant max="134e-12" in_port="matmul.a_loc" out_port="matmul_pb.final_mat_mul_size"/>
            <delay_constant max="134e-12" in_port="matmul.a_loc" out_port="matmul_pb.a_loc"/>
            <delay_constant max="134e-12" in_port="matmul.a_loc" out_port="matmul_pb.b_loc"/>

            <delay_constant max="134e-12" in_port="matmul.b_loc" out_port="matmul_pb.address_mat_a"/>
            <delay_constant max="134e-12" in_port="matmul.b_loc" out_port="matmul_pb.address_mat_b"/>
            <delay_constant max="134e-12" in_port="matmul.b_loc" out_port="matmul_pb.address_mat_c"/>
            <delay_constant max="134e-12" in_port="matmul.b_loc" out_port="matmul_pb.address_stride_a"/>
            <delay_constant max="134e-12" in_port="matmul.b_loc" out_port="matmul_pb.address_stride_b"/>
            <delay_constant max="134e-12" in_port="matmul.b_loc" out_port="matmul_pb.address_stride_c"/>
            <delay_constant max="134e-12" in_port="matmul.b_loc" out_port="matmul_pb.validity_mask_a_rows"/>
            <delay_constant max="134e-12" in_port="matmul.b_loc" out_port="matmul_pb.validity_mask_a_cols_b_rows"/>
            <delay_constant max="134e-12" in_port="matmul.b_loc" out_port="matmul_pb.validity_mask_b_cols"/>
            <delay_constant max="134e-12" in_port="matmul.b_loc" out_port="matmul_pb.final_mat_mul_size"/>
            <delay_constant max="134e-12" in_port="matmul.b_loc" out_port="matmul_pb.a_loc"/>
            <delay_constant max="134e-12" in_port="matmul.b_loc" out_port="matmul_pb.b_loc"/>
        </complete>  
        <complete name="second_half" 
           input="matmul.a_data 
                  matmul.b_data 
                  matmul.slice_dtype
                  matmul.slice_mode
                  matmul.final_mat_mul_size"
          output="matmul_pb.a_data 
                  matmul_pb.b_data 
                  matmul_pb.slice_dtype
                  matmul_pb.slice_mode
                  matmul_pb.final_mat_mul_size">

            <delay_constant max="134e-12" in_port="matmul.a_data" out_port="matmul_pb.a_data"/>
            <delay_constant max="134e-12" in_port="matmul.a_data" out_port="matmul_pb.b_data"/>
            <delay_constant max="134e-12" in_port="matmul.a_data" out_port="matmul_pb.slice_dtype"/>
            <delay_constant max="134e-12" in_port="matmul.a_data" out_port="matmul_pb.slice_mode"/>
            <delay_constant max="134e-12" in_port="matmul.a_data" out_port="matmul_pb.final_mat_mul_size"/>

            <delay_constant max="134e-12" in_port="matmul.b_data" out_port="matmul_pb.a_data"/>
            <delay_constant max="134e-12" in_port="matmul.b_data" out_port="matmul_pb.b_data"/>
            <delay_constant max="134e-12" in_port="matmul.b_data" out_port="matmul_pb.slice_dtype"/>
            <delay_constant max="134e-12" in_port="matmul.b_data" out_port="matmul_pb.slice_mode"/>
            <delay_constant max="134e-12" in_port="matmul.b_data" out_port="matmul_pb.final_mat_mul_size"/>

            <delay_constant max="134e-12" in_port="matmul.slice_dtype" out_port="matmul_pb.a_data"/>
            <delay_constant max="134e-12" in_port="matmul.slice_dtype" out_port="matmul_pb.b_data"/>
            <delay_constant max="134e-12" in_port="matmul.slice_dtype" out_port="matmul_pb.slice_dtype"/>
            <delay_constant max="134e-12" in_port="matmul.slice_dtype" out_port="matmul_pb.slice_mode"/>
            <delay_constant max="134e-12" in_port="matmul.slice_dtype" out_port="matmul_pb.final_mat_mul_size"/>

            <delay_constant max="134e-12" in_port="matmul.slice_mode" out_port="matmul_pb.a_data"/>
            <delay_constant max="134e-12" in_port="matmul.slice_mode" out_port="matmul_pb.b_data"/>
            <delay_constant max="134e-12" in_port="matmul.slice_mode" out_port="matmul_pb.slice_dtype"/>
            <delay_constant max="134e-12" in_port="matmul.slice_mode" out_port="matmul_pb.slice_mode"/>
            <delay_constant max="134e-12" in_port="matmul.slice_mode" out_port="matmul_pb.final_mat_mul_size"/>

            <delay_constant max="134e-12" in_port="matmul.final_mat_mul_size" out_port="matmul_pb.a_data"/>
            <delay_constant max="134e-12" in_port="matmul.final_mat_mul_size" out_port="matmul_pb.b_data"/>
            <delay_constant max="134e-12" in_port="matmul.final_mat_mul_size" out_port="matmul_pb.slice_dtype"/>
            <delay_constant max="134e-12" in_port="matmul.final_mat_mul_size" out_port="matmul_pb.slice_mode"/>
            <delay_constant max="134e-12" in_port="matmul.final_mat_mul_size" out_port="matmul_pb.final_mat_mul_size"/>
        </complete>  
        <direct name="reset" input="matmul.reset" output="matmul_pb.reset"></direct>
        <direct name="pe_reset" input="matmul.pe_reset" output="matmul_pb.pe_reset"></direct>
        <direct name="start_mat_mul" input="matmul.start_mat_mul" output="matmul_pb.start_mat_mul"></direct>
        <direct name="a_data_in" input="matmul.a_data_in"    output="matmul_pb.a_data_in"></direct>
        <direct name="b_data_in" input="matmul.b_data_in"    output="matmul_pb.b_data_in"></direct>
        <direct name="c_data_in" input="matmul.c_data_in"    output="matmul_pb.c_data_in"></direct>
        <direct name="a_data_out" input="matmul_pb.a_data_out" output="matmul.a_data_out"></direct>
        <direct name="b_data_out" input="matmul_pb.b_data_out" output="matmul.b_data_out"></direct>
        <direct name="c_data_out" input="matmul_pb.c_data_out" output="matmul.c_data_out"></direct>
        <direct name="c_data_out_dir_int" input="matmul_pb.c_data_out_dir_int" output="matmul.c_data_out_dir_int"></direct>
        <direct name="done_mat_mul" input="matmul_pb.done_mat_mul" output="matmul.done_mat_mul"></direct>
        <direct name="a_addr" input="matmul_pb.a_addr" output="matmul.a_addr"></direct>
        <direct name="b_addr" input="matmul_pb.b_addr" output="matmul.b_addr"></direct>
        <direct name="c_addr" input="matmul_pb.c_addr" output="matmul.c_addr"></direct>
        <direct name="c_data_available" input="matmul_pb.c_data_available" output="matmul.c_data_available"></direct>
        <direct name="clk" input="matmul.clk" output="matmul_pb.clk"></direct>
      </interconnect>

      <power method="sum-of-children"/>
    </pb_type> <!-- End of matmul -->
    <interconnect>
        <complete name="first_half"  
         input="matmul_top.matmul_I1"
         output="matmul.address_mat_a 
                 matmul.address_mat_b 
                 matmul.address_mat_c 
                 matmul.address_stride_a 
                 matmul.address_stride_b 
                 matmul.address_stride_c 
                 matmul.validity_mask_a_rows
                 matmul.validity_mask_a_cols_b_rows
                 matmul.validity_mask_b_cols
                 matmul.a_loc
                 matmul.b_loc"/>

        <complete name="second_half" 
          input="matmul_top.matmul_I2"
          output="matmul.a_data 
                  matmul.b_data 
                  matmul.slice_dtype
                  matmul.slice_mode
                  matmul.final_mat_mul_size"/>

        <direct name="reset" input="matmul_top.reset" output="matmul.reset"></direct>
        <direct name="pe_reset" input="matmul_top.pe_reset" output="matmul.pe_reset"></direct>
        <direct name="start_mat_mul" input="matmul_top.start_mat_mul" output="matmul.start_mat_mul"></direct>
        <direct name="a_data_in" input="matmul_top.a_data_in"    output="matmul.a_data_in"></direct>
        <direct name="b_data_in" input="matmul_top.b_data_in"    output="matmul.b_data_in"></direct>
        <direct name="c_data_in" input="matmul_top.c_data_in"    output="matmul.c_data_in"></direct>
        <direct name="a_data_out" input="matmul.a_data_out" output="matmul_top.a_data_out"></direct>
        <direct name="b_data_out" input="matmul.b_data_out" output="matmul_top.b_data_out"></direct>
        <direct name="c_data_out" input="matmul.c_data_out" output="matmul_top.c_data_out"></direct>
        <direct name="c_data_out_dir_int" input="matmul.c_data_out_dir_int" output="matmul_top.c_data_out_dir_int"></direct>
        <direct name="done_mat_mul" input="matmul.done_mat_mul" output="matmul_top.done_mat_mul"></direct>
        <direct name="a_addr" input="matmul.a_addr" output="matmul_top.a_addr"></direct>
        <direct name="b_addr" input="matmul.b_addr" output="matmul_top.b_addr"></direct>
        <direct name="c_addr" input="matmul.c_addr" output="matmul_top.c_addr"></direct>
        <direct name="c_data_available" input="matmul.c_data_available" output="matmul_top.c_data_available"></direct>
        <direct name="clk" input="matmul_top.clk" output="matmul.clk"></direct>
    </interconnect>
    </pb_type>
    <!-- End of matmul top level -->
    <!-- Define matrix multiplier end -->

    <!-- Define fracturable memory begin -->
    <!-- 32 Kb Memory that can operate from 512x64 to 32Kx1 for single-port mode and 1024x32 to 32Kx1 for dual-port mode.  
           Area and delay based off Stratix IV 9K and 144K memories (delay from linear interpolation, Tsu(483 ps, 636 ps) Tco(1084ps, 1969ps)).  
           Input delay = 204ps (from Stratix IV LAB line) - 72ps (this architecture does not lump connection box delay in internal delay)
           Output delay = M9K buffer 50ps
		   
		   Area is obtained by appropriately scaling and adjusting the published Stratix III (which is architecturally identical to Stratix IV)
		   data from H. Wong, V. Betz and J. Rose, "Comparing FPGA vs. Custom CMOS and the Impact on Processor Microarchitecture", FPGA 2011.
		   Linearly interpolating (by bit count) between the M9k and M144k areas to obtain an M32k (our RAM size) point yields a 65 nm area of
		   of 0.153 mm^2. Interpolating based on port count between the RAMs would instead yield an area of 0.209 mm^2 for our 32 kB RAM; since 
		   bit count accounts for more area than ports for a RAM this size we choose the bit count interpolation; however, since the port interpolation
		   is not radically different this also gives us confidence that interpolating based on bits is OK, but slightly underpredicts area.
		   Scaling to 40 nm^2 yields .0579 mm^2, and converting to MWTUs at 60 L^2 / MWTU yields 604,000 MWTUs. This includes routing. A Stratix IV
		   M9K RAM is one row high and hence has one routing tile (one horizonal and one vertical routing segment area). An M144k RAM has 8 such tiles.
		   Linearly interpolating on
		   bits to 32 kb yields 2.2 routing tiles incorporated in the area number above. The inter-block routing represents 30% of the area of a logic 
		   tile according to D. Lewis et al, "Architectural Enhancements in Stratix V," FPGA 2013. Hence we should subtract 0.3 * 2.2 * 84,375 MWTUs to
		   obtain a RAM core area (not including inter-block routing) of 548,000 MWTU areas for our 32 kb RAM in a 40 nm process.

       Delay calculation for M20k:
         Setup time:
          Linear interpolation between 483ps for M9k and 636ps for M144k gives
          509ps for M32k and 472ps for M20k
         Clock to Q time: 
          Linear interpolation between 1084ps for M9k and 1969ps for M144k gives
          1234ps for M32k and 1156ps for M20k
         Input delay and output delay are the same as M32k 

       Scaling down from 40nm to 22nm (assuming 1V operation in both cases)
       Delay factor is 1.32
       So, setup time = 472ps / 1.32 = 358ps
           clk-to-q time = 1156ps / 1.32 = 875ps
           input delay = 132ps / 1.32 = 100ps
           output delay = 40ps / 1.32 = 30ps


       Area calculation for M20k:
       In the paper, area of M9K is 0.0635 and area of M144K is 0.5897
       Linear interpolation gives 0.153 mm2 for M32k and 0.1063 mm2 for M20k
       Scaling relationship for area is S^2, where S is the ratio of the node sizes.
       In this case, 65nm/40nm = 1.625 = S.
       S^2 = 1.625^2 = 2.64
       Scaling to 40nm^2 gives 0.153/2.64 = 0.0579mm2 for M32K and 0.1063/2.64 = 0.040265mm2 for M20k.
       Converting to MWTA at 60 L^2 / MWTA (1 MWTA = 60 * 40 * 40 nm2 = 96000nm2):
           0.0579mm2 = 0.0579 * 1000000 * 1000000 nm2
                     = (0.0579 * 1000000 * 1000000) / (96000) = 603125 ~= 604000 MWTAs
           0.040265mm2 =  0.040265 * 1000000 * 1000000 nm2
                     = (0.040265 * 1000000 * 1000000) / (96000) = 419427 ~= 420000 MWTAs 
       Stratix IV M9k has 1 tile.
       Stratix IV M32k has 8 tiles.
       Linear interpolation means: 
         M32k has 2.2 tiles
         M20k has 1.57 tiles
      
       For core area for M20k, subtract 0.3 * 1.57 * 84375 = 39740
       to get: 380260 MWTAs

       Scaling down from 40nm to 22nm (assuming 1V operation in both cases)
       is not required because the area is already in MWTAs
      -->
    <pb_type name="memory">
      <input name="addr1" num_pins="11"/>
      <input name="addr2" num_pins="11"/>
      <input name="data" num_pins="40"/>
      <input name="we1" num_pins="1"/>
      <input name="we2" num_pins="1"/>
      <output name="out" num_pins="40"/>
      <clock name="clk" num_pins="1"/>
      <!-- Specify single port mode first -->
      <mode name="mem_512x40_sp">
        <pb_type name="mem_512x40_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
          <input name="addr" num_pins="9" port_class="address"/>
          <input name="data" num_pins="40" port_class="data_in"/>
          <input name="we" num_pins="1" port_class="write_en"/>
          <output name="out" num_pins="40" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="358e-12" port="mem_512x40_sp.addr" clock="clk"/>
          <T_setup value="358e-12" port="mem_512x40_sp.data" clock="clk"/>
          <T_setup value="358e-12" port="mem_512x40_sp.we" clock="clk"/>
          <T_clock_to_Q max="875e-12" port="mem_512x40_sp.out" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="9.0e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[8:0]" output="mem_512x40_sp.addr">
            <delay_constant max="100e-12" in_port="memory.addr1[8:0]" out_port="mem_512x40_sp.addr"/>
          </direct>
          <direct name="data1" input="memory.data" output="mem_512x40_sp.data">
            <delay_constant max="100e-12" in_port="memory.data" out_port="mem_512x40_sp.data"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_512x40_sp.we">
            <delay_constant max="100e-12" in_port="memory.we1" out_port="mem_512x40_sp.we"/>
          </direct>
          <direct name="dataout1" input="mem_512x40_sp.out" output="memory.out">
            <delay_constant max="30e-12" in_port="mem_512x40_sp.out" out_port="memory.out"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_512x40_sp.clk">
             </direct>
        </interconnect>
      </mode>
      <mode name="mem_512x32_sp">
        <pb_type name="mem_512x32_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
          <input name="addr" num_pins="9" port_class="address"/>
          <input name="data" num_pins="32" port_class="data_in"/>
          <input name="we" num_pins="1" port_class="write_en"/>
          <output name="out" num_pins="32" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="358e-12" port="mem_512x32_sp.addr" clock="clk"/>
          <T_setup value="358e-12" port="mem_512x32_sp.data" clock="clk"/>
          <T_setup value="358e-12" port="mem_512x32_sp.we" clock="clk"/>
          <T_clock_to_Q max="875e-12" port="mem_512x32_sp.out" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="9.0e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[8:0]" output="mem_512x32_sp.addr">
            <delay_constant max="100e-12" in_port="memory.addr1[8:0]" out_port="mem_512x32_sp.addr"/>
          </direct>
          <direct name="data1" input="memory.data[31:0]" output="mem_512x32_sp.data">
            <delay_constant max="100e-12" in_port="memory.data[31:0]" out_port="mem_512x32_sp.data"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_512x32_sp.we">
            <delay_constant max="100e-12" in_port="memory.we1" out_port="mem_512x32_sp.we"/>
          </direct>
          <direct name="dataout1" input="mem_512x32_sp.out" output="memory.out[31:0]">
            <delay_constant max="30e-12" in_port="mem_512x32_sp.out" out_port="memory.out[31:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_512x32_sp.clk">
             </direct>
        </interconnect>
      </mode>
      <mode name="mem_1024x20_sp">
        <pb_type name="mem_1024x20_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
          <input name="addr" num_pins="10" port_class="address"/>
          <input name="data" num_pins="20" port_class="data_in"/>
          <input name="we" num_pins="1" port_class="write_en"/>
          <output name="out" num_pins="20" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="358e-12" port="mem_1024x20_sp.addr" clock="clk"/>
          <T_setup value="358e-12" port="mem_1024x20_sp.data" clock="clk"/>
          <T_setup value="358e-12" port="mem_1024x20_sp.we" clock="clk"/>
          <T_clock_to_Q max="875e-12" port="mem_1024x20_sp.out" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="9.0e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[9:0]" output="mem_1024x20_sp.addr">
            <delay_constant max="100e-12" in_port="memory.addr1[9:0]" out_port="mem_1024x20_sp.addr"/>
          </direct>
          <direct name="data1" input="memory.data[19:0]" output="mem_1024x20_sp.data">
            <delay_constant max="100e-12" in_port="memory.data[19:0]" out_port="mem_1024x20_sp.data"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_1024x20_sp.we">
            <delay_constant max="100e-12" in_port="memory.we1" out_port="mem_1024x20_sp.we"/>
          </direct>
          <direct name="dataout1" input="mem_1024x20_sp.out" output="memory.out[19:0]">
            <delay_constant max="30e-12" in_port="mem_1024x20_sp.out" out_port="memory.out[19:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_1024x20_sp.clk">
             </direct>
        </interconnect>
      </mode>
      <mode name="mem_1024x16_sp">
        <pb_type name="mem_1024x16_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
          <input name="addr" num_pins="10" port_class="address"/>
          <input name="data" num_pins="16" port_class="data_in"/>
          <input name="we" num_pins="1" port_class="write_en"/>
          <output name="out" num_pins="16" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="358e-12" port="mem_1024x16_sp.addr" clock="clk"/>
          <T_setup value="358e-12" port="mem_1024x16_sp.data" clock="clk"/>
          <T_setup value="358e-12" port="mem_1024x16_sp.we" clock="clk"/>
          <T_clock_to_Q max="875e-12" port="mem_1024x16_sp.out" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="9.0e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[9:0]" output="mem_1024x16_sp.addr">
            <delay_constant max="100e-12" in_port="memory.addr1[9:0]" out_port="mem_1024x16_sp.addr"/>
          </direct>
          <direct name="data1" input="memory.data[15:0]" output="mem_1024x16_sp.data">
            <delay_constant max="100e-12" in_port="memory.data[15:0]" out_port="mem_1024x16_sp.data"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_1024x16_sp.we">
            <delay_constant max="100e-12" in_port="memory.we1" out_port="mem_1024x16_sp.we"/>
          </direct>
          <direct name="dataout1" input="mem_1024x16_sp.out" output="memory.out[15:0]">
            <delay_constant max="30e-12" in_port="mem_1024x16_sp.out" out_port="memory.out[15:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_1024x16_sp.clk">
             </direct>
        </interconnect>
      </mode>
      <mode name="mem_2048x10_sp">
        <pb_type name="mem_2048x10_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
          <input name="addr" num_pins="11" port_class="address"/>
          <input name="data" num_pins="10" port_class="data_in"/>
          <input name="we" num_pins="1" port_class="write_en"/>
          <output name="out" num_pins="10" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="358e-12" port="mem_2048x10_sp.addr" clock="clk"/>
          <T_setup value="358e-12" port="mem_2048x10_sp.data" clock="clk"/>
          <T_setup value="358e-12" port="mem_2048x10_sp.we" clock="clk"/>
          <T_clock_to_Q max="875e-12" port="mem_2048x10_sp.out" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="9.0e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[10:0]" output="mem_2048x10_sp.addr">
            <delay_constant max="100e-12" in_port="memory.addr1[10:0]" out_port="mem_2048x10_sp.addr"/>
          </direct>
          <direct name="data1" input="memory.data[9:0]" output="mem_2048x10_sp.data">
            <delay_constant max="100e-12" in_port="memory.data[9:0]" out_port="mem_2048x10_sp.data"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_2048x10_sp.we">
            <delay_constant max="100e-12" in_port="memory.we1" out_port="mem_2048x10_sp.we"/>
          </direct>
          <direct name="dataout1" input="mem_2048x10_sp.out" output="memory.out[9:0]">
            <delay_constant max="30e-12" in_port="mem_2048x10_sp.out" out_port="memory.out[9:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_2048x10_sp.clk">
             </direct>
        </interconnect>
      </mode>
      <mode name="mem_2048x8_sp">
        <pb_type name="mem_2048x8_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
          <input name="addr" num_pins="11" port_class="address"/>
          <input name="data" num_pins="8" port_class="data_in"/>
          <input name="we" num_pins="1" port_class="write_en"/>
          <output name="out" num_pins="8" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="358e-12" port="mem_2048x8_sp.addr" clock="clk"/>
          <T_setup value="358e-12" port="mem_2048x8_sp.data" clock="clk"/>
          <T_setup value="358e-12" port="mem_2048x8_sp.we" clock="clk"/>
          <T_clock_to_Q max="875e-12" port="mem_2048x8_sp.out" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="9.0e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[10:0]" output="mem_2048x8_sp.addr">
            <delay_constant max="100e-12" in_port="memory.addr1[10:0]" out_port="mem_2048x8_sp.addr"/>
          </direct>
          <direct name="data1" input="memory.data[7:0]" output="mem_2048x8_sp.data">
            <delay_constant max="100e-12" in_port="memory.data[7:0]" out_port="mem_2048x8_sp.data"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_2048x8_sp.we">
            <delay_constant max="100e-12" in_port="memory.we1" out_port="mem_2048x8_sp.we"/>
          </direct>
          <direct name="dataout1" input="mem_2048x8_sp.out" output="memory.out[7:0]">
            <delay_constant max="30e-12" in_port="mem_2048x8_sp.out" out_port="memory.out[7:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_2048x8_sp.clk">
             </direct>
        </interconnect>
      </mode>
      <!-- Specify true dual port mode next -->
      <mode name="mem_1024x20_dp">
        <pb_type name="mem_1024x20_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
          <input name="addr1" num_pins="10" port_class="address1"/>
          <input name="addr2" num_pins="10" port_class="address2"/>
          <input name="data1" num_pins="20" port_class="data_in1"/>
          <input name="data2" num_pins="20" port_class="data_in2"/>
          <input name="we1" num_pins="1" port_class="write_en1"/>
          <input name="we2" num_pins="1" port_class="write_en2"/>
          <output name="out1" num_pins="20" port_class="data_out1"/>
          <output name="out2" num_pins="20" port_class="data_out2"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="358e-12" port="mem_1024x20_dp.addr1" clock="clk"/>
          <T_setup value="358e-12" port="mem_1024x20_dp.data1" clock="clk"/>
          <T_setup value="358e-12" port="mem_1024x20_dp.we1" clock="clk"/>
          <T_setup value="358e-12" port="mem_1024x20_dp.addr2" clock="clk"/>
          <T_setup value="358e-12" port="mem_1024x20_dp.data2" clock="clk"/>
          <T_setup value="358e-12" port="mem_1024x20_dp.we2" clock="clk"/>
          <T_clock_to_Q max="875e-12" port="mem_1024x20_dp.out1" clock="clk"/>
          <T_clock_to_Q max="875e-12" port="mem_1024x20_dp.out2" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="17.9e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[9:0]" output="mem_1024x20_dp.addr1">
            <delay_constant max="100e-12" in_port="memory.addr1[9:0]" out_port="mem_1024x20_dp.addr1"/>
          </direct>
          <direct name="address2" input="memory.addr2[9:0]" output="mem_1024x20_dp.addr2">
            <delay_constant max="100e-12" in_port="memory.addr2[9:0]" out_port="mem_1024x20_dp.addr2"/>
          </direct>
          <direct name="data1" input="memory.data[19:0]" output="mem_1024x20_dp.data1">
            <delay_constant max="100e-12" in_port="memory.data[19:0]" out_port="mem_1024x20_dp.data1"/>
          </direct>
          <direct name="data2" input="memory.data[39:20]" output="mem_1024x20_dp.data2">
            <delay_constant max="100e-12" in_port="memory.data[39:20]" out_port="mem_1024x20_dp.data2"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_1024x20_dp.we1">
            <delay_constant max="100e-12" in_port="memory.we1" out_port="mem_1024x20_dp.we1"/>
          </direct>
          <direct name="writeen2" input="memory.we2" output="mem_1024x20_dp.we2">
            <delay_constant max="100e-12" in_port="memory.we2" out_port="mem_1024x20_dp.we2"/>
          </direct>
          <direct name="dataout1" input="mem_1024x20_dp.out1" output="memory.out[19:0]">
            <delay_constant max="30e-12" in_port="mem_1024x20_dp.out1" out_port="memory.out[19:0]"/>
          </direct>
          <direct name="dataout2" input="mem_1024x20_dp.out2" output="memory.out[39:20]">
            <delay_constant max="30e-12" in_port="mem_1024x20_dp.out2" out_port="memory.out[39:20]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_1024x20_dp.clk">
             </direct>
        </interconnect>
      </mode>
      <mode name="mem_1024x16_dp">
        <pb_type name="mem_1024x16_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
          <input name="addr1" num_pins="10" port_class="address1"/>
          <input name="addr2" num_pins="10" port_class="address2"/>
          <input name="data1" num_pins="16" port_class="data_in1"/>
          <input name="data2" num_pins="16" port_class="data_in2"/>
          <input name="we1" num_pins="1" port_class="write_en1"/>
          <input name="we2" num_pins="1" port_class="write_en2"/>
          <output name="out1" num_pins="16" port_class="data_out1"/>
          <output name="out2" num_pins="16" port_class="data_out2"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="358e-12" port="mem_1024x16_dp.addr1" clock="clk"/>
          <T_setup value="358e-12" port="mem_1024x16_dp.data1" clock="clk"/>
          <T_setup value="358e-12" port="mem_1024x16_dp.we1" clock="clk"/>
          <T_setup value="358e-12" port="mem_1024x16_dp.addr2" clock="clk"/>
          <T_setup value="358e-12" port="mem_1024x16_dp.data2" clock="clk"/>
          <T_setup value="358e-12" port="mem_1024x16_dp.we2" clock="clk"/>
          <T_clock_to_Q max="875e-12" port="mem_1024x16_dp.out1" clock="clk"/>
          <T_clock_to_Q max="875e-12" port="mem_1024x16_dp.out2" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="17.9e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[9:0]" output="mem_1024x16_dp.addr1">
            <delay_constant max="100e-12" in_port="memory.addr1[9:0]" out_port="mem_1024x16_dp.addr1"/>
          </direct>
          <direct name="address2" input="memory.addr2[9:0]" output="mem_1024x16_dp.addr2">
            <delay_constant max="100e-12" in_port="memory.addr2[9:0]" out_port="mem_1024x16_dp.addr2"/>
          </direct>
          <direct name="data1" input="memory.data[15:0]" output="mem_1024x16_dp.data1">
            <delay_constant max="100e-12" in_port="memory.data[15:0]" out_port="mem_1024x16_dp.data1"/>
          </direct>
          <direct name="data2" input="memory.data[31:16]" output="mem_1024x16_dp.data2">
            <delay_constant max="100e-12" in_port="memory.data[31:16]" out_port="mem_1024x16_dp.data2"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_1024x16_dp.we1">
            <delay_constant max="100e-12" in_port="memory.we1" out_port="mem_1024x16_dp.we1"/>
          </direct>
          <direct name="writeen2" input="memory.we2" output="mem_1024x16_dp.we2">
            <delay_constant max="100e-12" in_port="memory.we2" out_port="mem_1024x16_dp.we2"/>
          </direct>
          <direct name="dataout1" input="mem_1024x16_dp.out1" output="memory.out[15:0]">
            <delay_constant max="30e-12" in_port="mem_1024x16_dp.out1" out_port="memory.out[15:0]"/>
          </direct>
          <direct name="dataout2" input="mem_1024x16_dp.out2" output="memory.out[31:16]">
            <delay_constant max="30e-12" in_port="mem_1024x16_dp.out2" out_port="memory.out[31:16]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_1024x16_dp.clk">
             </direct>
        </interconnect>
      </mode>
      <mode name="mem_2048x10_dp">
        <pb_type name="mem_2048x10_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
          <input name="addr1" num_pins="11" port_class="address1"/>
          <input name="addr2" num_pins="11" port_class="address2"/>
          <input name="data1" num_pins="10" port_class="data_in1"/>
          <input name="data2" num_pins="10" port_class="data_in2"/>
          <input name="we1" num_pins="1" port_class="write_en1"/>
          <input name="we2" num_pins="1" port_class="write_en2"/>
          <output name="out1" num_pins="10" port_class="data_out1"/>
          <output name="out2" num_pins="10" port_class="data_out2"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="358e-12" port="mem_2048x10_dp.addr1" clock="clk"/>
          <T_setup value="358e-12" port="mem_2048x10_dp.data1" clock="clk"/>
          <T_setup value="358e-12" port="mem_2048x10_dp.we1" clock="clk"/>
          <T_setup value="358e-12" port="mem_2048x10_dp.addr2" clock="clk"/>
          <T_setup value="358e-12" port="mem_2048x10_dp.data2" clock="clk"/>
          <T_setup value="358e-12" port="mem_2048x10_dp.we2" clock="clk"/>
          <T_clock_to_Q max="875e-12" port="mem_2048x10_dp.out1" clock="clk"/>
          <T_clock_to_Q max="875e-12" port="mem_2048x10_dp.out2" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="17.9e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[10:0]" output="mem_2048x10_dp.addr1">
            <delay_constant max="100e-12" in_port="memory.addr1[10:0]" out_port="mem_2048x10_dp.addr1"/>
          </direct>
          <direct name="address2" input="memory.addr2[10:0]" output="mem_2048x10_dp.addr2">
            <delay_constant max="100e-12" in_port="memory.addr2[10:0]" out_port="mem_2048x10_dp.addr2"/>
          </direct>
          <direct name="data1" input="memory.data[9:0]" output="mem_2048x10_dp.data1">
            <delay_constant max="100e-12" in_port="memory.data[9:0]" out_port="mem_2048x10_dp.data1"/>
          </direct>
          <direct name="data2" input="memory.data[19:10]" output="mem_2048x10_dp.data2">
            <delay_constant max="100e-12" in_port="memory.data[19:10]" out_port="mem_2048x10_dp.data2"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_2048x10_dp.we1">
            <delay_constant max="100e-12" in_port="memory.we1" out_port="mem_2048x10_dp.we1"/>
          </direct>
          <direct name="writeen2" input="memory.we2" output="mem_2048x10_dp.we2">
            <delay_constant max="100e-12" in_port="memory.we2" out_port="mem_2048x10_dp.we2"/>
          </direct>
          <direct name="dataout1" input="mem_2048x10_dp.out1" output="memory.out[9:0]">
            <delay_constant max="30e-12" in_port="mem_2048x10_dp.out1" out_port="memory.out[9:0]"/>
          </direct>
          <direct name="dataout2" input="mem_2048x10_dp.out2" output="memory.out[19:10]">
            <delay_constant max="30e-12" in_port="mem_2048x10_dp.out2" out_port="memory.out[19:10]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_2048x10_dp.clk">
             </direct>
        </interconnect>
      </mode>
      <mode name="mem_2048x8_dp">
        <pb_type name="mem_2048x8_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
          <input name="addr1" num_pins="11" port_class="address1"/>
          <input name="addr2" num_pins="11" port_class="address2"/>
          <input name="data1" num_pins="8" port_class="data_in1"/>
          <input name="data2" num_pins="8" port_class="data_in2"/>
          <input name="we1" num_pins="1" port_class="write_en1"/>
          <input name="we2" num_pins="1" port_class="write_en2"/>
          <output name="out1" num_pins="8" port_class="data_out1"/>
          <output name="out2" num_pins="8" port_class="data_out2"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="358e-12" port="mem_2048x8_dp.addr1" clock="clk"/>
          <T_setup value="358e-12" port="mem_2048x8_dp.data1" clock="clk"/>
          <T_setup value="358e-12" port="mem_2048x8_dp.we1" clock="clk"/>
          <T_setup value="358e-12" port="mem_2048x8_dp.addr2" clock="clk"/>
          <T_setup value="358e-12" port="mem_2048x8_dp.data2" clock="clk"/>
          <T_setup value="358e-12" port="mem_2048x8_dp.we2" clock="clk"/>
          <T_clock_to_Q max="875e-12" port="mem_2048x8_dp.out1" clock="clk"/>
          <T_clock_to_Q max="875e-12" port="mem_2048x8_dp.out2" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="17.9e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[10:0]" output="mem_2048x8_dp.addr1">
            <delay_constant max="100e-12" in_port="memory.addr1[10:0]" out_port="mem_2048x8_dp.addr1"/>
          </direct>
          <direct name="address2" input="memory.addr2[10:0]" output="mem_2048x8_dp.addr2">
            <delay_constant max="100e-12" in_port="memory.addr2[10:0]" out_port="mem_2048x8_dp.addr2"/>
          </direct>
          <direct name="data1" input="memory.data[7:0]" output="mem_2048x8_dp.data1">
            <delay_constant max="100e-12" in_port="memory.data[7:0]" out_port="mem_2048x8_dp.data1"/>
          </direct>
          <direct name="data2" input="memory.data[15:8]" output="mem_2048x8_dp.data2">
            <delay_constant max="100e-12" in_port="memory.data[15:8]" out_port="mem_2048x8_dp.data2"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_2048x8_dp.we1">
            <delay_constant max="100e-12" in_port="memory.we1" out_port="mem_2048x8_dp.we1"/>
          </direct>
          <direct name="writeen2" input="memory.we2" output="mem_2048x8_dp.we2">
            <delay_constant max="100e-12" in_port="memory.we2" out_port="mem_2048x8_dp.we2"/>
          </direct>
          <direct name="dataout1" input="mem_2048x8_dp.out1" output="memory.out[7:0]">
            <delay_constant max="30e-12" in_port="mem_2048x8_dp.out1" out_port="memory.out[7:0]"/>
          </direct>
          <direct name="dataout2" input="mem_2048x8_dp.out2" output="memory.out[15:8]">
            <delay_constant max="30e-12" in_port="mem_2048x8_dp.out2" out_port="memory.out[15:8]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_2048x8_dp.clk">
             </direct>
        </interconnect>
      </mode>
      <!-- Every input pin is driven by 15% of the tracks in a channel, every output pin is driven by 10% of the tracks in a channel -->
      <!-- Place this memory block every 8 columns from (and including) the second column -->
      <power method="sum-of-children"/>
    </pb_type>
    <!-- Define fracturable memory end -->
  </complexblocklist>
  <power>
    <local_interconnect C_wire="2.5e-10"/>
    <mux_transistor_size mux_transistor_size="3"/>
    <FF_size FF_size="4"/>
    <LUT_transistor_size LUT_transistor_size="4"/>
  </power>
  <clocks>
    <clock buffer_size="auto" C_wire="2.5e-10"/>
  </clocks>
</architecture>
