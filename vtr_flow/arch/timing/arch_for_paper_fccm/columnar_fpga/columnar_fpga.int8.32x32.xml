<!-- 
  Flagship Heterogeneous Architecture with Carry Chains for VTR 7.0.

  - 40 nm technology
  - General purpose logic block: 
    K = 6, N = 10, fracturable 6 LUTs (can operate as one 6-LUT or two 5-LUTs with 8 total FLE inputs (2 inputs of which are shared by the 5-LUTs) 
    with optionally registered outputs
    Each 5-LUT has an arithemtic mode that converts it to a single-bit adder with both inputs driven by 4-LUTs (both 4-LUTs share all 4 inputs)
    Carry chain links to vertically adjacent logic blocks
  - Memory size 32 Kbits, memory aspect ratios vary from a data width of 1 to data width of 64.  
    Height = 6, found on every (8n+2)th column
  - Multiplier modes: one 36x36, two 18x18, each 18x18 can also operate as two 9x9.  
    Height = 4, found on every (8n+6)th column
  - Routing architecture: L = 4, fc_in = 0.15, Fc_out = 0.1

  Details on Modelling:

  The electrical design of the architecture described here is NOT from an 
  optimized, SPICED architecture.  Instead, we attempt to create a reasonable 
  architecture file by using an existing commercial FPGA to approximate the area, 
  delay, and power of the underlying components. This is combined with a reasonable 40 nm 
  model of wiring and circuit design for low-level routing components, where available.
  The resulting architecture has delays that roughly match a commercial 40 nm FPGA, but also 
  has wiring electrical parameters that allow the wire lengths and switch patterns to be 
  modified and you will still get reasonable delay results for the new architecture.
  The following describes, in detail, how we obtained the various electrical values for this 
  architecture.

  Rmin for nmos and pmos, routing buffer sizes, and I/O pad delays are from the ifar 
  architecture created by Ian Kuon: K06 N10 45nm fc 0.15 area-delay optimized architecture. 
  (n10k06l04.fc15.area1delay1.cmos45nm.bptm.cmos45nm.xml)      
  This routing architecture was optimized for 45 nm, and we have scaled it linearly to 40 nm to 
  match the overall target (a 40 nm FPGA).

  We obtain delay numbers by measuring delays of routing, soft logic blocks, 
  memories, and multipliers from test circuits on a Stratix IV GX device 
  (EP4SGX230DF29C2X, i.e. fastest speed grade). For routing, we took the average delay of H4 and V4 
  wires.  Rmetal and Cmetal values for the routing wires were obtained from work done by Charles 
  Chiasson. We use a 96 nm half-pitch (corresponding to mid-level metal stack 40 nm routing) and 
  take the R and C data from the ITRS roadmap.  

  For the general purpose logic block, we assume that the area and delays of the Stratix IV 
  crossbar is close enough to the crossbar modelled here.  
  Stratix IV uses 52 inputs and 20 feedback lines, but only a half-populated crossbar, leading to 
  36:1 multiplexers.  We match these parameters in this architecture.

  For LUTs, we include LUT 
  delays measured from Stratix IV which is dependant on the input used (ie. some 
  LUT inputs are faster than others).  The CAD tools at the time of VTR 7 does 
  not consider differences in LUT input delays.

  Adder delays obtained as approximate values from a Stratix IV EP4SE230F29C3 device.  
  Delay obtained by compiling a 256 bit adder (registered inputs and outputs, 
  all pins except clock virtual) then measuring the delays in chip-planner, 
  sumout delay = 0.271ns to 0.348 ns, intra-block carry delay = 0.011 ns, 
  inter-block carry delay = 0.327 ns.  Given this data, I will approximate 
  sumout 0.3 ns, intra-block carry-delay = 0.01 ns, and 
  inter-block carry-delay = 0.16 ns (since Altera inter-block carry delay has 
  overhead that we don't have, I'll approximate the delay of a simpler chain at 
  one half what they have.  This is very rough, anything from 0.01ns to 0.327ns 
  can be justified).

  Logic block area numbers obtained by scaling overall tile area of a 65nm 
  Stratix III device, (as given in Wong, Betz and Rose, FPGA 2011) to 40 nm, then subtracting out 
  routing area at a channel width of 300. We use a channel width of 300 because it can route 
  all the VTR 6.0 benchmark circuits with an approximately 20% safety margin, and is also close to the
  total channel width of Stratix IV. Hence this channel width is close to the commercial practice of
  choosing a width that provides high routability. The architecture can be routed at different channel
  widths, but we estimate the tile size and hence the physical length of routing wires assuming
  a channel width of 300.

  Sanity checks employed:
    1.  We confirmed the routing buffer delay is ~1/3rd of total routing delay at L = 4. This matches 
        common electrical design.


  Authors: Jason Luu, Jeff Goeders, Vaughn Betz
--><architecture>
  
  <!-- 
       ODIN II specific config begins 
       Describes the types of user-specified netlist blocks (in blif, this corresponds to 
       ".model [type_of_block]") that this architecture supports.

       Note: Basic LUTs, I/Os, and flip-flops are not included here as there are 
       already special structures in blif (.names, .input, .output, and .latch) 
       that describe them.
  -->
  <models>
    <model name="multiply">
      <input_ports>
      <port name="a" combinational_sink_ports="out"/>
      <port name="b" combinational_sink_ports="out"/>
      </input_ports>
      <output_ports>
      <port name="out"/>
      </output_ports>
    </model>
    
    <model name="single_port_ram">
      <input_ports>
      <port name="we" clock="clk"/>     <!-- control -->
      <port name="addr" clock="clk"/>  <!-- address lines -->
      <port name="data" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
      <port name="clk" is_clock="1"/>  <!-- memories are often clocked -->
      </input_ports>
      <output_ports>
      <port name="out" clock="clk"/>   <!-- output can be broken down into smaller bit widths minimum size 1 -->
      </output_ports>
    </model>

    <model name="dual_port_ram">
      <input_ports>
      <port name="we1" clock="clk"/>     <!-- write enable -->
      <port name="we2" clock="clk"/>     <!-- write enable -->
      <port name="addr1" clock="clk"/>  <!-- address lines -->
      <port name="addr2" clock="clk"/>  <!-- address lines -->
      <port name="data1" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
      <port name="data2" clock="clk"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
      <port name="clk" is_clock="1"/>  <!-- memories are often clocked -->
      </input_ports>
      <output_ports>
      <port name="out1" clock="clk"/>   <!-- output can be broken down into smaller bit widths minimum size 1 -->
      <port name="out2" clock="clk"/>   <!-- output can be broken down into smaller bit widths minimum size 1 -->
      </output_ports>
    </model>

    <model name="adder">
      <input_ports>
        <port name="a" combinational_sink_ports="sumout cout"/>
        <port name="b" combinational_sink_ports="sumout cout"/>
        <port name="cin" combinational_sink_ports="sumout cout"/>
      </input_ports>
      <output_ports>
        <port name="cout"/>
        <port name="sumout"/>
      </output_ports>
    </model>

    <model name="seq_adder">
      <input_ports>
        <port name="a" clock="clk" combinational_sink_ports="sumout cout"/>
        <port name="b" clock="clk" combinational_sink_ports="sumout cout"/>
        <port name="cin" clock="clk" combinational_sink_ports="sumout cout"/>
		    <port name="clk" is_clock="1" />
		    <port name="reset" clock="clk" combinational_sink_ports="sumout cout"/>
      </input_ports>
      <output_ports>
        <port name="cout" clock="clk"/>
        <port name="sumout" clock="clk"/>
      </output_ports>
    </model>

    <model name="seq_multiply">
      <input_ports>
        <port name="a" clock="clk" combinational_sink_ports="out"/>
        <port name="b" clock="clk" combinational_sink_ports="out"/>
		    <port name="clk" is_clock="1" />
		    <port name="reset" clock="clk" combinational_sink_ports="out"/>
      </input_ports>
      <output_ports>
        <port name="out" clock="clk"/>
      </output_ports>
    </model>

    <model name="seq_mac">
      <input_ports>
        <port name="a" clock="clk" combinational_sink_ports="out"/>
        <port name="b" clock="clk" combinational_sink_ports="out"/>
		    <port name="clk" is_clock="1" />
		    <port name="reset" clock="clk" combinational_sink_ports="out"/>
      </input_ports>
      <output_ports>
        <port name="out" clock="clk"/>
      </output_ports>
    </model>

    <model name="matmul_32x32_systolic">
      <input_ports>
        <port name="clk" is_clock="1"/>  
        <port name="reset" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out a_addr b_addr" />
        <port name="start_mat_mul" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out a_addr b_addr" />
        <port name="a_data" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out a_addr b_addr" />
        <port name="b_data" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out a_addr b_addr" />
        <port name="final_mat_mul_size" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out a_addr b_addr" />
        <port name="a_loc" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out a_addr b_addr" />
        <port name="b_loc" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out a_addr b_addr" />
        <port name="a_data_in" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out a_addr b_addr" />
        <port name="b_data_in" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out a_addr b_addr" />
        <port name="c_data_in" clock="clk" combinational_sink_ports="done_mat_mul a_data_out b_data_out c_data_out a_addr b_addr" />
      </input_ports>
      <output_ports>
        <port name="done_mat_mul" clock="clk"/>
        <port name="a_data_out" clock="clk"/>
        <port name="b_data_out" clock="clk"/>
        <port name="a_addr" clock="clk"/>
        <port name="b_addr" clock="clk"/>
        <port name="c_data_out" clock="clk"/>
      </output_ports>
    </model>

  </models>
  <!-- ODIN II specific config ends -->
 
  <!-- Physical descriptions begin -->
  <layout>

<!--    <auto_layout aspect_ratio="1.0"> -->
    <fixed_layout name="mylayout" width="86" height="86">
        <!--Perimeter of 'io' blocks with 'EMPTY' blocks at corners-->
        <perimeter type="io" priority="100"/>
        <corners type="EMPTY" priority="101"/>
        <!--Fill with 'clb'-->
        <col type="clb" startx="1" starty="1" repeatx="28"  priority="20"/>
        <col type="memory" startx="2" starty="1" repeatx="28" priority="50"/>
        <col type="matmul_32x32" startx="4" starty="1" repeatx="28" priority="25"/>
        <col type="dsp" startx="28" starty="1" repeatx="28" priority="50"/>

    </fixed_layout> 
<!--        </auto_layout> -->
</layout>

  		<device>
			  <!-- VB & JL: Using Ian Kuon's transistor sizing and drive strength data for routing, at 40 nm. Ian used BPTM 
			     models. We are modifying the delay values however, to include metal C and R, which allows more architecture
			     experimentation. We are also modifying the relative resistance of PMOS to be 1.8x that of NMOS
			     (vs. Ian's 3x) as 1.8x lines up with Jeff G's data from a 45 nm process (and is more typical of 
			     45 nm in general). I'm upping the Rmin_nmos from Ian's just over 6k to nearly 9k, and dropping 
			     RminW_pmos from 18k to 16k to hit this 1.8x ratio, while keeping the delays of buffers approximately
			     lined up with Stratix IV. 
			     We are using Jeff G.'s capacitance data for 45 nm (in tech/ptm_45nm).
			     Jeff's tables list C in for transistors with widths in multiples of the minimum feature size (45 nm).
			     The minimum contactable transistor is 2.5 * 45 nm, so I need to multiply drive strength sizes in this file
	                     by 2.5x when looking up in Jeff's tables.
			     The delay values are lined up with Stratix IV, which has an architecture similar to this
			     proposed FPGA, and which is also 40 nm 
			     C_ipin_cblock: input capacitance of a track buffer, which VPR assumes is a single-stage
			     4x minimum drive strength buffer. -->
   
      <sizing R_minW_nmos="8926" R_minW_pmos="16067"/>
      <!-- The grid_logic_tile_area below will be used for all blocks that do not explicitly set their own (non-routing)
     	  area; set to 0 since we explicitly set the area of all blocks currently in this architecture file.
	    -->
			<area grid_logic_tile_area="0"/>
			<chan_width_distr>
				<x distr="uniform" peak="1.000000"/>
				<y distr="uniform" peak="1.000000"/>
			</chan_width_distr>
			<switch_block type="wilton" fs="3"/>
		<connection_block input_switch_name="ipin_cblock"/>
        </device>
		<switchlist>
      <!-- VB: the mux_trans_size and buf_size data below is in minimum width transistor *areas*, assuming the purple
           book area formula. This means the mux transistors are about 5x minimum drive strength.
           We assume the first stage of the buffer is 3x min drive strength to be reasonable given the large 
           mux transistors, and this gives a reasonable stage ratio of a bit over 5x to the second stage. We assume
           the n and p transistors in the first stage are equal-sized to lower the buffer trip point, since it's fed
           by a pass transistor mux. We can then reverse engineer the buffer second stage to hit the specified 
           buf_size (really buffer area) - 16.2x minimum drive nmos and 1.8*16.2 = 29.2x minimum drive.
           I then took the data from Jeff G.'s PTM modeling of 45 nm to get the Cin (gate of first stage) and Cout 
           (diff of second stage) listed below.  Jeff's models are in tech/ptm_45nm, and are in min feature multiples.
           The minimum contactable transistor is 2.5 * 45 nm, so I need to multiply the drive strength sizes above by 
           2.5x when looking up in Jeff's tables.
           Finally, we choose a switch delay (58 ps) that leads to length 4 wires having a delay equal to that of SIV of 126 ps.
           This also leads to the switch being 46% of the total wire delay, which is reasonable. -->
      <switch type="mux" name="0" R="551" Cin=".77e-15" Cout="4e-15" Tdel="58e-12" mux_trans_size="2.630740" buf_size="27.645901"/>
		  <!--switch ipin_cblock resistance set to yeild for 4x minimum drive strength buffer-->
      <switch type="mux" name="ipin_cblock" R="2231.5" Cout="0." Cin="1.47e-15" Tdel="7.247000e-11" mux_trans_size="1.222260" buf_size="auto"/>
      <switch type="short" name="electrical_short" R="0" Cin="0" Tdel="0"/>
    </switchlist>
		<segmentlist>
      <!--- VB & JL: using ITRS metal stack data, 96 nm half pitch wires, which are intermediate metal width/space.  
             With the 96 nm half pitch, such wires would take 60 um of height, vs. a 90 nm high (approximated as square) Stratix IV tile so this seems
             reasonable. Using a tile length of 90 nm, corresponding to the length of a Stratix IV tile if it were square. -->
      <segment freq="1.000000" length="4" type="unidir" Rmetal="101" Cmetal="22.5e-15">
        <mux name="0"/>
        <sb type="pattern">1 1 1 1 1</sb>
        <cb type="pattern">1 1 1 1</cb>
			</segment>
		</segmentlist>

    <directlist>
      <direct name="adder_carry" from_pin="clb.cout" to_pin="clb.cin" x_offset="0" y_offset="-1" z_offset="0"/>
    </directlist>

		<complexblocklist>
      
      <!-- Define I/O pads begin -->
      <!-- Capacity is a unique property of I/Os, it is the maximum number of I/Os that can be placed at the same (X,Y) location on the FPGA -->
	    <!-- Not sure of the area of an I/O (varies widely), and it's not relevant to the design of the FPGA core, so we're setting it to 0. -->
      <pb_type name="io" capacity="8" area="0">
        <input name="outpad" num_pins="1"/>
        <output name="inpad" num_pins="1"/>
        <clock name="clock" num_pins="1"/>

	<!-- IOs can operate as either inputs or outputs.
	     Delays below come from Ian Kuon. They are small, so they should be interpreted as
	     the delays to and from registers in the I/O (and generally I/Os are registered 
	     today and that is when you timing analyze them.
	     -->
        <mode name="inpad">
          <pb_type name="inpad" blif_model=".input" num_pb="1">
            <output name="inpad" num_pins="1"/>
          </pb_type>
          <interconnect>
            <direct name="inpad" input="inpad.inpad" output="io.inpad">
            <delay_constant max="4.243e-11" in_port="inpad.inpad" out_port="io.inpad"/>
            </direct>
          </interconnect>
      
        </mode>
        <mode name="outpad">
          <pb_type name="outpad" blif_model=".output" num_pb="1">
            <input name="outpad" num_pins="1"/>
          </pb_type>
          <interconnect>
            <direct name="outpad" input="io.outpad" output="outpad.outpad">
            <delay_constant max="1.394e-11" in_port="io.outpad" out_port="outpad.outpad"/>
            </direct>
          </interconnect>
        </mode>

        <!-- Every input pin is driven by 15% of the tracks in a channel, every output pin is driven by 10% of the tracks in a channel -->
        <fc in_type="frac" in_val="0.15" out_type="frac" out_val="0.10">
          <!-- clock pins do not connect to local routing -->
          <fc_override fc_type="frac" fc_val="0" port_name="clock"/>
        </fc>
        <!-- IOs go on the periphery of the FPGA, for consistency, 
          make it physically equivalent on all sides so that only one definition of I/Os is needed.
          If I do not make a physically equivalent definition, then I need to define 4 different I/Os, one for each side of the FPGA
        -->
        <pinlocations pattern="custom">
          <loc side="left">io.outpad io.inpad io.clock</loc>
          <loc side="top">io.outpad io.inpad io.clock</loc>
          <loc side="right">io.outpad io.inpad io.clock</loc>
          <loc side="bottom">io.outpad io.inpad io.clock</loc>
        </pinlocations>

        <!-- Place I/Os on the sides of the FPGA -->
        <power method="ignore"/>
      </pb_type>
      <!-- Define I/O pads ends -->

      <!-- Define general purpose logic block (CLB) begin -->
	  <!--- Area calculation: Total Stratix IV tile area is about 8100 um^2, and a minimum width transistor 
	   area is 60 L^2 yields a tile area of 84375 MWTAs.
	   Routing at W=300 is 30481 MWTAs, leaving us with a total of 53000 MWTAs for logic block area 
	   This means that only 37% of our area is in the general routing, and 63% is inside the logic
	   block. Note that the crossbar / local interconnect is considered part of the logic block
	   area in this analysis. That is a lower proportion of of routing area than most academics
	   assume, but note that the total routing area really includes the crossbar, which would push
	   routing area up significantly, we estimate into the ~70% range. 
     
     The weird part is that the area of the CLB was the same in the architecture file where there 
     were no adders and carry chain logic. 

     I've added:
       * 2 additional outputs to each FLE (there were 2 outputs earlier, now there are 4). So a total of 20 outputs added.
       * A 3LUT mode, which adds additional muxes mostly. I don't think this will add LUT area. The existing LUTs will just be split.
       * Added an extra flop in flut5. That is, 2 flops per FLE. So, a total of 20 flops.
       * 3-4 additional muxes in each FLE. So, total of about 20 muxes.

     I'm going to say this is 15% additional area. So, new area = 1.15 * 53894 = 61978 ~= 62000
	   -->
      <pb_type name="clb" height="1" width="1" area="62000">

        <input name="I1" num_pins="15" equivalent="full"/>
		    <input name="I2" num_pins="15" equivalent="full"/>
    		<input name="I3" num_pins="15" equivalent="full"/>
    		<input name="I4" num_pins="15" equivalent="full"/>
        <input name="cin" num_pins="2"/>
        <output name="O" num_pins="40" equivalent="none"/>
        <output name="cout" num_pins="2"/>
        <clock name="clk" num_pins="1"/>
        <pb_type name="lab" num_pb="1">
          <input name="I1" num_pins="15"/>
          <input name="I2" num_pins="15"/>
          <input name="I3" num_pins="15"/>
          <input name="I4" num_pins="15"/>
          <input name="cin" num_pins="2"/>
          <output name="O" num_pins="40"/>
          <output name="cout" num_pins="2"/>
          <clock name="clk" num_pins="1"/>
          <!-- Describe fracturable logic element.  
               Each fracturable logic element has a 6-LUT that can alternatively operate as two 5-LUTs with two shared inputs. 
               The outputs of the fracturable logic element can be optionally registered
          -->
          <pb_type name="fle" num_pb="10">
            <input name="in" num_pins="8"/>
            <input name="cin" num_pins="1"/>
            <output name="out" num_pins="4"/>
            <output name="cout" num_pins="1"/>
            <clock name="clk" num_pins="1"/>
            <!-- 
                  The ALM inputs are as follows:
                          A -> fle[0]
                          B -> fle[1]
                          C -> fle[2]
                          D -> fle[3]
                          E -> fle[4]
                          F -> fle[5]
                          G -> fle[6]
                          H -> fle[7]
            -->
            <mode name="n2_lut5">
              <pb_type name="ble5" num_pb="2">
                <input name="in" num_pins="5"/>
                <input name="cin" num_pins="1"/>
                <output name="out" num_pins="2"/>
                <output name="cout" num_pins="1"/>
                <clock name="clk" num_pins="1"/> 
                <mode name="blut5">
                  <pb_type name="flut5" num_pb="1">
                    <input name="in" num_pins="5"/>
                    <output name="out" num_pins="2"/>
                    <clock name="clk" num_pins="1"/> 
                    <!-- Regular LUT mode -->
                    <pb_type name="lut5" blif_model=".names" num_pb="1" class="lut">
                      <input name="in" num_pins="5" port_class="lut_in"/>
                      <output name="out" num_pins="1" port_class="lut_out"/>
                      <!-- LUT timing using delay matrix -->
                        <!-- These are the physical delay inputs on a Stratix IV LUT but because VPR cannot do LUT rebalancing,
                           we instead take the average of these numbers to get more stable results
                        82e-12
                        173e-12
                        261e-12
                        263e-12
                        398e-12
                        -->
                      <delay_matrix type="max" in_port="lut5.in" out_port="lut5.out">
                        235e-12
                        235e-12
                        235e-12
                        235e-12
                        235e-12
                      </delay_matrix>
                    </pb_type>       
                    <pb_type name="ff" blif_model=".latch" num_pb="2" class="flipflop">
                      <input name="D" num_pins="1" port_class="D"/>
                      <output name="Q" num_pins="1" port_class="Q"/>
                      <clock name="clk" num_pins="1" port_class="clock"/>
                      <T_setup value="66e-12" port="ff.D" clock="clk"/>
                      <T_clock_to_Q max="124e-12" port="ff.Q" clock="clk"/>
                    </pb_type>
                    <interconnect>
                      <direct name="lut5_in" input="flut5.in" output="lut5.in"/>
                      <direct name="reg_in" input="flut5.in[0]" output="ff[0].D"/>
                      <direct name="lut5_ff" input="lut5.out" output="ff[1].D">
                        <pack_pattern name="ble5" in_port="lut5.out" out_port="ff[1].D"/>
                      </direct>
                      <complete name="clock" input="flut5.clk" output="ff.clk"/>                 
                      <complete name="out_mux" input="ff.Q lut5.out" output="flut5.out">
                        <delay_constant max="25e-12" in_port="lut5.out" out_port="flut5.out"/>
                        <delay_constant max="45e-12" in_port="ff.Q" out_port="flut5.out"/>
                      </complete>
                    </interconnect>
                  </pb_type>
                  <interconnect>
                    <direct name="direct1" input="ble5.in" output="flut5.in"/>
                    <direct name="direct2" input="ble5.clk" output="flut5.clk"/>
                    <direct name="direct3" input="flut5.out" output="ble5.out"/>                 
                  </interconnect>
                </mode>
                <!-- Special dual-LUT mode that drives adder only -->
                <mode name="arithmetic">
                  <pb_type name="arithmetic" num_pb="1">
                    <input name="in" num_pins="4"/>
                    <input name="cin" num_pins="1"/>
                    <output name="out" num_pins="2"/>
                    <output name="cout" num_pins="1"/>
                    <clock name="clk" num_pins="1"/> 
                    <!-- Special dual-LUT mode that drives adder only -->
                    <pb_type name="lut4" blif_model=".names" num_pb="2" class="lut">
                      <input name="in" num_pins="4" port_class="lut_in"/>
                      <output name="out" num_pins="1" port_class="lut_out"/>
                      <!-- LUT timing using delay matrix -->
                      <!-- These are the physical delay inputs on a Stratix IV LUT but because VPR cannot do LUT rebalancing,
                             we instead take the average of these numbers to get more stable results
                        82e-12
                        173e-12
                        261e-12
                        263e-12
                        -->
                      <delay_matrix type="max" in_port="lut4.in" out_port="lut4.out">
                        195e-12
                        195e-12
                        195e-12
                        195e-12
                      </delay_matrix>
                    </pb_type>    
                    <pb_type name="adder" blif_model=".subckt adder" num_pb="1">
                      <input name="a" num_pins="1"/>
                      <input name="b" num_pins="1"/>
                      <input name="cin" num_pins="1"/>                      
                      <output name="cout" num_pins="1"/>
                      <output name="sumout" num_pins="1"/>
                      <delay_constant max="0.3e-9" in_port="adder.a" out_port="adder.sumout"/>
                      <delay_constant max="0.3e-9" in_port="adder.b" out_port="adder.sumout"/>
                      <delay_constant max="0.3e-9" in_port="adder.cin" out_port="adder.sumout"/>
                      <delay_constant max="0.3e-9" in_port="adder.a" out_port="adder.cout"/>
                      <delay_constant max="0.3e-9" in_port="adder.b" out_port="adder.cout"/>
                      <delay_constant max="0.01e-9" in_port="adder.cin" out_port="adder.cout"/>
                    </pb_type>
                    <pb_type name="ff" blif_model=".latch" num_pb="1" class="flipflop">
                      <input name="D" num_pins="1" port_class="D"/>
                      <output name="Q" num_pins="1" port_class="Q"/>
                      <clock name="clk" num_pins="1" port_class="clock"/>
                      <T_setup value="66e-12" port="ff.D" clock="clk"/>
                      <T_clock_to_Q max="124e-12" port="ff.Q" clock="clk"/>
                    </pb_type>
                    <interconnect>
                      <direct name="clock1" input="arithmetic.clk" output="ff.clk"/>
                      <direct name="lut_in1" input="arithmetic.in[3:0]" output="lut4[0:0].in[3:0]"/>
                      <direct name="lut_in2" input="arithmetic.in[3:0]" output="lut4[1:1].in[3:0]"/>
                      <direct name="lut_to_add1" input="lut4[0:0].out" output="adder.a">
                      </direct>
                      <direct name="lut_to_add2" input="lut4[1:1].out" output="adder.b">
                      </direct>
                      <direct name="add_to_ff" input="adder.sumout" output="ff.D">
                        <pack_pattern name="chain" in_port="adder.sumout" out_port="ff.D"/>
                      </direct>
                      <direct name="carry_in" input="arithmetic.cin" output="adder.cin">
                        <pack_pattern name="chain" in_port="arithmetic.cin" out_port="adder.cin"/>
                      </direct>
                      <direct name="carry_out" input="adder.cout" output="arithmetic.cout">
                        <pack_pattern name="chain" in_port="adder.cout" out_port="arithmetic.cout"/>
                      </direct>
                      <mux name="sumout1" input="ff.Q adder.sumout" output="arithmetic.out[0:0]">
                        <delay_constant max="25e-12" in_port="adder.sumout" out_port="arithmetic.out[0:0]"/>
                        <delay_constant max="45e-12" in_port="ff.Q" out_port="arithmetic.out[0:0]"/>
                      </mux>
                      <mux name="sumout2" input="ff.Q adder.sumout" output="arithmetic.out[1:1]">
                        <delay_constant max="25e-12" in_port="adder.sumout" out_port="arithmetic.out[1:1]"/>
                        <delay_constant max="45e-12" in_port="ff.Q" out_port="arithmetic.out[1:1]"/>
                      </mux>
                    </interconnect>
                  </pb_type>

                  <interconnect>
                    <direct name="direct1" input="ble5.in[3:0]" output="arithmetic.in"/>
                    <direct name="carry_in" input="ble5.cin" output="arithmetic.cin">
                      <pack_pattern name="chain" in_port="ble5.cin" out_port="arithmetic.cin"/>
                    </direct>
                    <direct name="carry_out" input="arithmetic.cout" output="ble5.cout">
                      <pack_pattern name="chain" in_port="arithmetic.cout" out_port="ble5.cout"/>
                    </direct>
                    <direct name="direct2" input="ble5.clk" output="arithmetic.clk"/>
                    <direct name="direct3" input="arithmetic.out" output="ble5.out"/> 
                  </interconnect>
                </mode>
              </pb_type>
              <interconnect>
                <!-- Shared inputs between the two 5-LUTs -->
                <complete name="lut5_reg1" input="fle.in[0]" output="ble5[0].in[0] ble5[1].in[1]"/>
                <complete name="lut5_reg2" input="fle.in[1]" output="ble5[0].in[1] ble5[1].in[0]"/>

                <!-- Rest of the 5-LUT inputs -->
                <direct name="lut5_inputs_1" input="fle.in[4:2]" output="ble5[0].in[4:2]"/>
                <direct name="lut5_inputs_22" input="fle.in[7:5]" output="ble5[1].in[4:2]"/>

                <direct name="lut5_outputs_1" input="ble5[0].out" output="fle.out[1:0]"/>                 
                <direct name="lut5_outputs_2" input="ble5[1].out" output="fle.out[3:2]"/>                 

                <direct name="carry_in" input="fle.cin" output="ble5[0].cin">
                  <pack_pattern name="chain" in_port="fle.cin" out_port="ble5[0].cin"/>
                </direct>
                <direct name="carry_out" input="ble5[1].cout" output="fle.cout">
                  <pack_pattern name="chain" in_port="ble5[1].cout" out_port="fle.cout"/>
                </direct>
                <direct name="carry_link" input="ble5[0].cout" output="ble5[1].cin">
                  <pack_pattern name="chain" in_port="ble5[0].cout" out_port="ble5[1].cout"/>
                </direct>
                <complete name="clock" input="fle.clk" output="ble5[1:0].clk"/>
              </interconnect>
            </mode> <!-- n2_lut5 -->
            <mode name="n1_lut6">
              <pb_type name="ble6" num_pb="1">
                <input name="in" num_pins="6"/>
                <output name="out" num_pins="4"/>
                <clock name="clk" num_pins="1"/> 
                <pb_type name="lut6" blif_model=".names" num_pb="1" class="lut">
                  <input name="in" num_pins="6" port_class="lut_in"/>
                  <output name="out" num_pins="1" port_class="lut_out"/>
                <!-- LUT timing using delay matrix -->
                <!-- These are the physical delay inputs on a Stratix IV LUT but because VPR cannot do LUT rebalancing,
                       we instead take the average of these numbers to get more stable results
                  82e-12
                  173e-12
                  261e-12
                  263e-12
                  398e-12
                  397e-12
                  -->
                <delay_matrix type="max" in_port="lut6.in" out_port="lut6.out">
                  261e-12
                  261e-12
                  261e-12
                  261e-12
                  261e-12
                  261e-12
                </delay_matrix>
                </pb_type>
                <pb_type name="ff" blif_model=".latch" num_pb="2" class="flipflop">
                  <input name="D" num_pins="1" port_class="D"/>
                  <output name="Q" num_pins="1" port_class="Q"/>
                  <clock name="clk" num_pins="1" port_class="clock"/>
                  <T_setup value="66e-12" port="ff.D" clock="clk"/>
                  <T_clock_to_Q max="124e-12" port="ff.Q" clock="clk"/>
                </pb_type>
                <interconnect>
                  <direct name="lut6_inputs" input="ble6.in" output="lut6.in"/>
                  <direct name="lut6_ff" input="lut6.out" output="ff[1].D">
                    <pack_pattern name="ble6" in_port="lut6.out" out_port="ff[1].D"/>
                  </direct>
                  <complete name="clock" input="ble6.clk" output="ff.clk"/> 
                  <direct name="input_to_ff" input="ble6.in[0]" output="ff[0].D"/>
                  <mux name="mux1" input="ff[0].Q lut6.out" output="ble6.out[0]">
                    <delay_constant max="25e-12" in_port="lut6.out" out_port="ble6.out[0]"/>
                    <delay_constant max="45e-12" in_port="ff[0].Q" out_port="ble6.out[0]"/>
                  </mux>
                  <!-- This mux is the same as mux1 but connected to output 2 -->
                  <mux name="mux2" input="ff[0].Q lut6.out" output="ble6.out[1]">
                    <delay_constant max="25e-12" in_port="lut6.out" out_port="ble6.out[1]"/>
                    <delay_constant max="45e-12" in_port="ff[0].Q" out_port="ble6.out[1]"/>
                  </mux>
                  <mux name="mux3" input="ff[1].Q lut6.out" output="ble6.out[2]">
                    <delay_constant max="25e-12" in_port="lut6.out" out_port="ble6.out[2]"/>
                    <delay_constant max="45e-12" in_port="ff[1].Q" out_port="ble6.out[2]"/>
                  </mux>
                  <!-- This mux is the same as mux2 but connected to output 3 -->
                  <mux name="mux4" input="ff[1].Q lut6.out" output="ble6.out[3]">
                    <delay_constant max="25e-12" in_port="lut6.out" out_port="ble6.out[3]"/>
                    <delay_constant max="45e-12" in_port="ff[1].Q" out_port="ble6.out[3]"/>
                  </mux>
                </interconnect>
              </pb_type>
              <interconnect>
                <!-- ble6 takes inputs A, B, C, D, E, & F; where F is fle[7] -->
                <direct name="lut6_inputs1" input="fle.in[4:0]" output="ble6.in[4:0]"/>
                <direct name="lut6_inputs2" input="fle.in[7]" output="ble6.in[5]"/>
                <direct name="direct2" input="ble6.out" output="fle.out"/>
                <direct name="direct4" input="fle.clk" output="ble6.clk"/>
              </interconnect>
            </mode> <!-- n1_lut6 -->
            <mode name="lut3_mode">
              <pb_type name="ble3" num_pb="2">
                <input name="in" num_pins="4"/>
                <output name="out" num_pins="2"/>
                <clock name="clk" num_pins="1"/>
                <pb_type name="lut3" blif_model=".names" num_pb="1" class="lut">
                  <input name="in" num_pins="3" port_class="lut_in"/>
                  <output name="out" num_pins="1" port_class="lut_out"/>
                  <!--  LUT timing using delay matrix. Extrapolated from the delays available for LUT4, LUT5, LUT6 -->
                  <delay_matrix type="max" in_port="lut3.in" out_port="lut3.out">
                  141e-12 
                  141e-12 
                  141e-12 
                  </delay_matrix>
                </pb_type>
                <pb_type name="ff" blif_model=".latch" num_pb="2" class="flipflop">
                  <input name="D" num_pins="1" port_class="D"/>
                  <output name="Q" num_pins="1" port_class="Q"/>
                  <clock name="clk" num_pins="1" port_class="clock"/>
                  <T_setup value="66e-12" port="ff.D" clock="clk"/>
                  <T_clock_to_Q max="124e-12" port="ff.Q" clock="clk"/>
                </pb_type>
                <interconnect>
                  <direct name="direct1" input="ble3.in[3:1]" output="lut3.in"/>
                  <direct name="direct2" input="ble3.in[0:0]" output="ff[0:0].D"/>
                  <direct name="direct3" input="lut3.out" output="ff[1:1].D"/>
                  <direct name="direct4" input="ble3.clk" output="ff[0:0].clk"/>
                  <direct name="direct5" input="ble3.clk" output="ff[1:1].clk"/>
                  <mux name="mux1" input="ff[0:0].Q ble3.in[0:0]" output="ble3.out[0:0]">
                    <delay_constant max="25e-12" in_port="ff[0:0].Q" out_port="ble3.out[0:0]"/>
                    <delay_constant max="45e-12" in_port="ble3.in[0:0]" out_port="ble3.out[0:0]"/>
                  </mux>
                  <mux name="mux2" input="ff[1:1].Q lut3.out" output="ble3.out[1:1]">
                    <delay_constant max="25e-12" in_port="ff[1:1].Q" out_port="ble3.out[1:1]"/>
                    <delay_constant max="45e-12" in_port="lut3.out" out_port="ble3.out[1:1]"/>
                  </mux>
                </interconnect>
              </pb_type>
              <interconnect>
                <direct name="direct1" input="fle.in[3:0]" output="ble3[0:0].in"/>
                <direct name="direct2" input="fle.in[7:4]" output="ble3[1:1].in"/>
                <direct name="direct3" input="ble3[0:0].out" output="fle.out[1:0]"/>
                <direct name="direct4" input="ble3[1:1].out" output="fle.out[3:2]"/>
                <direct name="direct5" input="fle.clk" output="ble3[0:0].clk"/>
                <direct name="direct6" input="fle.clk" output="ble3[1:1].clk"/>
              </interconnect>
            </mode> <!-- lut3_mode-->
          </pb_type>
          <interconnect>
          <!-- We use a 50% depop crossbar built using small full xbars to get sets of logically equivalent pins at inputs of CLB 
           The delays below come from Stratix IV. the delay through a connection block
           input mux + the crossbar in Stratix IV is 167 ps. We already have a 72 ps 
           delay on the connection block input mux (modeled by Ian Kuon), so the remaining
           delay within the crossbar is 95 ps. 
           The delays of cluster feedbacks in Stratix IV is 100 ps, when driven by a LUT.
           Since all our outputs LUT outputs go to a BLE output, and have a delay of 
           25 ps to do so, we subtract 25 ps from the 100 ps delay of a feedback
           to get the part that should be marked on the crossbar.	 -->

          <!-- 50% sparsely populated local routing -->
          <complete name="lutA" input="lab.I4 lab.I3 fle[1:0].out fle[3:2].out fle[8:8].out" output="fle[9:0].in[0:0]">
            <delay_constant max="95e-12" in_port="lab.I4" out_port="fle.in[0:0]"/>
            <delay_constant max="95e-12" in_port="lab.I3" out_port="fle.in[0:0]"/>
            <delay_constant max="75e-12" in_port="fle[1:0].out" out_port="fle.in[0:0]"/>
            <delay_constant max="75e-12" in_port="fle[3:2].out" out_port="fle.in[0:0]"/>
            <delay_constant max="75e-12" in_port="fle[8:8].out" out_port="fle.in[0:0]"/>
          </complete>
	      <complete name="lutB" input="lab.I3 lab.I2 fle[3:2].out fle[5:4].out fle[9:9].out" output="fle[9:0].in[1:1]">
	        <delay_constant max="95e-12" in_port="lab.I3" out_port="fle.in[1:1]"/>
	        <delay_constant max="95e-12" in_port="lab.I2" out_port="fle.in[1:1]"/>
	        <delay_constant max="75e-12" in_port="fle[3:2].out" out_port="fle.in[1:1]"/>
	        <delay_constant max="75e-12" in_port="fle[5:4].out" out_port="fle.in[1:1]"/>
	        <delay_constant max="75e-12" in_port="fle[9:9].out" out_port="fle.in[1:1]"/>
          </complete>
	      <complete name="lutC" input="lab.I2 lab.I1 fle[5:4].out fle[7:6].out fle[8:8].out" output="fle[9:0].in[2:2]">
	        <delay_constant max="95e-12" in_port="lab.I2" out_port="fle.in[2:2]"/>
	        <delay_constant max="95e-12" in_port="lab.I1" out_port="fle.in[2:2]"/>
	        <delay_constant max="75e-12" in_port="fle[5:4].out" out_port="fle.in[2:2]"/>
	        <delay_constant max="75e-12" in_port="fle[7:6].out" out_port="fle.in[2:2]"/>
	        <delay_constant max="75e-12" in_port="fle[8:8].out" out_port="fle.in[2:2]"/>
          </complete>
	      <complete name="lutD" input="lab.I4 lab.I2 fle[1:0].out fle[5:4].out fle[9:9].out" output="fle[9:0].in[3:3]">
	        <delay_constant max="95e-12" in_port="lab.I4" out_port="fle.in[3:3]"/>
	        <delay_constant max="95e-12" in_port="lab.I2" out_port="fle.in[3:3]"/>
	        <delay_constant max="75e-12" in_port="fle[1:0].out" out_port="fle.in[3:3]"/>
	        <delay_constant max="75e-12" in_port="fle[5:4].out" out_port="fle.in[3:3]"/>
	        <delay_constant max="75e-12" in_port="fle[9:9].out" out_port="fle.in[3:3]"/>
          </complete>
	      <complete name="lutE" input="lab.I3 lab.I1 fle[3:2].out fle[7:6].out fle[8:8].out" output="fle[9:0].in[4:4]">
            <delay_constant max="95e-12" in_port="lab.I3" out_port="fle.in[4:4]"/>
            <delay_constant max="95e-12" in_port="lab.I1" out_port="fle.in[4:4]"/>
            <delay_constant max="75e-12" in_port="fle[3:2].out" out_port="fle.in[4:4]"/>
            <delay_constant max="75e-12" in_port="fle[7:6].out" out_port="fle.in[4:4]"/>
            <delay_constant max="75e-12" in_port="fle[8:8].out" out_port="fle.in[4:4]"/>
          </complete>
	      <complete name="lutF" input="lab.I4 lab.I1 fle[1:0].out fle[7:6].out fle[9:9].out" output="fle[9:0].in[5:5]">
	        <delay_constant max="95e-12" in_port="lab.I4" out_port="fle.in[5:5]"/>
	        <delay_constant max="95e-12" in_port="lab.I1" out_port="fle.in[5:5]"/>
	        <delay_constant max="75e-12" in_port="fle[1:0].out" out_port="fle.in[5:5]"/>
	        <delay_constant max="75e-12" in_port="fle[7:6].out" out_port="fle.in[5:5]"/>
	        <delay_constant max="75e-12" in_port="fle[9:9].out" out_port="fle.in[5:5]"/>
          </complete>
		  <complete name="lutG" input="lab.I4 lab.I3 fle[1:0].out fle[3:2].out fle[8:8].out" output="fle[9:0].in[6:6]">
            <delay_constant max="95e-12" in_port="lab.I4" out_port="fle.in[6:6]"/>
            <delay_constant max="95e-12" in_port="lab.I3" out_port="fle.in[6:6]"/>
            <delay_constant max="75e-12" in_port="fle[1:0].out" out_port="fle.in[6:6]"/>
            <delay_constant max="75e-12" in_port="fle[3:2].out" out_port="fle.in[6:6]"/>
            <delay_constant max="75e-12" in_port="fle[8:8].out" out_port="fle.in[6:6]"/>
          </complete>
	      <complete name="lutH" input="lab.I3 lab.I2 fle[3:2].out fle[5:4].out fle[9:9].out" output="fle[9:0].in[7:7]">
	        <delay_constant max="95e-12" in_port="lab.I3" out_port="fle.in[7:7]"/>
	        <delay_constant max="95e-12" in_port="lab.I2" out_port="fle.in[7:7]"/>
	        <delay_constant max="75e-12" in_port="fle[3:2].out" out_port="fle.in[7:7]"/>
	        <delay_constant max="75e-12" in_port="fle[5:4].out" out_port="fle.in[7:7]"/>
	        <delay_constant max="75e-12" in_port="fle[9:9].out" out_port="fle.in[7:7]"/>
          </complete>



            <complete name="clks" input="lab.clk" output="fle[9:0].clk"/>

            <!-- This way of specifying direct connection to clb outputs is important because this architecture uses automatic spreading of opins.  
                   By grouping to output pins in this fashion, if a logic block is completely filled by 6-LUTs, 
                   then the outputs those 6-LUTs take get evenly distributed across all four sides of the CLB instead of clumped on two sides (which is what happens with a more
                   naive specification).
            -->
            <direct name="labouts11" input="fle[9:0].out[0]" output="lab.O[9:0]"/>
            <direct name="labouts12" input="fle[9:0].out[1]" output="lab.O[19:10]"/>
            <direct name="labouts13" input="fle[9:0].out[2]" output="lab.O[29:20]"/>
            <direct name="labouts14" input="fle[9:0].out[3]" output="lab.O[39:30]"/>

            <!-- Carry chain links -->
            <direct name="carry_in1" input="lab.cin[0:0]" output="fle[0:0].cin">
              <!-- Put all inter-block carry chain delay on this one edge -->
              <delay_constant max="0.16e-9" in_port="lab.cin[0:0]" out_port="fle[0:0].cin"/>
              <pack_pattern name="chain" in_port="lab.cin[0:0]" out_port="fle[0:0].cin"/>
            </direct>
            <direct name="carry_in2" input="lab.cin[1:1]" output="fle[5:5].cin">
              <!-- Put all inter-block carry chain delay on this one edge -->
              <delay_constant max="0.16e-9" in_port="lab.cin[1:1]" out_port="fle[5:5].cin"/>
              <pack_pattern name="chain" in_port="lab.cin[1:1]" out_port="fle[5:5].cin"/>
            </direct>
            <direct name="carry_out1" input="fle[4:4].cout" output="lab.cout[0:0]">
              <pack_pattern name="chain" in_port="fle[4:4].cout" out_port="lab.cout[0:0]"/>
            </direct>
            <direct name="carry_out2" input="fle[9:9].cout" output="lab.cout[1:1]">
              <pack_pattern name="chain" in_port="fle[9:9].cout" out_port="lab.cout[1:1]"/>
            </direct>
            <direct name="carry_link1" input="fle[3:0].cout" output="fle[4:1].cin">
              <pack_pattern name="chain" in_port="fle[3:0].cout" out_port="fle[4:1].cin"/>
            </direct>
            <direct name="carry_link2" input="fle[8:5].cout" output="fle[9:6].cin">
              <pack_pattern name="chain" in_port="fle[8:5].cout" out_port="fle[9:6].cin"/>
            </direct>
          </interconnect>
        </pb_type> 
        <interconnect>
           
          <direct name="carry_in1" input="clb.cin[0:0]" output="lab.cin[0:0]"/>
          <direct name="carry_out1" input="lab.cout[0:0]" output="clb.cout[0:0]"/>
          <direct name="carry_in2" input="clb.cin[1:1]" output="lab.cin[1:1]"/>
          <direct name="carry_out2" input="lab.cout[1:1]" output="clb.cout[1:1]"/>

          <direct name="clock" input="clb.clk" output="lab.clk"/>

          <!-- local feedback signals from two outputs per ALM sharing LAB inputs with 
               routing channel inputs -->
          <complete name="Input_feedback_I1" input="clb.I1 lab.O[4:0]" output="lab.I1"/>
          <complete name="Input_feedback_I2" input="clb.I2 lab.O[24:20]" output="lab.I2"/>
          <complete name="Input_feedback_I3" input="clb.I3 lab.O[9:5]" output="lab.I3"/>
          <complete name="Input_feedback_I4" input="clb.I4 lab.O[29:25]" output="lab.I4"/>
          
          <direct name="output" input="lab.O" output="clb.O"/>
        </interconnect>

        <fc in_type="frac" in_val="0.15" out_type="frac" out_val="0.10">
            <fc_override port_name="cin" fc_type="frac" fc_val="0"/>
            <fc_override port_name="cout" fc_type="frac" fc_val="0"/>
            <!-- clock pins do not connect to local routing -->
            <fc_override fc_type="frac" fc_val="0" port_name="clk"/>
        </fc>

        <pinlocations pattern="spread"/>
        </pb_type>
       <!-- Define general purpose logic block (CLB) ends -->


    <!-- Define DSP begin -->
    <!-- Total area from SNPS = 6462.26 um^2. 
         Converting to MWTA at 60 L^2 / MWTA (1 MWTA = 60 * 40 * 40 nm2 = 96000nm2):
           6462.26um2 = 6462.26 * 1000 * 1000 nm2
                     = (6462.26 * 1000 * 1000) / (96000) = 67315.20 ~= 67500 MWTAs

         Now, this area is pre placement and pre routing. We need to add 15% place and route 
         overhead as mentioned in "Chun Ho, ChiWai Yu, Philip Leong,Wayne Luk, and Steven Wilton. 2007. Domain-
         Specific Hybrid FPGA: Architecture and Floating Point Applications. 196  201. https://doi.org/10.1109/FPL.2007.4380647"

         So total area = 1.15 * 67500 = 77625

         Clock duration:
         MAC mode  : 1.11 (Internal combo delay = Critical path delay (1.11) - Setup (0.06) - Clock-to-q (0.11) = 0.94)
         Mult mode : 1.11 (Internal combo delay = Critical path delay (1.11) - Setup (0.06) - Clock-to-q (0.11) = 0.94)
         Add mode  : 0.5  (Internal combo delay = Critical path delay (1.11) - Setup (0.06) - Clock-to-q (0.11) = 0.33)
    --> 
    <pb_type name="dsp" height="2" width="1" area="77625">
	    <input  name="reset"  num_pins="1" is_non_clock_global="true"/> 
<!--	    <input  name="reset"  num_pins="1"/> -->
      <input  name="a"      num_pins="8"/>
      <input  name="b"      num_pins="8"/>
      <input  name="cin"    num_pins="1" />
      <output name="out"    num_pins="8"/>
      <output name="cout"   num_pins="1" />
	    <clock  name="clk"    num_pins="1" />

      <!-- combinatorial multiplier mode -->
      <mode name="comb_mult_8x8_mode">
        <pb_type name="mult_8x8" blif_model=".subckt multiply" num_pb="1">
          <input name="a" num_pins="8"/>
          <input name="b" num_pins="8"/>
          <output name="out" num_pins="8"/>
          <delay_constant max="0.94e-9" in_port="mult_8x8.a" out_port="mult_8x8.out"/>
          <delay_constant max="0.94e-9" in_port="mult_8x8.b" out_port="mult_8x8.out"/>
        </pb_type>

        <interconnect>
          <direct name="a2a" input="dsp.a" output="mult_8x8.a">
		        <delay_constant max="0.1e-9" in_port="dsp.a" out_port="mult_8x8.a"/>
          </direct>
          <direct name="b2b" input="dsp.b" output="mult_8x8.b">
       		  <delay_constant max="0.1e-9" in_port="dsp.b" out_port="mult_8x8.b"/>
          </direct>
          <direct name="out2out" input="mult_8x8.out" output="dsp.out">
		        <delay_constant max="0.1e-9" in_port="mult_8x8.out" out_port="dsp.out"/>
          </direct>
        </interconnect>
      </mode>

      <!-- combinatorial adder mode -->
      <mode name="comb_adder_8x8_mode">
        <pb_type name="adder_pb" blif_model=".subckt adder" num_pb="1">
          <input name="a" num_pins="8"/>
          <input name="b" num_pins="8"/>
          <input name="cin" num_pins="1"/>
          <output name="sumout" num_pins="8"/>
          <output name="cout" num_pins="1"/>

          <!-- Carry link delays included in cin->cout delay -->
          <delay_constant max="0.33e-9" in_port="adder_pb.a" out_port="adder_pb.sumout"/>
          <delay_constant max="0.33e-9" in_port="adder_pb.b" out_port="adder_pb.sumout"/>
          <delay_constant max="0.33e-9" in_port="adder_pb.cin" out_port="adder_pb.sumout"/>
          <delay_constant max="0.33e-9" in_port="adder_pb.a" out_port="adder_pb.cout"/>
          <delay_constant max="0.33e-9" in_port="adder_pb.b" out_port="adder_pb.cout"/>
          <delay_constant max="0.33e-9" in_port="adder_pb.cin" out_port="adder_pb.cout"/>
        </pb_type>
        <interconnect>
          <direct name="atoa" input="dsp.a" output="adder_pb.a">
		        <delay_constant max="0.1e-9" in_port="dsp.a" out_port="adder_pb.a"/>
          </direct>
          <direct name="btob" input="dsp.b" output="adder_pb.b">
		        <delay_constant max="0.1e-9" in_port="dsp.b" out_port="adder_pb.b"/>
		      </direct>
          <direct name="cintocin" input="dsp.cin" output="adder_pb.cin">
		      </direct>
          <direct name="sumouttosumout" input="adder_pb.sumout" output="dsp.out">
		        <delay_constant max="0.1e-9" in_port="adder_pb.sumout" out_port="dsp.out"/>
		      </direct>
          <direct name="couttocout" input="adder_pb.cout" output="dsp.cout">
		      </direct>
        </interconnect>
      </mode>

      <!-- sequential multiplier mode -->
      <mode name="seq_mult_8x8_mode">
        <pb_type name="mult_8x8" blif_model=".subckt seq_multiply" num_pb="1">
          <input name="a" num_pins="8"/>
          <input name="b" num_pins="8"/>
          <output name="out" num_pins="8"/>
	   			<input name="reset" num_pins="1" />
		  		<clock name="clk"  num_pins="1" />

				  <T_setup value="66e-12" port="mult_8x8.reset" clock="clk"/>
				  <T_setup value="66e-12" port="mult_8x8.a" clock="clk"/>
				  <T_setup value="66e-12" port="mult_8x8.b" clock="clk"/>
				  <T_setup value="66e-12" port="mult_8x8.out" clock="clk"/>
				  
				  <T_clock_to_Q max="124e-12" port="mult_8x8.reset" clock="clk"/>
				  <T_clock_to_Q max="124e-12" port="mult_8x8.a" clock="clk"/>
				  <T_clock_to_Q max="124e-12" port="mult_8x8.b" clock="clk"/>
				  <T_clock_to_Q max="124e-12" port="mult_8x8.out" clock="clk"/>

          <delay_constant max="0.94e-9" in_port="mult_8x8.a" out_port="mult_8x8.out"/>
          <delay_constant max="0.94e-9" in_port="mult_8x8.b" out_port="mult_8x8.out"/>
          <delay_constant max="0.94e-9" in_port="mult_8x8.reset" out_port="mult_8x8.out"/>
        </pb_type>

        <interconnect>
          <!-- The delays here because of the additional mux to expose the combinatorial multiplier -->
          <direct name="a2a" input="dsp.a" output="mult_8x8.a">
		        <delay_constant max="0.1e-9" in_port="dsp.a" out_port="mult_8x8.a"/>
          </direct>
          <direct name="b2b" input="dsp.b" output="mult_8x8.b">
       		  <delay_constant max="0.1e-9" in_port="dsp.b" out_port="mult_8x8.b"/>
          </direct>
          <direct name="out2out" input="mult_8x8.out" output="dsp.out">
		        <delay_constant max="0.1e-9" in_port="mult_8x8.out" out_port="dsp.out"/>
          </direct>
				  <direct name="reset2reset" input="dsp.reset" output="mult_8x8.reset">
				  </direct>
				  <direct name="clk2clk" input="dsp.clk" output="mult_8x8.clk">
				  </direct>
        </interconnect>
      </mode>

      <!-- sequential adder mode -->
      <mode name="seq_adder_8x8_mode">
        <pb_type name="adder_pb" blif_model=".subckt seq_adder" num_pb="1">
          <input name="a" num_pins="8"/>
          <input name="b" num_pins="8"/>
          <input name="cin" num_pins="1"/>
          <output name="sumout" num_pins="8"/>
          <output name="cout" num_pins="1"/>
	   			<input name="reset" num_pins="1" />
		  		<clock name="clk"  num_pins="1" />
  
  				<T_setup value="66e-12" port="adder_pb.reset" clock="clk"/>
  				<T_setup value="66e-12" port="adder_pb.a" clock="clk"/>
  				<T_setup value="66e-12" port="adder_pb.b" clock="clk"/>
  				<T_setup value="66e-12" port="adder_pb.sumout" clock="clk"/>
  				<T_setup value="66e-12" port="adder_pb.cout" clock="clk"/>
  				<T_setup value="66e-12" port="adder_pb.cin" clock="clk"/>
  				
  				<T_clock_to_Q max="124e-12" port="adder_pb.reset" clock="clk"/>
  				<T_clock_to_Q max="124e-12" port="adder_pb.a" clock="clk"/>
  				<T_clock_to_Q max="124e-12" port="adder_pb.b" clock="clk"/>
  				<T_clock_to_Q max="124e-12" port="adder_pb.sumout" clock="clk"/>
  				<T_clock_to_Q max="124e-12" port="adder_pb.cout" clock="clk"/>
  				<T_clock_to_Q max="124e-12" port="adder_pb.cin" clock="clk"/>

          <!-- Carry link delays included in cin->cout delay -->
          <delay_constant max="0.33e-9" in_port="adder_pb.a" out_port="adder_pb.sumout"/>
          <delay_constant max="0.33e-9" in_port="adder_pb.b" out_port="adder_pb.sumout"/>
          <delay_constant max="0.33e-9" in_port="adder_pb.cin" out_port="adder_pb.sumout"/>
          <delay_constant max="0.33e-9" in_port="adder_pb.reset" out_port="adder_pb.sumout"/>
          <delay_constant max="0.33e-9" in_port="adder_pb.a" out_port="adder_pb.cout"/>
          <delay_constant max="0.33e-9" in_port="adder_pb.b" out_port="adder_pb.cout"/>
          <delay_constant max="0.33e-9" in_port="adder_pb.cin" out_port="adder_pb.cout"/>
          <delay_constant max="0.33e-9" in_port="adder_pb.reset" out_port="adder_pb.cout"/>
        </pb_type>

        <interconnect>
          <!-- The delays here because of the additional mux to expose the combinatorial adder-->
          <direct name="atoa" input="dsp.a" output="adder_pb.a">
		        <delay_constant max="0.1e-9" in_port="dsp.a" out_port="adder_pb.a"/>
		      </direct>
          <direct name="btob" input="dsp.b" output="adder_pb.b">
		        <delay_constant max="0.1e-9" in_port="dsp.b" out_port="adder_pb.b"/>
    		  </direct>
          <direct name="cintocin" input="dsp.cin" output="adder_pb.cin">
		      </direct>
          <direct name="sumouttosumout" input="adder_pb.sumout" output="dsp.out">
		        <delay_constant max="0.1e-9" in_port="adder_pb.sumout" out_port="dsp.out"/>
		      </direct>
          <direct name="couttocout" input="adder_pb.cout" output="dsp.cout">
		      </direct>
				  <direct name="reset2reset" input="dsp.reset" output="adder_pb.reset">
				  </direct>
				  <direct name="clk2clk" input="dsp.clk" output="adder_pb.clk">
				  </direct>
        </interconnect>
      </mode>

      <!-- sequential mac mode -->
      <mode name="seq_mac_8x8_mode">
      	<pb_type name="mac_8x8" blif_model=".subckt seq_mac" num_pb="1">
				  <input name="a" num_pins="8"/>
				  <input name="b" num_pins="8"/>
				  <output name="out" num_pins="8"/>
				  <input name="reset" num_pins="1" />
				  <clock name="clk"  num_pins="1" />

				  <T_setup value="66e-12" port="mac_8x8.reset" clock="clk"/>
				  <T_setup value="66e-12" port="mac_8x8.a" clock="clk"/>
				  <T_setup value="66e-12" port="mac_8x8.b" clock="clk"/>
				  <T_setup value="66e-12" port="mac_8x8.out" clock="clk"/>
				  
				  <T_clock_to_Q max="124e-12" port="mac_8x8.reset" clock="clk"/>
				  <T_clock_to_Q max="124e-12" port="mac_8x8.a" clock="clk"/>
				  <T_clock_to_Q max="124e-12" port="mac_8x8.b" clock="clk"/>
				  <T_clock_to_Q max="124e-12" port="mac_8x8.out" clock="clk"/>
				  
				  <delay_constant max="0.94e-9" in_port="mac_8x8.a" out_port="mac_8x8.out"/>
				  <delay_constant max="0.94e-9" in_port="mac_8x8.b" out_port="mac_8x8.out"/>
				  <delay_constant max="0.94e-9" in_port="mac_8x8.reset" out_port="mac_8x8.out"/>

          <!--  <power method="pin-toggle">
              <port name="a" energy_per_toggle="1.09e-12"/>
              <port name="b" energy_per_toggle="1.09e-12"/>
              <port name="c" energy_per_toggle="1.09e-12"/>
              <static_power power_per_instance="0.0"/>					
            </power>-->
        </pb_type>
        <interconnect>
				  <direct name="a2a" input="dsp.a" output="mac_8x8.a">
				  </direct>
				  <direct name="b2b" input="dsp.b" output="mac_8x8.b">
				  </direct>
				  <direct name="reset2reset" input="dsp.reset" output="mac_8x8.reset">
				  </direct>
				  <direct name="clk2clk" input="dsp.clk" output="mac_8x8.clk">
				  </direct>
				  <direct name="out2out" input="mac_8x8.out" output="dsp.out">
				  </direct>
        </interconnect>
      </mode>

      <fc in_type="frac" in_val="0.15" out_type="frac" out_val="0.10">
        <!-- clock pins do not connect to local routing--> 
        <fc_override fc_type="frac" fc_val="0" port_name="clk"/> 
      </fc>
      <pinlocations pattern="spread"/>

      <!-- Place this multiplier block every 8 columns from (and including) the sixth column -->
      <power method="sum-of-children"/>
    </pb_type>
    <!-- Define DSP end -->

    <!-- Define matrix multiplier begin -->

    <!-- Total area from SNPS = 34910.28 um^2
         Converting to MWTA at 60 L^2 / MWTA (1 MWTA = 60 * 40 * 40 nm2 = 96000nm2):
          34910.28um2 = 34910.28 * 1000 * 1000 nm2
                     = (34910.28 * 1000 * 1000) / (96000) = 363648 MWTAs

         Now, this area is pre placement and pre routing. We need to add 15% place and route 
         overhead as mentioned in "Chun Ho, ChiWai Yu, Philip Leong,Wayne Luk, and Steven Wilton. 2007. Domain-
         Specific Hybrid FPGA: Architecture and Floating Point Applications. 196  201. https://doi.org/10.1109/FPL.2007.4380647"

         So total area = 1.15 * 363648 = 418196 ~= 418200

         Clock duration: 1.11 
    --> 
	
TODO: Fix area
    <pb_type name="matmul_32x32" height="24" width="24" area="418200">

      <input name="reset" num_pins="1" is_non_clock_global="true"/>
      <input name="start_mat_mul" num_pins="1" is_non_clock_global="true"/>
      <input name="a_data" num_pins="256"/>
      <input name="b_data" num_pins="256"/>
      <input name="a_data_in" num_pins="256"/>
      <input name="b_data_in" num_pins="256"/>
      <input name="c_data_in" num_pins="256"/>
      <input name="final_mat_mul_size" num_pins="8"/>
      <input name="a_loc" num_pins="8"/>
      <input name="b_loc" num_pins="8"/>

      <output name="done_mat_mul"  num_pins="1"/>
      <output name="a_data_out"  num_pins="256"/>
      <output name="b_data_out"  num_pins="256"/>
      <output name="c_data_out"  num_pins="256"/>
      <output name="a_addr"  num_pins="7"/>
      <output name="b_addr"  num_pins="7"/>

      <clock name="clk" num_pins="1"/>

      <mode name="matmul_32x32_mode">
        <pb_type name="matmul_32x32_pb" blif_model=".subckt matmul_32x32_systolic" num_pb="1">

          <input name="reset" num_pins="1"/>
          <input name="start_mat_mul" num_pins="1"/>
          <input name="a_data" num_pins="256"/>
          <input name="b_data" num_pins="256"/>
          <input name="a_data_in" num_pins="256"/>
          <input name="b_data_in" num_pins="256"/>
          <input name="c_data_in" num_pins="256"/>
          <input name="final_mat_mul_size" num_pins="8"/>
          <input name="a_loc" num_pins="8"/>
          <input name="b_loc" num_pins="8"/>

          <output name="done_mat_mul"  num_pins="1"/>
          <output name="a_data_out"  num_pins="256"/>
          <output name="b_data_out"  num_pins="256"/>
          <output name="c_data_out"  num_pins="256"/>
          <output name="a_addr"  num_pins="7"/>
          <output name="b_addr"  num_pins="7"/>

          <clock name="clk" num_pins="1"/>

	        <T_setup value="66e-12" port="matmul_32x32_pb.reset" clock="clk"/>
	        <T_setup value="66e-12" port="matmul_32x32_pb.start_mat_mul" clock="clk"/>
	        <T_setup value="66e-12" port="matmul_32x32_pb.a_data" clock="clk"/>
	        <T_setup value="66e-12" port="matmul_32x32_pb.b_data" clock="clk"/>
	        <T_setup value="66e-12" port="matmul_32x32_pb.a_data_in" clock="clk"/>
	        <T_setup value="66e-12" port="matmul_32x32_pb.b_data_in" clock="clk"/>
	        <T_setup value="66e-12" port="matmul_32x32_pb.c_data_in" clock="clk"/>
	        <T_setup value="66e-12" port="matmul_32x32_pb.final_mat_mul_size" clock="clk"/>
	        <T_setup value="66e-12" port="matmul_32x32_pb.a_loc" clock="clk"/>
	        <T_setup value="66e-12" port="matmul_32x32_pb.b_loc" clock="clk"/>
	        <T_setup value="66e-12" port="matmul_32x32_pb.done_mat_mul" clock="clk"/>
	        <T_setup value="66e-12" port="matmul_32x32_pb.a_data_out" clock="clk"/>
	        <T_setup value="66e-12" port="matmul_32x32_pb.b_data_out" clock="clk"/>
	        <T_setup value="66e-12" port="matmul_32x32_pb.a_addr" clock="clk"/>
	        <T_setup value="66e-12" port="matmul_32x32_pb.b_addr" clock="clk"/>
	        <T_setup value="66e-12" port="matmul_32x32_pb.c_data_out" clock="clk"/>

	        <T_clock_to_Q max="124e-12" port="matmul_32x32_pb.reset" clock="clk"/>
	        <T_clock_to_Q max="124e-12" port="matmul_32x32_pb.start_mat_mul" clock="clk"/>
	        <T_clock_to_Q max="124e-12" port="matmul_32x32_pb.a_data" clock="clk"/>
	        <T_clock_to_Q max="124e-12" port="matmul_32x32_pb.b_data" clock="clk"/>
	        <T_clock_to_Q max="124e-12" port="matmul_32x32_pb.a_data_in" clock="clk"/>
	        <T_clock_to_Q max="124e-12" port="matmul_32x32_pb.b_data_in" clock="clk"/>
	        <T_clock_to_Q max="124e-12" port="matmul_32x32_pb.c_data_in" clock="clk"/>
	        <T_clock_to_Q max="124e-12" port="matmul_32x32_pb.final_mat_mul_size" clock="clk"/>
	        <T_clock_to_Q max="124e-12" port="matmul_32x32_pb.a_loc" clock="clk"/>
	        <T_clock_to_Q max="124e-12" port="matmul_32x32_pb.b_loc" clock="clk"/>
	        <T_clock_to_Q max="124e-12" port="matmul_32x32_pb.done_mat_mul" clock="clk"/>
	        <T_clock_to_Q max="124e-12" port="matmul_32x32_pb.a_data_out" clock="clk"/>
	        <T_clock_to_Q max="124e-12" port="matmul_32x32_pb.b_data_out" clock="clk"/>
	        <T_clock_to_Q max="124e-12" port="matmul_32x32_pb.a_addr" clock="clk"/>
	        <T_clock_to_Q max="124e-12" port="matmul_32x32_pb.b_addr" clock="clk"/>
	        <T_clock_to_Q max="124e-12" port="matmul_32x32_pb.c_data_out" clock="clk"/>

          <!-- Internal combo delay = Critical path delay (1.1) - Setup (0.06) - Clock-to-q (0.11) -->
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.reset" out_port="matmul_32x32_pb.done_mat_mul"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.reset" out_port="matmul_32x32_pb.a_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.reset" out_port="matmul_32x32_pb.b_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.reset" out_port="matmul_32x32_pb.a_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.reset" out_port="matmul_32x32_pb.b_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.reset" out_port="matmul_32x32_pb.c_data_out"/>

	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.start_mat_mul" out_port="matmul_32x32_pb.done_mat_mul"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.start_mat_mul" out_port="matmul_32x32_pb.a_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.start_mat_mul" out_port="matmul_32x32_pb.b_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.start_mat_mul" out_port="matmul_32x32_pb.a_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.start_mat_mul" out_port="matmul_32x32_pb.b_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.start_mat_mul" out_port="matmul_32x32_pb.c_data_out"/>

	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_data" out_port="matmul_32x32_pb.done_mat_mul"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_data" out_port="matmul_32x32_pb.a_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_data" out_port="matmul_32x32_pb.b_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_data" out_port="matmul_32x32_pb.a_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_data" out_port="matmul_32x32_pb.b_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_data" out_port="matmul_32x32_pb.c_data_out"/>

	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_data" out_port="matmul_32x32_pb.done_mat_mul"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_data" out_port="matmul_32x32_pb.a_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_data" out_port="matmul_32x32_pb.b_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_data" out_port="matmul_32x32_pb.a_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_data" out_port="matmul_32x32_pb.b_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_data" out_port="matmul_32x32_pb.c_data_out"/>

	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_data_in" out_port="matmul_32x32_pb.done_mat_mul"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_data_in" out_port="matmul_32x32_pb.a_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_data_in" out_port="matmul_32x32_pb.b_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_data_in" out_port="matmul_32x32_pb.a_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_data_in" out_port="matmul_32x32_pb.b_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_data_in" out_port="matmul_32x32_pb.c_data_out"/>

	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_data_in" out_port="matmul_32x32_pb.done_mat_mul"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_data_in" out_port="matmul_32x32_pb.a_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_data_in" out_port="matmul_32x32_pb.b_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_data_in" out_port="matmul_32x32_pb.a_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_data_in" out_port="matmul_32x32_pb.b_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_data_in" out_port="matmul_32x32_pb.c_data_out"/>

	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.c_data_in" out_port="matmul_32x32_pb.done_mat_mul"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.c_data_in" out_port="matmul_32x32_pb.a_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.c_data_in" out_port="matmul_32x32_pb.b_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.c_data_in" out_port="matmul_32x32_pb.a_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.c_data_in" out_port="matmul_32x32_pb.b_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.c_data_in" out_port="matmul_32x32_pb.c_data_out"/>

	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.final_mat_mul_size" out_port="matmul_32x32_pb.done_mat_mul"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.final_mat_mul_size" out_port="matmul_32x32_pb.a_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.final_mat_mul_size" out_port="matmul_32x32_pb.b_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.final_mat_mul_size" out_port="matmul_32x32_pb.a_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.final_mat_mul_size" out_port="matmul_32x32_pb.b_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.final_mat_mul_size" out_port="matmul_32x32_pb.c_data_out"/>

	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_loc" out_port="matmul_32x32_pb.done_mat_mul"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_loc" out_port="matmul_32x32_pb.a_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_loc" out_port="matmul_32x32_pb.b_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_loc" out_port="matmul_32x32_pb.a_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_loc" out_port="matmul_32x32_pb.b_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.a_loc" out_port="matmul_32x32_pb.c_data_out"/>

	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_loc" out_port="matmul_32x32_pb.done_mat_mul"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_loc" out_port="matmul_32x32_pb.a_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_loc" out_port="matmul_32x32_pb.b_data_out"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_loc" out_port="matmul_32x32_pb.a_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_loc" out_port="matmul_32x32_pb.b_addr"/>
	        <delay_constant max="0.94e-9" in_port="matmul_32x32_pb.b_loc" out_port="matmul_32x32_pb.c_data_out"/>

<!-- 
          <power method="pin-toggle">
            <port name="start" energy_per_toggle="2.13e-12"/>
            <port name="in_dataA" energy_per_toggle="2.13e-12"/>
            <port name="in_dataB" energy_per_toggle="2.13e-12"/>
            <port name="out_dataC" energy_per_toggle="2.13e-12"/>
            <port name="done" energy_per_toggle="2.13e-12"/>
            <port name="clk" energy_per_toggle="9.0e-12"/>					
            <static_power power_per_instance="0.0"/>
          </power>
-->
        </pb_type>

        <interconnect>
          <direct name="reset" input="matmul_32x32.reset" output="matmul_32x32_pb.reset"></direct>
          <direct name="start_mat_mul" input="matmul_32x32.start_mat_mul"    output="matmul_32x32_pb.start_mat_mul"></direct>
          <direct name="a_data" input="matmul_32x32.a_data"    output="matmul_32x32_pb.a_data"></direct>
          <direct name="b_data" input="matmul_32x32.b_data"    output="matmul_32x32_pb.b_data"></direct>
          <direct name="a_data_in" input="matmul_32x32.a_data_in"    output="matmul_32x32_pb.a_data_in"></direct>
          <direct name="b_data_in" input="matmul_32x32.b_data_in"    output="matmul_32x32_pb.b_data_in"></direct>
          <direct name="c_data_in" input="matmul_32x32.c_data_in"    output="matmul_32x32_pb.c_data_in"></direct>
          <direct name="final_mat_mul_size" input="matmul_32x32.final_mat_mul_size"    output="matmul_32x32_pb.final_mat_mul_size"></direct>
          <direct name="a_loc" input="matmul_32x32.a_loc"    output="matmul_32x32_pb.a_loc"></direct>
          <direct name="b_loc" input="matmul_32x32.b_loc"    output="matmul_32x32_pb.b_loc"></direct>
          <direct name="done_mat_mul" input="matmul_32x32_pb.done_mat_mul" output="matmul_32x32.done_mat_mul"></direct>
          <direct name="a_data_out" input="matmul_32x32_pb.a_data_out" output="matmul_32x32.a_data_out"></direct>
          <direct name="b_data_out" input="matmul_32x32_pb.b_data_out" output="matmul_32x32.b_data_out"></direct>
          <direct name="a_addr" input="matmul_32x32_pb.a_addr" output="matmul_32x32.a_addr"></direct>
          <direct name="b_addr" input="matmul_32x32_pb.b_addr" output="matmul_32x32.b_addr"></direct>
          <direct name="c_data_out" input="matmul_32x32_pb.c_data_out" output="matmul_32x32.c_data_out"></direct>
          <direct name="clk" input="matmul_32x32.clk" output="matmul_32x32_pb.clk"></direct>
        </interconnect>

      </mode>

      <fc in_type="frac" in_val="0.15" out_type="frac" out_val="0.10">
      </fc>
      <pinlocations pattern="perimeter"/>

      <power method="sum-of-children"/>
    </pb_type>
    <!-- Define matrix multiplier end -->



    <!-- Define fracturable memory begin -->
    <!-- 32 Kb Memory that can operate from 512x64 to 32Kx1 for single-port mode and 1024x32 to 32Kx1 for dual-port mode.  
           Area and delay based off Stratix IV 9K and 144K memories (delay from linear interpolation, Tsu(483 ps, 636 ps) Tco(1084ps, 1969ps)).  
           Input delay = 204ps (from Stratix IV LAB line) - 72ps (this architecture does not lump connection box delay in internal delay)
           Output delay = M9K buffer 50ps
		   
		   Area is obtained by appropriately scaling and adjusting the published Stratix III (which is architecturally identical to Stratix IV)
		   data from H. Wong, V. Betz and J. Rose, "Comparing FPGA vs. Custom CMOS and the Impact on Processor Microarchitecture", FPGA 2011.
		   Linearly interpolating (by bit count) between the M9k and M144k areas to obtain an M32k (our RAM size) point yields a 65 nm area of
		   of 0.153 mm^2. Interpolating based on port count between the RAMs would instead yield an area of 0.209 mm^2 for our 32 kB RAM; since 
		   bit count accounts for more area than ports for a RAM this size we choose the bit count interpolation; however, since the port interpolation
		   is not radically different this also gives us confidence that interpolating based on bits is OK, but slightly underpredicts area.
		   Scaling to 40 nm^2 yields .0579 mm^2, and converting to MWTUs at 60 L^2 / MWTU yields 604,000 MWTUs. This includes routing. A Stratix IV
		   M9K RAM is one row high and hence has one routing tile (one horizonal and one vertical routing segment area). An M144k RAM has 8 such tiles.
		   Linearly interpolating on
		   bits to 32 kb yields 2.2 routing tiles incorporated in the area number above. The inter-block routing represents 30% of the area of a logic 
		   tile according to D. Lewis et al, "Architectural Enhancements in Stratix V," FPGA 2013. Hence we should subtract 0.3 * 2.2 * 84,375 MWTUs to
		   obtain a RAM core area (not including inter-block routing) of 548,000 MWTU areas for our 32 kb RAM in a 40 nm process.

       Delay calculation for M20k:
         Setup time:
          Linear interpolation between 483ps for M9k and 636ps for M144k gives
          509ps for M32k and 472ps for M20k
         Clock to Q time: 
          Linear interpolation between 1084ps for M9k and 1969ps for M144k gives
          1234ps for M32k and 1156ps for M20k
         Input delay and output delay are the same as M32k 


       Area calculation for M20k:
       In the paper, area of M9K is 0.0635 and area of M144K is 0.5897
       Linear interpolation gives 0.153 mm2 for M32k and 0.1063 mm2 for M20k
       Scaling relationship for area is S^2, where S is the ratio of the node sizes.
       In this case, 65nm/40nm = 1.625 = S.
       S^2 = 1.625^2 = 2.64
       Scaling to 40nm^2 gives 0.153/2.64 = 0.0579mm2 for M32K and 0.1063/2.64 = 0.040265mm2 for M20k.
       Converting to MWTA at 60 L^2 / MWTA (1 MWTA = 60 * 40 * 40 nm2 = 96000nm2):
           0.0579mm2 = 0.0579 * 1000000 * 1000000 nm2
                     = (0.0579 * 1000000 * 1000000) / (96000) = 603125 ~= 604000 MWTAs
           0.040265mm2 =  0.040265 * 1000000 * 1000000 nm2
                     = (0.040265 * 1000000 * 1000000) / (96000) = 419427 ~= 420000 MWTAs 
       Stratix IV M9k has 1 tile.
       Stratix IV M32k has 8 tiles.
       Linear interpolation means: 
         M32k has 2.2 tiles
         M20k has 1.57 tiles
      
       For core area for M20k, subtract 0.3 * 1.57 * 84375 = 39740
       to get: 380260 MWTAs
      -->
    <pb_type name="memory" height="3" width="2" area="380260">
      <input name="addr1" num_pins="11"/>
      <input name="addr2" num_pins="11"/>
      <input name="data" num_pins="40"/>
      <input name="we1" num_pins="1"/>
      <input name="we2" num_pins="1"/>
      <output name="out" num_pins="40"/>
      <clock name="clk" num_pins="1"/>
      <!-- Specify single port mode first -->
      <mode name="mem_512x40_sp">
        <pb_type name="mem_512x40_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
          <input name="addr" num_pins="9" port_class="address"/>
          <input name="data" num_pins="40" port_class="data_in"/>
          <input name="we" num_pins="1" port_class="write_en"/>
          <output name="out" num_pins="40" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="472e-12" port="mem_512x40_sp.addr" clock="clk"/>
          <T_setup value="472e-12" port="mem_512x40_sp.data" clock="clk"/>
          <T_setup value="472e-12" port="mem_512x40_sp.we" clock="clk"/>
          <T_clock_to_Q max="1.156e-9" port="mem_512x40_sp.out" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="9.0e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[8:0]" output="mem_512x40_sp.addr">
            <delay_constant max="132e-12" in_port="memory.addr1[8:0]" out_port="mem_512x40_sp.addr"/>
          </direct>
          <direct name="data1" input="memory.data" output="mem_512x40_sp.data">
            <delay_constant max="132e-12" in_port="memory.data" out_port="mem_512x40_sp.data"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_512x40_sp.we">
            <delay_constant max="132e-12" in_port="memory.we1" out_port="mem_512x40_sp.we"/>
          </direct>
          <direct name="dataout1" input="mem_512x40_sp.out" output="memory.out">
            <delay_constant max="40e-12" in_port="mem_512x40_sp.out" out_port="memory.out"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_512x40_sp.clk">
             </direct>
        </interconnect>
      </mode>

      <mode name="mem_512x32_sp">
        <pb_type name="mem_512x32_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
          <input name="addr" num_pins="9" port_class="address"/>
          <input name="data" num_pins="32" port_class="data_in"/>
          <input name="we" num_pins="1" port_class="write_en"/>
          <output name="out" num_pins="32" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="472e-12" port="mem_512x32_sp.addr" clock="clk"/>
          <T_setup value="472e-12" port="mem_512x32_sp.data" clock="clk"/>
          <T_setup value="472e-12" port="mem_512x32_sp.we" clock="clk"/>
          <T_clock_to_Q max="1.156e-9" port="mem_512x32_sp.out" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="9.0e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[8:0]" output="mem_512x32_sp.addr">
            <delay_constant max="132e-12" in_port="memory.addr1[8:0]" out_port="mem_512x32_sp.addr"/>
          </direct>
          <direct name="data1" input="memory.data[31:0]" output="mem_512x32_sp.data">
            <delay_constant max="132e-12" in_port="memory.data[31:0]" out_port="mem_512x32_sp.data"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_512x32_sp.we">
            <delay_constant max="132e-12" in_port="memory.we1" out_port="mem_512x32_sp.we"/>
          </direct>
          <direct name="dataout1" input="mem_512x32_sp.out" output="memory.out[31:0]">
            <delay_constant max="40e-12" in_port="mem_512x32_sp.out" out_port="memory.out[31:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_512x32_sp.clk">
             </direct>
        </interconnect>
      </mode>

      <mode name="mem_1024x20_sp">
        <pb_type name="mem_1024x20_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
          <input name="addr" num_pins="10" port_class="address"/>
          <input name="data" num_pins="20" port_class="data_in"/>
          <input name="we" num_pins="1" port_class="write_en"/>
          <output name="out" num_pins="20" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="472e-12" port="mem_1024x20_sp.addr" clock="clk"/>
          <T_setup value="472e-12" port="mem_1024x20_sp.data" clock="clk"/>
          <T_setup value="472e-12" port="mem_1024x20_sp.we" clock="clk"/>
          <T_clock_to_Q max="1.156e-9" port="mem_1024x20_sp.out" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="9.0e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[9:0]" output="mem_1024x20_sp.addr">
            <delay_constant max="132e-12" in_port="memory.addr1[9:0]" out_port="mem_1024x20_sp.addr"/>
          </direct>
          <direct name="data1" input="memory.data[19:0]" output="mem_1024x20_sp.data">
            <delay_constant max="132e-12" in_port="memory.data[19:0]" out_port="mem_1024x20_sp.data"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_1024x20_sp.we">
            <delay_constant max="132e-12" in_port="memory.we1" out_port="mem_1024x20_sp.we"/>
          </direct>
          <direct name="dataout1" input="mem_1024x20_sp.out" output="memory.out[19:0]">
            <delay_constant max="40e-12" in_port="mem_1024x20_sp.out" out_port="memory.out[19:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_1024x20_sp.clk">
             </direct>
        </interconnect>
      </mode>

      <mode name="mem_1024x16_sp">
        <pb_type name="mem_1024x16_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
          <input name="addr" num_pins="10" port_class="address"/>
          <input name="data" num_pins="16" port_class="data_in"/>
          <input name="we" num_pins="1" port_class="write_en"/>
          <output name="out" num_pins="16" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="472e-12" port="mem_1024x16_sp.addr" clock="clk"/>
          <T_setup value="472e-12" port="mem_1024x16_sp.data" clock="clk"/>
          <T_setup value="472e-12" port="mem_1024x16_sp.we" clock="clk"/>
          <T_clock_to_Q max="1.156e-9" port="mem_1024x16_sp.out" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="9.0e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[9:0]" output="mem_1024x16_sp.addr">
            <delay_constant max="132e-12" in_port="memory.addr1[9:0]" out_port="mem_1024x16_sp.addr"/>
          </direct>
          <direct name="data1" input="memory.data[15:0]" output="mem_1024x16_sp.data">
            <delay_constant max="132e-12" in_port="memory.data[15:0]" out_port="mem_1024x16_sp.data"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_1024x16_sp.we">
            <delay_constant max="132e-12" in_port="memory.we1" out_port="mem_1024x16_sp.we"/>
          </direct>
          <direct name="dataout1" input="mem_1024x16_sp.out" output="memory.out[15:0]">
            <delay_constant max="40e-12" in_port="mem_1024x16_sp.out" out_port="memory.out[15:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_1024x16_sp.clk">
             </direct>
        </interconnect>
      </mode>

      <mode name="mem_2048x10_sp">
        <pb_type name="mem_2048x10_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
          <input name="addr" num_pins="11" port_class="address"/>
          <input name="data" num_pins="10" port_class="data_in"/>
          <input name="we" num_pins="1" port_class="write_en"/>
          <output name="out" num_pins="10" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="472e-12" port="mem_2048x10_sp.addr" clock="clk"/>
          <T_setup value="472e-12" port="mem_2048x10_sp.data" clock="clk"/>
          <T_setup value="472e-12" port="mem_2048x10_sp.we" clock="clk"/>
          <T_clock_to_Q max="1.156e-9" port="mem_2048x10_sp.out" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="9.0e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[10:0]" output="mem_2048x10_sp.addr">
            <delay_constant max="132e-12" in_port="memory.addr1[10:0]" out_port="mem_2048x10_sp.addr"/>
          </direct>
          <direct name="data1" input="memory.data[9:0]" output="mem_2048x10_sp.data">
            <delay_constant max="132e-12" in_port="memory.data[9:0]" out_port="mem_2048x10_sp.data"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_2048x10_sp.we">
            <delay_constant max="132e-12" in_port="memory.we1" out_port="mem_2048x10_sp.we"/>
          </direct>
          <direct name="dataout1" input="mem_2048x10_sp.out" output="memory.out[9:0]">
            <delay_constant max="40e-12" in_port="mem_2048x10_sp.out" out_port="memory.out[9:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_2048x10_sp.clk">
             </direct>
        </interconnect>
      </mode>

      <mode name="mem_2048x8_sp">
        <pb_type name="mem_2048x8_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
          <input name="addr" num_pins="11" port_class="address"/>
          <input name="data" num_pins="8" port_class="data_in"/>
          <input name="we" num_pins="1" port_class="write_en"/>
          <output name="out" num_pins="8" port_class="data_out"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="472e-12" port="mem_2048x8_sp.addr" clock="clk"/>
          <T_setup value="472e-12" port="mem_2048x8_sp.data" clock="clk"/>
          <T_setup value="472e-12" port="mem_2048x8_sp.we" clock="clk"/>
          <T_clock_to_Q max="1.156e-9" port="mem_2048x8_sp.out" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="9.0e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[10:0]" output="mem_2048x8_sp.addr">
            <delay_constant max="132e-12" in_port="memory.addr1[10:0]" out_port="mem_2048x8_sp.addr"/>
          </direct>
          <direct name="data1" input="memory.data[7:0]" output="mem_2048x8_sp.data">
            <delay_constant max="132e-12" in_port="memory.data[7:0]" out_port="mem_2048x8_sp.data"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_2048x8_sp.we">
            <delay_constant max="132e-12" in_port="memory.we1" out_port="mem_2048x8_sp.we"/>
          </direct>
          <direct name="dataout1" input="mem_2048x8_sp.out" output="memory.out[7:0]">
            <delay_constant max="40e-12" in_port="mem_2048x8_sp.out" out_port="memory.out[7:0]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_2048x8_sp.clk">
             </direct>
        </interconnect>
      </mode>

      <!-- Specify true dual port mode next -->
      <mode name="mem_1024x20_dp">
        <pb_type name="mem_1024x20_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
          <input name="addr1" num_pins="10" port_class="address1"/>
          <input name="addr2" num_pins="10" port_class="address2"/>
          <input name="data1" num_pins="20" port_class="data_in1"/>
          <input name="data2" num_pins="20" port_class="data_in2"/>
          <input name="we1" num_pins="1" port_class="write_en1"/>
          <input name="we2" num_pins="1" port_class="write_en2"/>
          <output name="out1" num_pins="20" port_class="data_out1"/>
          <output name="out2" num_pins="20" port_class="data_out2"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="472e-12" port="mem_1024x20_dp.addr1" clock="clk"/>
          <T_setup value="472e-12" port="mem_1024x20_dp.data1" clock="clk"/>
          <T_setup value="472e-12" port="mem_1024x20_dp.we1" clock="clk"/>
          <T_setup value="472e-12" port="mem_1024x20_dp.addr2" clock="clk"/>
          <T_setup value="472e-12" port="mem_1024x20_dp.data2" clock="clk"/>
          <T_setup value="472e-12" port="mem_1024x20_dp.we2" clock="clk"/>
          <T_clock_to_Q max="1.156e-9" port="mem_1024x20_dp.out1" clock="clk"/>
          <T_clock_to_Q max="1.156e-9" port="mem_1024x20_dp.out2" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="17.9e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[9:0]" output="mem_1024x20_dp.addr1">
            <delay_constant max="132e-12" in_port="memory.addr1[9:0]" out_port="mem_1024x20_dp.addr1"/>
          </direct>
          <direct name="address2" input="memory.addr2[9:0]" output="mem_1024x20_dp.addr2">
            <delay_constant max="132e-12" in_port="memory.addr2[9:0]" out_port="mem_1024x20_dp.addr2"/>
          </direct>
          <direct name="data1" input="memory.data[19:0]" output="mem_1024x20_dp.data1">
            <delay_constant max="132e-12" in_port="memory.data[19:0]" out_port="mem_1024x20_dp.data1"/>
          </direct>
          <direct name="data2" input="memory.data[39:20]" output="mem_1024x20_dp.data2">
            <delay_constant max="132e-12" in_port="memory.data[39:20]" out_port="mem_1024x20_dp.data2"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_1024x20_dp.we1">
            <delay_constant max="132e-12" in_port="memory.we1" out_port="mem_1024x20_dp.we1"/>
          </direct>
          <direct name="writeen2" input="memory.we2" output="mem_1024x20_dp.we2">
            <delay_constant max="132e-12" in_port="memory.we2" out_port="mem_1024x20_dp.we2"/>
          </direct>
          <direct name="dataout1" input="mem_1024x20_dp.out1" output="memory.out[19:0]">
            <delay_constant max="40e-12" in_port="mem_1024x20_dp.out1" out_port="memory.out[19:0]"/>
          </direct>
          <direct name="dataout2" input="mem_1024x20_dp.out2" output="memory.out[39:20]">
            <delay_constant max="40e-12" in_port="mem_1024x20_dp.out2" out_port="memory.out[39:20]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_1024x20_dp.clk">
             </direct>
        </interconnect>
      </mode>

      <mode name="mem_1024x16_dp">
        <pb_type name="mem_1024x16_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
          <input name="addr1" num_pins="10" port_class="address1"/>
          <input name="addr2" num_pins="10" port_class="address2"/>
          <input name="data1" num_pins="16" port_class="data_in1"/>
          <input name="data2" num_pins="16" port_class="data_in2"/>
          <input name="we1" num_pins="1" port_class="write_en1"/>
          <input name="we2" num_pins="1" port_class="write_en2"/>
          <output name="out1" num_pins="16" port_class="data_out1"/>
          <output name="out2" num_pins="16" port_class="data_out2"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="472e-12" port="mem_1024x16_dp.addr1" clock="clk"/>
          <T_setup value="472e-12" port="mem_1024x16_dp.data1" clock="clk"/>
          <T_setup value="472e-12" port="mem_1024x16_dp.we1" clock="clk"/>
          <T_setup value="472e-12" port="mem_1024x16_dp.addr2" clock="clk"/>
          <T_setup value="472e-12" port="mem_1024x16_dp.data2" clock="clk"/>
          <T_setup value="472e-12" port="mem_1024x16_dp.we2" clock="clk"/>
          <T_clock_to_Q max="1.156e-9" port="mem_1024x16_dp.out1" clock="clk"/>
          <T_clock_to_Q max="1.156e-9" port="mem_1024x16_dp.out2" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="17.9e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[9:0]" output="mem_1024x16_dp.addr1">
            <delay_constant max="132e-12" in_port="memory.addr1[9:0]" out_port="mem_1024x16_dp.addr1"/>
          </direct>
          <direct name="address2" input="memory.addr2[9:0]" output="mem_1024x16_dp.addr2">
            <delay_constant max="132e-12" in_port="memory.addr2[9:0]" out_port="mem_1024x16_dp.addr2"/>
          </direct>
          <direct name="data1" input="memory.data[15:0]" output="mem_1024x16_dp.data1">
            <delay_constant max="132e-12" in_port="memory.data[15:0]" out_port="mem_1024x16_dp.data1"/>
          </direct>
          <direct name="data2" input="memory.data[31:16]" output="mem_1024x16_dp.data2">
            <delay_constant max="132e-12" in_port="memory.data[31:16]" out_port="mem_1024x16_dp.data2"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_1024x16_dp.we1">
            <delay_constant max="132e-12" in_port="memory.we1" out_port="mem_1024x16_dp.we1"/>
          </direct>
          <direct name="writeen2" input="memory.we2" output="mem_1024x16_dp.we2">
            <delay_constant max="132e-12" in_port="memory.we2" out_port="mem_1024x16_dp.we2"/>
          </direct>
          <direct name="dataout1" input="mem_1024x16_dp.out1" output="memory.out[15:0]">
            <delay_constant max="40e-12" in_port="mem_1024x16_dp.out1" out_port="memory.out[15:0]"/>
          </direct>
          <direct name="dataout2" input="mem_1024x16_dp.out2" output="memory.out[31:16]">
            <delay_constant max="40e-12" in_port="mem_1024x16_dp.out2" out_port="memory.out[31:16]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_1024x16_dp.clk">
             </direct>
        </interconnect>
      </mode>

      <mode name="mem_2048x10_dp">
        <pb_type name="mem_2048x10_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
          <input name="addr1" num_pins="11" port_class="address1"/>
          <input name="addr2" num_pins="11" port_class="address2"/>
          <input name="data1" num_pins="10" port_class="data_in1"/>
          <input name="data2" num_pins="10" port_class="data_in2"/>
          <input name="we1" num_pins="1" port_class="write_en1"/>
          <input name="we2" num_pins="1" port_class="write_en2"/>
          <output name="out1" num_pins="10" port_class="data_out1"/>
          <output name="out2" num_pins="10" port_class="data_out2"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="472e-12" port="mem_2048x10_dp.addr1" clock="clk"/>
          <T_setup value="472e-12" port="mem_2048x10_dp.data1" clock="clk"/>
          <T_setup value="472e-12" port="mem_2048x10_dp.we1" clock="clk"/>
          <T_setup value="472e-12" port="mem_2048x10_dp.addr2" clock="clk"/>
          <T_setup value="472e-12" port="mem_2048x10_dp.data2" clock="clk"/>
          <T_setup value="472e-12" port="mem_2048x10_dp.we2" clock="clk"/>
          <T_clock_to_Q max="1.156e-9" port="mem_2048x10_dp.out1" clock="clk"/>
          <T_clock_to_Q max="1.156e-9" port="mem_2048x10_dp.out2" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="17.9e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[10:0]" output="mem_2048x10_dp.addr1">
            <delay_constant max="132e-12" in_port="memory.addr1[10:0]" out_port="mem_2048x10_dp.addr1"/>
          </direct>
          <direct name="address2" input="memory.addr2[10:0]" output="mem_2048x10_dp.addr2">
            <delay_constant max="132e-12" in_port="memory.addr2[10:0]" out_port="mem_2048x10_dp.addr2"/>
          </direct>
          <direct name="data1" input="memory.data[9:0]" output="mem_2048x10_dp.data1">
            <delay_constant max="132e-12" in_port="memory.data[9:0]" out_port="mem_2048x10_dp.data1"/>
          </direct>
          <direct name="data2" input="memory.data[19:10]" output="mem_2048x10_dp.data2">
            <delay_constant max="132e-12" in_port="memory.data[19:10]" out_port="mem_2048x10_dp.data2"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_2048x10_dp.we1">
            <delay_constant max="132e-12" in_port="memory.we1" out_port="mem_2048x10_dp.we1"/>
          </direct>
          <direct name="writeen2" input="memory.we2" output="mem_2048x10_dp.we2">
            <delay_constant max="132e-12" in_port="memory.we2" out_port="mem_2048x10_dp.we2"/>
          </direct>
          <direct name="dataout1" input="mem_2048x10_dp.out1" output="memory.out[9:0]">
            <delay_constant max="40e-12" in_port="mem_2048x10_dp.out1" out_port="memory.out[9:0]"/>
          </direct>
          <direct name="dataout2" input="mem_2048x10_dp.out2" output="memory.out[19:10]">
            <delay_constant max="40e-12" in_port="mem_2048x10_dp.out2" out_port="memory.out[19:10]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_2048x10_dp.clk">
             </direct>
        </interconnect>
      </mode>

      <mode name="mem_2048x8_dp">
        <pb_type name="mem_2048x8_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
          <input name="addr1" num_pins="11" port_class="address1"/>
          <input name="addr2" num_pins="11" port_class="address2"/>
          <input name="data1" num_pins="8" port_class="data_in1"/>
          <input name="data2" num_pins="8" port_class="data_in2"/>
          <input name="we1" num_pins="1" port_class="write_en1"/>
          <input name="we2" num_pins="1" port_class="write_en2"/>
          <output name="out1" num_pins="8" port_class="data_out1"/>
          <output name="out2" num_pins="8" port_class="data_out2"/>
          <clock name="clk" num_pins="1" port_class="clock"/>
          <T_setup value="472e-12" port="mem_2048x8_dp.addr1" clock="clk"/>
          <T_setup value="472e-12" port="mem_2048x8_dp.data1" clock="clk"/>
          <T_setup value="472e-12" port="mem_2048x8_dp.we1" clock="clk"/>
          <T_setup value="472e-12" port="mem_2048x8_dp.addr2" clock="clk"/>
          <T_setup value="472e-12" port="mem_2048x8_dp.data2" clock="clk"/>
          <T_setup value="472e-12" port="mem_2048x8_dp.we2" clock="clk"/>
          <T_clock_to_Q max="1.156e-9" port="mem_2048x8_dp.out1" clock="clk"/>
          <T_clock_to_Q max="1.156e-9" port="mem_2048x8_dp.out2" clock="clk"/>
          <power method="pin-toggle">
            <port name="clk" energy_per_toggle="17.9e-12"/>
            <static_power power_per_instance="0.0"/>
          </power>
        </pb_type>
        <interconnect>
          <direct name="address1" input="memory.addr1[10:0]" output="mem_2048x8_dp.addr1">
            <delay_constant max="132e-12" in_port="memory.addr1[10:0]" out_port="mem_2048x8_dp.addr1"/>
          </direct>
          <direct name="address2" input="memory.addr2[10:0]" output="mem_2048x8_dp.addr2">
            <delay_constant max="132e-12" in_port="memory.addr2[10:0]" out_port="mem_2048x8_dp.addr2"/>
          </direct>
          <direct name="data1" input="memory.data[7:0]" output="mem_2048x8_dp.data1">
            <delay_constant max="132e-12" in_port="memory.data[7:0]" out_port="mem_2048x8_dp.data1"/>
          </direct>
          <direct name="data2" input="memory.data[15:8]" output="mem_2048x8_dp.data2">
            <delay_constant max="132e-12" in_port="memory.data[15:8]" out_port="mem_2048x8_dp.data2"/>
          </direct>
          <direct name="writeen1" input="memory.we1" output="mem_2048x8_dp.we1">
            <delay_constant max="132e-12" in_port="memory.we1" out_port="mem_2048x8_dp.we1"/>
          </direct>
          <direct name="writeen2" input="memory.we2" output="mem_2048x8_dp.we2">
            <delay_constant max="132e-12" in_port="memory.we2" out_port="mem_2048x8_dp.we2"/>
          </direct>
          <direct name="dataout1" input="mem_2048x8_dp.out1" output="memory.out[7:0]">
            <delay_constant max="40e-12" in_port="mem_2048x8_dp.out1" out_port="memory.out[7:0]"/>
          </direct>
          <direct name="dataout2" input="mem_2048x8_dp.out2" output="memory.out[15:8]">
            <delay_constant max="40e-12" in_port="mem_2048x8_dp.out2" out_port="memory.out[15:8]"/>
          </direct>
          <direct name="clk" input="memory.clk" output="mem_2048x8_dp.clk">
             </direct>
        </interconnect>
      </mode>

      <!-- Every input pin is driven by 15% of the tracks in a channel, every output pin is driven by 10% of the tracks in a channel -->
      <fc in_type="frac" in_val="0.15" out_type="frac" out_val="0.10">
        <fc_override fc_type="frac" fc_val="0" port_name="clk"/>
      </fc>
      <pinlocations pattern="spread"/>

      <!-- Place this memory block every 8 columns from (and including) the second column -->
      <power method="sum-of-children"/>
    </pb_type>
    <!-- Define fracturable memory end -->


  </complexblocklist>
  <power>
    <local_interconnect C_wire="2.5e-10"/>
    <mux_transistor_size mux_transistor_size="3"/>
    <FF_size FF_size="4"/>
    <LUT_transistor_size LUT_transistor_size="4"/> 
  </power>
  <clocks>
    <clock buffer_size="auto" C_wire="2.5e-10"/>
  </clocks>
</architecture>
